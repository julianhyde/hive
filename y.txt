commit 11d9c00f64ca2b3db40866edf765174f6693eefc
Author: Navis Ryu <navis@apache.org>
Date:   Fri Jul 18 04:12:10 2014 +0000

    HIVE-7345 : Beeline changes its prompt to reflect successful database connection even after failing to connect (Ashish Kumar Singh via Navis)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1611537 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 528a98e..10fd2e2 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -1165,8 +1165,9 @@ String getPrompt() {
     if (getDatabaseConnection() == null || getDatabaseConnection().getUrl() == null) {
       return "beeline> ";
     } else {
+      String printClosed = getDatabaseConnection().isClosed() ? " (closed)" : "";
       return getPrompt(getDatabaseConnections().getIndex()
-          + ": " + getDatabaseConnection().getUrl()) + "> ";
+          + ": " + getDatabaseConnection().getUrl()) + printClosed + "> ";
     }
   }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index 00b49af..ab67700 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -30,7 +30,6 @@
 import java.sql.SQLException;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.Properties;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
@@ -54,6 +53,9 @@
   private Schema schema = null;
   private Completor sqlCompletor = null;
 
+  public boolean isClosed() {
+    return (null == connection);
+  }
 
   public DatabaseConnection(BeeLine beeLine, String driver, String url,
        Properties info) throws SQLException {
@@ -101,15 +103,6 @@ public boolean isDelimiterChar(String buf, int pos) {
 
   /**
    * Connection to the specified data source.
-   *
-   * @param driver
-   *          the driver class
-   * @param url
-   *          the connection URL
-   * @param username
-   *          the username
-   * @param password
-   *          the password
    */
   boolean connect() throws SQLException {
     try {

commit 50c8b4f9725e11c472e9b719acf479f80229d8c6
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Thu Jul 17 18:55:01 2014 +0000

    HIVE-6928: Beeline should not chop off 'describe extended' results by default (Chinna via Xuefu)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1611435 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 75f7d38..a1e07a0 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -82,6 +82,8 @@
   //This can be set for old behavior of nulls printed as empty strings
   private boolean nullEmptyString = false;
 
+  private boolean truncateTable = false;
+
   private final File rcFile = new File(saveDir(), "beeline.properties");
   private String historyFile = new File(saveDir(), "history").getAbsolutePath();
 
@@ -490,5 +492,13 @@ public String getNullString(){
   public void setHiveConfVariables(Map<String, String> hiveConfVariables) {
     this.hiveConfVariables = hiveConfVariables;
   }
+
+  public boolean getTruncateTable() {
+    return truncateTable;
+  }
+
+  public void setTruncateTable(boolean truncateTable) {
+    this.truncateTable = truncateTable;
+  }
 }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
index 0e8dffd..2753568 100644
--- a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
@@ -49,7 +49,9 @@ public int print(Rows rows) {
     for (; rows.hasNext();) {
       Rows.Row row = (Rows.Row) rows.next();
       ColorBuffer cbuf = getOutputString(rows, row);
-      cbuf = cbuf.truncate(width);
+      if (beeLine.getOpts().getTruncateTable()) {
+        cbuf = cbuf.truncate(width);
+      }
 
       if (index == 0)  {
         sb.setLength(0);
@@ -61,9 +63,10 @@ public int print(Rows rows) {
         }
 
         headerCols = cbuf;
-        header = beeLine.getColorBuffer()
-            .green(sb.toString())
-            .truncate(headerCols.getVisibleLength());
+        header = beeLine.getColorBuffer().green(sb.toString());
+        if (beeLine.getOpts().getTruncateTable()) {
+          header = header.truncate(headerCols.getVisibleLength());
+        }
       }
 
       if (beeLine.getOpts().getShowHeader()) {
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 390d062..ddb0ba7 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -167,6 +167,7 @@ cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  --silent=[true/false]           be more silent\n \
 \  --autosave=[true/false]         automatically save preferences\n \
 \  --outputformat=[table/vertical/csv/tsv]   format mode for result display\n \
+\  --truncateTable=[true/false]    truncate table column when it exceeds length\n \
 \  --isolation=LEVEL               set the transaction isolation level\n \
 \  --nullemptystring=[true/false]  set to true to get historic behavior of printing null as empty string\n \
 \  --help                          display this message
diff --git a/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java b/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java
index b78b7ad..8329db8 100644
--- a/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java
+++ b/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java
@@ -104,12 +104,14 @@ public void testHiveConfAndVars() throws Exception {
   @Test
   public void testBeelineOpts() throws Exception {
     TestBeeline bl = new TestBeeline();
-    String args[] = new String[] {"-u", "url", "-n", "name",
-      "-p", "password", "-d", "driver", "--autoCommit=true", "--verbose"};
+    String args[] =
+        new String[] { "-u", "url", "-n", "name", "-p", "password", "-d", "driver",
+            "--autoCommit=true", "--verbose", "--truncateTable" };
     Assert.assertTrue(bl.initArgs(args));
     Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
     Assert.assertTrue(bl.getOpts().getAutoCommit());
     Assert.assertTrue(bl.getOpts().getVerbose());
+    Assert.assertTrue(bl.getOpts().getTruncateTable());
   }
 
   /**

commit cd638e255d9922d739477eac0a4a6b8f38d41c69
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Sun Jul 6 04:03:29 2014 +0000

    HIVE-6694: Beeline should provide a way to execute shell command as Hive CLI does (reviewed by Brock)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1608160 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 2f3350e..528a98e 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -238,6 +238,8 @@
           null),
       new ReflectiveCommandHandler(this, new String[] {"sql"},
           null),
+      new ReflectiveCommandHandler(this, new String[] {"sh"},
+          null),
       new ReflectiveCommandHandler(this, new String[] {"call"},
           null),
       new ReflectiveCommandHandler(this, new String[] {"nullemptystring"},
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 88a94d7..a92d69f 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -46,6 +46,8 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import org.apache.hadoop.hive.common.cli.ShellCmdExecutor;
+
 
 public class Commands {
   private final BeeLine beeLine;
@@ -659,6 +661,36 @@ public boolean sql(String line) {
     return execute(line, false);
   }
 
+  public boolean sh(String line) {
+    if (line == null || line.length() == 0) {
+      return false;
+    }
+
+    if (!line.startsWith("sh")) {
+      return false;
+    }
+
+    line = line.substring("sh".length()).trim();
+
+    // Support variable substitution. HIVE-6791.
+    // line = new VariableSubstitution().substitute(new HiveConf(BeeLine.class), line.trim());
+
+    try {
+      ShellCmdExecutor executor = new ShellCmdExecutor(line, beeLine.getOutputStream(),
+          beeLine.getErrorStream());
+      int ret = executor.execute();
+      if (ret != 0) {
+        beeLine.output("Command failed with exit code = " + ret);
+        return false;
+      }
+      return true;
+    } catch (Exception e) {
+      beeLine.error("Exception raised from Shell command " + e);
+      beeLine.error(e);
+      return false;
+    }
+  }
+
   public boolean call(String line) {
     return execute(line, true);
   }
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 6f7a405..390d062 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -57,6 +57,7 @@ help-alias: Create a new command alias
 help-unalias: Unset a command alias
 help-scan: Scan for installed JDBC drivers
 help-sql: Execute a SQL command
+help-sh: Execute a shell command
 help-history: Display the command history
 help-record: Record all output to the specified file
 help-indexes: List all the indexes for the specified table

commit 62827950b894d26cb5d373d6c6d1451b8357f8de
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Wed Jun 18 23:30:51 2014 +0000

    HIVE-6561: Beeline should accept -i option to Initializing a SQL file (Navis via Xuefu)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1603671 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index dcdd6f2..2f3350e 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -24,6 +24,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.Closeable;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;
@@ -76,7 +77,9 @@
 import jline.Completor;
 import jline.ConsoleReader;
 import jline.FileNameCompletor;
+import jline.History;
 import jline.SimpleCompletor;
+import org.apache.hadoop.io.IOUtils;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.GnuParser;
@@ -101,7 +104,7 @@
  * </ul>
  *
  */
-public class BeeLine {
+public class BeeLine implements Closeable {
   private static final ResourceBundle resourceBundle =
       ResourceBundle.getBundle(BeeLine.class.getSimpleName());
   private final BeeLineSignalHandler signalHandler = null;
@@ -123,6 +126,8 @@
   private List<String> batch = null;
   private final Reflector reflector;
 
+  private History history;
+
   private static final Options options = new Options();
 
   public static final String BEELINE_DEFAULT_JDBC_DRIVER = "org.apache.hive.jdbc.HiveDriver";
@@ -291,6 +296,13 @@
         .withDescription("the authentication type")
         .create('a'));
 
+    // -i <init file>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("init")
+        .withDescription("script file for initialization")
+        .create('i'));
+
     // -e <query>
     options.addOption(OptionBuilder
         .hasArgs()
@@ -298,7 +310,7 @@
         .withDescription("query that should be executed")
         .create('e'));
 
-    // -f <file>
+    // -f <script file>
     options.addOption(OptionBuilder
         .hasArg()
         .withArgName("file")
@@ -618,7 +630,7 @@ boolean initArgs(String[] args) {
       return false;
     }
 
-    String driver = null, user = null, pass = null, url = null, cmd = null;
+    String driver = null, user = null, pass = null, url = null;
     String auth = null;
 
 
@@ -643,6 +655,7 @@ boolean initArgs(String[] args) {
     getOpts().setAuthType(auth);
     pass = cl.getOptionValue("p");
     url = cl.getOptionValue("u");
+    getOpts().setInitFile(cl.getOptionValue("i"));
     getOpts().setScriptFile(cl.getOptionValue("f"));
     if (cl.getOptionValues('e') != null) {
       commands = Arrays.asList(cl.getOptionValues('e'));
@@ -674,7 +687,6 @@ boolean initArgs(String[] args) {
       dispatch("!properties " + i.next());
     }
 
-
     if (commands.size() > 0) {
       // for single command execute, disable color
       getOpts().setColor(false);
@@ -697,7 +709,6 @@ boolean initArgs(String[] args) {
    * global variable <code>exit</code> is true.
    */
   public int begin(String[] args, InputStream inputStream) throws IOException {
-    int status = ERRNO_OK;
     try {
       // load the options first, so we can override on the command line
       getOpts().load();
@@ -705,55 +716,72 @@ public int begin(String[] args, InputStream inputStream) throws IOException {
       // nothing
     }
 
-    if (!(initArgs(args))) {
-      usage();
-      return ERRNO_ARGS;
+    try {
+      if (!initArgs(args)) {
+        usage();
+        return ERRNO_ARGS;
+      }
+
+      if (getOpts().getScriptFile() != null) {
+        return executeFile(getOpts().getScriptFile());
+      }
+      try {
+        info(getApplicationTitle());
+      } catch (Exception e) {
+        // ignore
+      }
+      ConsoleReader reader = getConsoleReader(inputStream);
+      return execute(reader, false);
+    } finally {
+      close();
     }
+  }
 
-    ConsoleReader reader = null;
-    boolean runningScript = (getOpts().getScriptFile() != null);
-    if (runningScript) {
+  int runInit() {
+    String initFile = getOpts().getInitFile();
+    if (initFile != null) {
+      info("Running init script " + initFile);
       try {
-        FileInputStream scriptStream = new FileInputStream(getOpts().getScriptFile());
-        reader = getConsoleReader(scriptStream);
-      } catch (Throwable t) {
-        handleException(t);
-        commands.quit(null);
-        status = ERRNO_OTHER;
+        return executeFile(initFile);
+      } finally {
+        exit = false;
       }
-    } else {
-      reader = getConsoleReader(inputStream);
     }
+    return ERRNO_OK;
+  }
 
+  private int executeFile(String fileName) {
+    FileInputStream initStream = null;
     try {
-      info(getApplicationTitle());
-    } catch (Exception e) {
-      // ignore
+      initStream = new FileInputStream(fileName);
+      return execute(getConsoleReader(initStream), true);
+    } catch (Throwable t) {
+      handleException(t);
+      return ERRNO_OTHER;
+    } finally {
+      IOUtils.closeStream(initStream);
+      consoleReader = null;
+      output("");   // dummy new line
     }
+  }
 
+  private int execute(ConsoleReader reader, boolean exitOnError) {
     while (!exit) {
       try {
         // Execute one instruction; terminate on executing a script if there is an error
-        if (!dispatch(reader.readLine(getPrompt())) && runningScript) {
-          commands.quit(null);
-          status = ERRNO_OTHER;
+        if (!dispatch(reader.readLine(getPrompt())) && exitOnError) {
+          return ERRNO_OTHER;
         }
-      } catch (EOFException eof) {
-        // CTRL-D
-        commands.quit(null);
       } catch (Throwable t) {
         handleException(t);
-        status = ERRNO_OTHER;
+        return ERRNO_OTHER;
       }
     }
-    // ### NOTE jvs 10-Aug-2004: Clean up any outstanding
-    // connections automatically.
-    commands.closeall(null);
-    return status;
+    return ERRNO_OK;
   }
 
+  @Override
   public void close() {
-    commands.quit(null);
     commands.closeall(null);
   }
 
@@ -822,7 +850,7 @@ void usage() {
    * Dispatch the specified line to the appropriate {@link CommandHandler}.
    *
    * @param line
-   *          the commmand-line to dispatch
+   *          the command-line to dispatch
    * @return true if the command was "successful"
    */
   boolean dispatch(String line) {
@@ -1434,6 +1462,8 @@ void handleException(Throwable e) {
 
     if (e instanceof SQLException) {
       handleSQLException((SQLException) e);
+    } else if (e instanceof EOFException) {
+      setExit(true);  // CTRL-D
     } else if (!(getOpts().getVerbose())) {
       if (e.getMessage() == null) {
         error(e.getClass().getName());
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 44cabdf..75f7d38 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -86,6 +86,7 @@
   private String historyFile = new File(saveDir(), "history").getAbsolutePath();
 
   private String scriptFile = null;
+  private String initFile = null;
   private String authType = null;
 
 
@@ -358,6 +359,14 @@ public String getScriptFile() {
     return scriptFile;
   }
 
+  public String getInitFile() {
+    return initFile;
+  }
+
+  public void setInitFile(String initFile) {
+    this.initFile = initFile;
+  }
+
   public void setColor(boolean color) {
     this.color = color;
   }
@@ -481,6 +490,5 @@ public String getNullString(){
   public void setHiveConfVariables(Map<String, String> hiveConfVariables) {
     this.hiveConfVariables = hiveConfVariables;
   }
-
 }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 94f74d2..88a94d7 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -964,6 +964,7 @@ public boolean connect(Properties props) throws IOException {
       beeLine.getDatabaseConnections().setConnection(
           new DatabaseConnection(beeLine, driver, url, props));
       beeLine.getDatabaseConnection().getConnection();
+      beeLine.runInit();
 
       beeLine.setCompletions();
       return true;
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 697c29a..6f7a405 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -143,8 +143,9 @@ cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  -n <username>                   the username to connect as\n \
 \  -p <password>                   the password to connect as\n \
 \  -d <driver class>               the driver class to use\n \
+\  -i <init file>                  script file for initialization\n \
 \  -e <query>                      query that should be executed\n \
-\  -f <file>                       script file that should be executed\n \
+\  -f <exec file>                  script file that should be executed\n \
 \  --hiveconf property=value       Use value for given property\n \
 \  --hivevar name=value            hive variable name and value\n \
 \                                  This is Hive specific settings in which variables\n \

commit 1b3acbcc3731c237f52d218a093b34dcb2c95d39
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Mon Jun 16 17:43:57 2014 +0000

    HIVE-7200: Beeline output displays column heading even if --showHeader=false is set (Naveen Gangam via Xuefu)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1602937 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
index 2be4678..0e8dffd 100644
--- a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
@@ -66,13 +66,16 @@ public int print(Rows rows) {
             .truncate(headerCols.getVisibleLength());
       }
 
-      if (index == 0 ||
-          (beeLine.getOpts().getHeaderInterval() > 0
-              && index % beeLine.getOpts().getHeaderInterval() == 0
-              && beeLine.getOpts().getShowHeader())) {
-        printRow(header, true);
-        printRow(headerCols, false);
-        printRow(header, true);
+      if (beeLine.getOpts().getShowHeader()) {
+        if (index == 0 ||
+            (index - 1 > 0 && ((index - 1) % beeLine.getOpts().getHeaderInterval() == 0))
+           ) {
+          printRow(header, true);
+          printRow(headerCols, false);
+          printRow(header, true);
+        }
+      } else if (index == 0) {
+          printRow(header, true);
       }
 
       if (index != 0) {
@@ -81,7 +84,7 @@ public int print(Rows rows) {
       index++;
     }
 
-    if (header != null && beeLine.getOpts().getShowHeader()) {
+    if (header != null) {
       printRow(header, true);
     }
 
@@ -137,4 +140,4 @@ ColorBuffer getOutputString(Rows rows, Rows.Row row, String delim) {
     }
     return buf;
   }
-}
\ No newline at end of file
+}

commit 92905950ba1becb724cbd583d3686398f4bcf811
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Fri Jun 6 16:21:58 2014 +0000

    HIVE-7176 : FileInputStream is not closed in Commands#properties() (Navis via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1600954 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 493f963..94f74d2 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -22,6 +22,8 @@
  */
 package org.apache.hive.beeline;
 
+import org.apache.hadoop.io.IOUtils;
+
 import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.io.FileReader;
@@ -831,7 +833,12 @@ public boolean properties(String line) throws Exception {
 
     for (int i = 1; i < parts.length; i++) {
       Properties props = new Properties();
-      props.load(new FileInputStream(parts[i]));
+      InputStream stream = new FileInputStream(parts[i]);
+      try {
+        props.load(stream);
+      } finally {
+        IOUtils.closeStream(stream);
+      }
       if (connect(props)) {
         successes++;
       }

commit 931444edb21f21396584232089b0858462eea344
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Thu May 22 22:13:23 2014 +0000

    HIVE-6684: Beeline does not accept comments that are preceded by spaces (Jeremy Beard via Xuefu)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1596976 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 5773109..dcdd6f2 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -940,7 +940,8 @@ boolean isHelpRequest(String line) {
   boolean isComment(String line) {
     // SQL92 comment prefix is "--"
     // beeline also supports shell-style "#" prefix
-    return line.startsWith("#") || line.startsWith("--");
+    String lineTrimmed = line.trim();
+    return lineTrimmed.startsWith("#") || lineTrimmed.startsWith("--");
   }
 
   /**

commit fd9f7ef02ebd73b6fb0941bc706d5ace1127c713
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Tue Apr 22 16:20:03 2014 +0000

    HIVE-6927 : Add support for MSSQL in schematool (Deepesh Khandelwal via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1589197 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
index 5dda36c..a21fa65 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
@@ -21,6 +21,7 @@
 
 public class HiveSchemaHelper {
   public static final String DB_DERBY = "derby";
+  public static final String DB_MSSQL = "mssql";
   public static final String DB_MYSQL = "mysql";
   public static final String DB_POSTGRACE = "postgres";
   public static final String DB_ORACLE = "oracle";
@@ -251,9 +252,29 @@ public boolean isNestedScript(String dbCommand) {
     }
   }
 
+  //MSSQL specific parser
+  public static class MSSQLCommandParser extends AbstractCommandParser {
+    private static String MSSQL_NESTING_TOKEN = ":r";
+    @Override
+    public String getScriptName(String dbCommand) throws IllegalArgumentException {
+      String[] tokens = dbCommand.split(" ");
+      if (tokens.length != 2) {
+        throw new IllegalArgumentException("Couldn't parse line " + dbCommand);
+      }
+      return tokens[1];
+    }
+
+    @Override
+    public boolean isNestedScript(String dbCommand) {
+      return dbCommand.startsWith(MSSQL_NESTING_TOKEN);
+    }
+  }
+
   public static NestedScriptParser getDbCommandParser(String dbName) {
     if (dbName.equalsIgnoreCase(DB_DERBY)) {
       return new DerbyCommandParser();
+    } else if (dbName.equalsIgnoreCase(DB_MSSQL)) {
+      return new MSSQLCommandParser();
     } else if (dbName.equalsIgnoreCase(DB_MYSQL)) {
       return new MySqlCommandParser();
     } else if (dbName.equalsIgnoreCase(DB_POSTGRACE)) {
diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
index 9c8cd18..de3ad4e 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
@@ -454,6 +454,7 @@ public static void main(String[] args) {
     if (line.hasOption("dbType")) {
       dbType = line.getOptionValue("dbType");
       if ((!dbType.equalsIgnoreCase(HiveSchemaHelper.DB_DERBY) &&
+          !dbType.equalsIgnoreCase(HiveSchemaHelper.DB_MSSQL) &&
           !dbType.equalsIgnoreCase(HiveSchemaHelper.DB_MYSQL) &&
           !dbType.equalsIgnoreCase(HiveSchemaHelper.DB_POSTGRACE) && !dbType
           .equalsIgnoreCase(HiveSchemaHelper.DB_ORACLE))) {

commit fd4b4f5945c271a6f7c6482f90d2b9a88fc737cd
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Sun Mar 30 15:17:55 2014 +0000

    Beeline throws ArrayIndexOutOfBoundsException for mismatched arguments (Szehon via Xuefu)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1583152 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 1bd7af3..5773109 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -58,7 +58,9 @@
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.ListIterator;
 import java.util.Map;
+import java.util.Properties;
 import java.util.ResourceBundle;
 import java.util.Set;
 import java.util.SortedSet;
@@ -76,6 +78,12 @@
 import jline.FileNameCompletor;
 import jline.SimpleCompletor;
 
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.OptionBuilder;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.ParseException;
+
 
 /**
  * A console SQL shell with command completion.
@@ -115,6 +123,8 @@
   private List<String> batch = null;
   private final Reflector reflector;
 
+  private static final Options options = new Options();
+
   public static final String BEELINE_DEFAULT_JDBC_DRIVER = "org.apache.hive.jdbc.HiveDriver";
   public static final String BEELINE_DEFAULT_JDBC_URL = "jdbc:hive2://";
 
@@ -245,6 +255,81 @@
     }
   }
 
+  static {
+    // -d <driver class>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("driver class")
+        .withDescription("the driver class to use")
+        .create('d'));
+
+    // -u <database url>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("database url")
+        .withDescription("the JDBC URL to connect to")
+        .create('u'));
+
+    // -n <username>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("username")
+        .withDescription("the username to connect as")
+        .create('n'));
+
+    // -p <password>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("password")
+        .withDescription("the password to connect as")
+        .create('p'));
+
+    // -a <authType>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("authType")
+        .withDescription("the authentication type")
+        .create('a'));
+
+    // -e <query>
+    options.addOption(OptionBuilder
+        .hasArgs()
+        .withArgName("query")
+        .withDescription("query that should be executed")
+        .create('e'));
+
+    // -f <file>
+    options.addOption(OptionBuilder
+        .hasArg()
+        .withArgName("file")
+        .withDescription("script file that should be executed")
+        .create('f'));
+
+    // -help
+    options.addOption(OptionBuilder
+        .withLongOpt("help")
+        .withDescription("display this message")
+        .create('h'));
+
+    // Substitution option --hivevar
+    options.addOption(OptionBuilder
+        .withValueSeparator()
+        .hasArgs(2)
+        .withArgName("key=value")
+        .withLongOpt("hivevar")
+        .withDescription("hive variable name and value")
+        .create());
+
+    //hive conf option --hiveconf
+    options.addOption(OptionBuilder
+        .withValueSeparator()
+        .hasArgs(2)
+        .withArgName("property=value")
+        .withLongOpt("hiveconf")
+        .withDescription("Use value for given property")
+        .create());
+  }
+
 
   static Manifest getManifest() throws IOException {
     URL base = BeeLine.class.getResource("/META-INF/MANIFEST.MF");
@@ -498,79 +583,72 @@ ColorBuffer getColorBuffer(String msg) {
   }
 
 
+  public class BeelineParser extends GnuParser {
+
+    @Override
+    protected void processOption(final String arg, final ListIterator iter) throws  ParseException {
+      if ((arg.startsWith("--")) && !(arg.equals(HIVE_VAR_PREFIX) || (arg.equals(HIVE_CONF_PREFIX)) || (arg.equals("--help")))) {
+        String stripped = arg.substring(2, arg.length());
+        String[] parts = split(stripped, "=");
+        debug(loc("setting-prop", Arrays.asList(parts)));
+        if (parts.length >= 2) {
+          getOpts().set(parts[0], parts[1], true);
+        } else {
+          getOpts().set(parts[0], "true", true);
+        }
+      } else {
+        super.processOption(arg, iter);
+      }
+    }
+
+  }
+
   boolean initArgs(String[] args) {
     List<String> commands = new LinkedList<String>();
     List<String> files = new LinkedList<String>();
-    String driver = null, user = null, pass = null, url = null, cmd = null;
-    String auth = null;
 
-    for (int i = 0; i < args.length; i++) {
-      if (args[i].equals("--help") || args[i].equals("-h")) {
-        // Return false here, so usage will be printed.
-        return false;
-      }
+    CommandLine cl;
+    BeelineParser beelineParser;
 
-      // Parse hive variables
-      if (args[i].equals(HIVE_VAR_PREFIX)) {
-        String[] parts = split(args[++i], "=");
-        if (parts.length != 2) {
-          return false;
-        }
-        getOpts().getHiveVariables().put(parts[0], parts[1]);
-        continue;
-      }
+    try {
+      beelineParser = new BeelineParser();
+      cl = beelineParser.parse(options, args);
+    } catch (ParseException e1) {
+      output(e1.getMessage());
+      return false;
+    }
 
-      // Parse hive conf variables
-      if (args[i].equals(HIVE_CONF_PREFIX)) {
-        String[] parts = split(args[++i], "=");
-        if (parts.length != 2) {
-          return false;
-        }
-        getOpts().getHiveConfVariables().put(parts[0], parts[1]);
-        continue;
-      }
+    String driver = null, user = null, pass = null, url = null, cmd = null;
+    String auth = null;
 
-      // -- arguments are treated as properties
-      if (args[i].startsWith("--")) {
-        String[] parts = split(args[i].substring(2), "=");
-        debug(loc("setting-prop", Arrays.asList(parts)));
-        if (parts.length > 0) {
-          boolean ret;
 
-          if (parts.length >= 2) {
-            ret = getOpts().set(parts[0], parts[1], true);
-          } else {
-            ret = getOpts().set(parts[0], "true", true);
-          }
+    if (cl.hasOption("help")) {
+      // Return false here, so usage will be printed.
+      return false;
+    }
 
-          if (!ret) {
-            return false;
-          }
+    Properties hiveVars = cl.getOptionProperties("hivevar");
+    for (String key : hiveVars.stringPropertyNames()) {
+      getOpts().getHiveVariables().put(key, hiveVars.getProperty(key));
+    }
 
-        }
-        continue;
-      }
+    Properties hiveConfs = cl.getOptionProperties("hiveconf");
+    for (String key : hiveConfs.stringPropertyNames()) {
+      getOpts().getHiveConfVariables().put(key, hiveConfs.getProperty(key));
+    }
 
-      if (args[i].equals("-d")) {
-        driver = args[i++ + 1];
-      } else if (args[i].equals("-n")) {
-        user = args[i++ + 1];
-      } else if (args[i].equals("-a")) {
-        auth = args[i++ + 1];
-        getOpts().setAuthType(auth);
-      } else if (args[i].equals("-p")) {
-        pass = args[i++ + 1];
-      } else if (args[i].equals("-u")) {
-        url = args[i++ + 1];
-      } else if (args[i].equals("-e")) {
-        commands.add(args[i++ + 1]);
-      } else if (args[i].equals("-f")) {
-        getOpts().setScriptFile(args[i++ + 1]);
-      } else {
-        return error(loc("unrecognized-argument", args[i]));
-      }
+    driver = cl.getOptionValue("d");
+    auth = cl.getOptionValue("a");
+    user = cl.getOptionValue("n");
+    getOpts().setAuthType(auth);
+    pass = cl.getOptionValue("p");
+    url = cl.getOptionValue("u");
+    getOpts().setScriptFile(cl.getOptionValue("f"));
+    if (cl.getOptionValues('e') != null) {
+      commands = Arrays.asList(cl.getOptionValues('e'));
     }
 
+
     // TODO: temporary disable this for easier debugging
     /*
     if (url == null) {
diff --git a/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java b/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java
new file mode 100644
index 0000000..b78b7ad
--- /dev/null
+++ b/beeline/src/test/org/apache/hive/beeline/TestBeelineArgParsing.java
@@ -0,0 +1,148 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.beeline;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+
+/**
+ * Unit test for Beeline arg parser.
+ */
+public class TestBeelineArgParsing {
+
+  public class TestBeeline extends BeeLine {
+
+    String connectArgs = null;
+    List<String> properties = new ArrayList<String>();
+    List<String> queries = new ArrayList<String>();
+
+    @Override
+    boolean dispatch(String command) {
+      String connectCommand = "!connect";
+      String propertyCommand = "!property";
+      if (command.startsWith(connectCommand)) {
+        this.connectArgs = command.substring(connectCommand.length() + 1, command.length());
+      } else if (command.startsWith(propertyCommand)) {
+        this.properties.add(command.substring(propertyCommand.length() + 1, command.length()));
+      } else {
+        this.queries.add(command);
+      }
+      return true;
+    }
+  }
+
+  @Test
+  public void testSimpleArgs() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-n", "name",
+      "-p", "password", "-d", "driver", "-a", "authType"};
+    Assert.assertTrue(bl.initArgs(args));
+    Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
+    Assert.assertTrue(bl.getOpts().getAuthType().equals("authType"));
+  }
+
+  /**
+   * The first flag is taken by the parser.
+   */
+  @Test
+  public void testDuplicateArgs() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-u", "url2", "-n", "name",
+      "-p", "password", "-d", "driver"};
+    Assert.assertTrue(bl.initArgs(args));
+    Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
+  }
+
+  @Test
+  public void testQueryScripts() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-n", "name",
+      "-p", "password", "-d", "driver", "-e", "select1", "-e", "select2"};
+    Assert.assertTrue(bl.initArgs(args));
+    Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
+    Assert.assertTrue(bl.queries.contains("select1"));
+    Assert.assertTrue(bl.queries.contains("select2"));
+  }
+
+  /**
+   * Test setting hive conf and hive vars with --hiveconf and --hivevar
+   */
+  @Test
+  public void testHiveConfAndVars() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-n", "name",
+      "-p", "password", "-d", "driver", "--hiveconf", "a=avalue", "--hiveconf", "b=bvalue",
+      "--hivevar", "c=cvalue", "--hivevar", "d=dvalue"};
+    Assert.assertTrue(bl.initArgs(args));
+    Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
+    Assert.assertTrue(bl.getOpts().getHiveConfVariables().get("a").equals("avalue"));
+    Assert.assertTrue(bl.getOpts().getHiveConfVariables().get("b").equals("bvalue"));
+    Assert.assertTrue(bl.getOpts().getHiveVariables().get("c").equals("cvalue"));
+    Assert.assertTrue(bl.getOpts().getHiveVariables().get("d").equals("dvalue"));
+  }
+
+  @Test
+  public void testBeelineOpts() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-n", "name",
+      "-p", "password", "-d", "driver", "--autoCommit=true", "--verbose"};
+    Assert.assertTrue(bl.initArgs(args));
+    Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
+    Assert.assertTrue(bl.getOpts().getAutoCommit());
+    Assert.assertTrue(bl.getOpts().getVerbose());
+  }
+
+  /**
+   * Test setting script file with -f option.
+   */
+  @Test
+  public void testScriptFile() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-n", "name",
+      "-p", "password", "-d", "driver", "-f", "myscript"};
+    Assert.assertTrue(bl.initArgs(args));
+    Assert.assertTrue(bl.connectArgs.equals("url name password driver"));
+    Assert.assertTrue(bl.getOpts().getScriptFile().equals("myscript"));
+  }
+
+  /**
+   * Displays the usage.
+   */
+  @Test
+  public void testHelp() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"--help"};
+    Assert.assertFalse(bl.initArgs(args));
+  }
+
+  /**
+   * Displays the usage.
+   */
+  @Test
+  public void testUnmatchedArgs() throws Exception {
+    TestBeeline bl = new TestBeeline();
+    String args[] = new String[] {"-u", "url", "-n"};
+    Assert.assertFalse(bl.initArgs(args));
+  }
+
+}

commit ec3695e05de7f41e3de0f72b332c8a858fc2166b
Author: Harish Butani <rhbutani@apache.org>
Date:   Wed Mar 26 18:08:50 2014 +0000

    HIVE-5768 Beeline connection cannot be closed with not close command (Navis Ryu via Brock Noland)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1581973 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 0ee1e4f..1bd7af3 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -779,19 +779,27 @@ boolean dispatch(String line) {
       for (int i = 0; i < commandHandlers.length; i++) {
         String match = commandHandlers[i].matches(line);
         if (match != null) {
-          cmdMap.put(match, commandHandlers[i]);
+          CommandHandler prev = cmdMap.put(match, commandHandlers[i]);
+          if (prev != null) {
+            return error(loc("multiple-matches",
+                Arrays.asList(prev.getName(), commandHandlers[i].getName())));
+          }
         }
       }
 
       if (cmdMap.size() == 0) {
         return error(loc("unknown-command", line));
-      } else if (cmdMap.size() > 1) {
-        return error(loc("multiple-matches",
-            cmdMap.keySet().toString()));
-      } else {
-        return cmdMap.values().iterator().next()
-            .execute(line);
       }
+      if (cmdMap.size() > 1) {
+        // any exact match?
+        CommandHandler handler = cmdMap.get(line);
+        if (handler == null) {
+          return error(loc("multiple-matches", cmdMap.keySet().toString()));
+        }
+        return handler.execute(line);
+      }
+      return cmdMap.values().iterator().next()
+          .execute(line);
     } else {
       return commands.sql(line);
     }
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 8694864..493f963 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -801,8 +801,8 @@ public boolean close(String line) {
     try {
       if (beeLine.getDatabaseConnection().getConnection() != null
           && !(beeLine.getDatabaseConnection().getConnection().isClosed())) {
-        beeLine.info(beeLine.loc("closing",
-            beeLine.getDatabaseConnection().getConnection().getClass().getName()));
+        int index = beeLine.getDatabaseConnections().getIndex();
+        beeLine.info(beeLine.loc("closing", index, beeLine.getDatabaseConnection()));
         beeLine.getDatabaseConnection().getConnection().close();
       } else {
         beeLine.info(beeLine.loc("already-closed"));
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 3787421..697c29a 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -81,7 +81,7 @@ scanning: Scanning {0}...
 no-such-method: No such method "{0}"
 possible-methods: Possible methods:
 
-closing: Closing: {0}
+closing: Closing: {0}: {1}
 already-closed: Connection is already closed.
 error-setting: Error setting configuration: {0}: {1}
 no-method: No method matching "{0}" was found in {1}.

commit c659949ca34b9437be2ba15ac489a853f9fbec5e
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Thu Mar 20 22:52:16 2014 +0000

    HIVE-6652 : Beeline gives evasive error message for any unrecognized command line arguement (Xuefu Zhang via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1579811 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 3482186..0ee1e4f 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -567,7 +567,7 @@ boolean initArgs(String[] args) {
       } else if (args[i].equals("-f")) {
         getOpts().setScriptFile(args[i++ + 1]);
       } else {
-        files.add(args[i]);
+        return error(loc("unrecognized-argument", args[i]));
       }
     }
 
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index ef876af..3787421 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -7,6 +7,7 @@ enter-for-more: [ Hit "enter" for more ("q" to exit) ]
 no-manual: Could not find manual resource.
 executing-command:	Executing command: {0}
 unknown-command: Unknown command: {0}
+unrecognized-argument: Unrecognized argument: {0}
 autocommit-needs-off: Operation requires that autocommit be turned off.
 no-current-connection: No current connection
 connection-is-closed: Connection is closed

commit d864adcc53080ad70ef860708d1a5203e85e8c56
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Wed Mar 19 15:48:55 2014 +0000

    HIVE-6612 : Misspelling schemaTool completeted (Szehon Ho via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1579268 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
index 1b8e315..9c8cd18 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
@@ -506,7 +506,7 @@ public static void main(String[] args) {
       System.err.println("*** schemaTool failed ***");
       System.exit(1);
     }
-    System.out.println("schemaTool completeted");
+    System.out.println("schemaTool completed");
 
   }
 }

commit c488f580568879cfb552e36ed6fdc11e086a3ed3
Author: Thejas Madhavan Nair <thejas@apache.org>
Date:   Wed Mar 12 10:41:57 2014 +0000

    HIVE-5155 : Support secure proxy user access to HiveServer2 (Prasad Mujumdar via Thejas Nair)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1576685 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index 02bfaaa..6ec1d1a 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -145,6 +145,19 @@
   <build>
     <sourceDirectory>${basedir}/src/java</sourceDirectory>
     <testSourceDirectory>${basedir}/src/test</testSourceDirectory>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <executions>
+          <execution>
+            <goals>
+              <goal>test-jar</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
   </build>
 
 </project>
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index e63a3b0..3482186 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -502,6 +502,7 @@ boolean initArgs(String[] args) {
     List<String> commands = new LinkedList<String>();
     List<String> files = new LinkedList<String>();
     String driver = null, user = null, pass = null, url = null, cmd = null;
+    String auth = null;
 
     for (int i = 0; i < args.length; i++) {
       if (args[i].equals("--help") || args[i].equals("-h")) {
@@ -554,6 +555,9 @@ boolean initArgs(String[] args) {
         driver = args[i++ + 1];
       } else if (args[i].equals("-n")) {
         user = args[i++ + 1];
+      } else if (args[i].equals("-a")) {
+        auth = args[i++ + 1];
+        getOpts().setAuthType(auth);
       } else if (args[i].equals("-p")) {
         pass = args[i++ + 1];
       } else if (args[i].equals("-u")) {
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 91e20ec..44cabdf 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -86,6 +86,8 @@
   private String historyFile = new File(saveDir(), "history").getAbsolutePath();
 
   private String scriptFile = null;
+  private String authType = null;
+
 
   private Map<String, String> hiveVariables = new HashMap<String, String>();
   private Map<String, String> hiveConfVariables = new HashMap<String, String>();
@@ -248,6 +250,13 @@ public void setFastConnect(boolean fastConnect) {
     this.fastConnect = fastConnect;
   }
 
+  public String getAuthType() {
+    return authType;
+  }
+
+  public void setAuthType(String authType) {
+    this.authType = authType;
+  }
 
   public boolean getFastConnect() {
     return fastConnect;
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index d2d7fd3..8694864 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -876,6 +876,7 @@ public boolean connect(String line) throws Exception {
     if (pass != null) {
       props.setProperty("password", pass);
     }
+
     return connect(props);
   }
 
@@ -922,6 +923,7 @@ public boolean connect(Properties props) throws IOException {
         "javax.jdo.option.ConnectionPassword",
         "ConnectionPassword",
     });
+    String auth = getProperty(props, new String[] {"auth"});
 
     if (url == null || url.length() == 0) {
       return beeLine.error("Property \"url\" is required");
@@ -937,14 +939,23 @@ public boolean connect(Properties props) throws IOException {
     if (username == null) {
       username = beeLine.getConsoleReader().readLine("Enter username for " + url + ": ");
     }
+    props.setProperty("user", username);
     if (password == null) {
       password = beeLine.getConsoleReader().readLine("Enter password for " + url + ": ",
           new Character('*'));
     }
+    props.setProperty("password", password);
+
+    if (auth == null) {
+      auth = beeLine.getOpts().getAuthType();
+    }
+    if (auth != null) {
+      props.setProperty("auth", auth);
+    }
 
     try {
       beeLine.getDatabaseConnections().setConnection(
-          new DatabaseConnection(beeLine, driver, url, username, password));
+          new DatabaseConnection(beeLine, driver, url, props));
       beeLine.getDatabaseConnection().getConnection();
 
       beeLine.setCompletions();
@@ -1171,8 +1182,8 @@ private boolean stopRecording(String line) {
     } catch (Exception e) {
       beeLine.handleException(e);
     }
-    beeLine.output(beeLine.loc("record-closed", beeLine.getRecordOutputFile()));
     beeLine.setRecordOutputFile(null);
+    beeLine.output(beeLine.loc("record-closed", beeLine.getRecordOutputFile()));
     return true;
   }
 
@@ -1191,8 +1202,9 @@ private boolean startRecording(String line) {
     }
 
     try {
-      beeLine.setRecordOutputFile(new OutputFile(parts[1]));
-      beeLine.output(beeLine.loc("record-started", beeLine.getRecordOutputFile()));
+      OutputFile recordOutput = new OutputFile(parts[1]);
+      beeLine.output(beeLine.loc("record-started", recordOutput));
+      beeLine.setRecordOutputFile(recordOutput);
       return true;
     } catch (Exception e) {
       return beeLine.error(e);
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index 94178ef..00b49af 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -30,6 +30,7 @@
 import java.sql.SQLException;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Properties;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
@@ -49,19 +50,17 @@
   private DatabaseMetaData meta;
   private final String driver;
   private final String url;
-  private final String username;
-  private final String password;
+  private final Properties info;
   private Schema schema = null;
   private Completor sqlCompletor = null;
 
 
   public DatabaseConnection(BeeLine beeLine, String driver, String url,
-      String username, String password) throws SQLException {
+       Properties info) throws SQLException {
     this.beeLine = beeLine;
     this.driver = driver;
-    this.username = username;
-    this.password = password;
     this.url = url;
+    this.info = info;
   }
 
   @Override
@@ -133,9 +132,6 @@ boolean connect() throws SQLException {
       return beeLine.error(e);
     }
 
-    Properties info = new Properties();
-    info.put(HIVE_AUTH_USER, username);
-    info.put(HIVE_AUTH_PASSWD, password);
     Map<String, String> hiveVars = beeLine.getOpts().getHiveVariables();
     for (Map.Entry<String, String> var : hiveVars.entrySet()) {
       info.put(HIVE_VAR_PREFIX + var.getKey(), var.getValue());
@@ -312,4 +308,4 @@ public Column(String name) {
       }
     }
   }
-}
\ No newline at end of file
+}
diff --git a/beeline/src/test/org/apache/hive/beeline/ProxyAuthTest.java b/beeline/src/test/org/apache/hive/beeline/ProxyAuthTest.java
new file mode 100644
index 0000000..95146e9
--- /dev/null
+++ b/beeline/src/test/org/apache/hive/beeline/ProxyAuthTest.java
@@ -0,0 +1,382 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hive.beeline;
+
+import java.io.*;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hive.jdbc.HiveConnection;
+import org.apache.hive.beeline.BeeLine;
+import org.apache.hadoop.hive.shims.ShimLoader;
+import org.apache.hive.service.auth.HiveAuthFactory;
+
+/**
+ * Simple client application to test various direct and proxy connection to HiveServer2
+ * Note that it's not an automated test at this point. It requires a manually configured
+ * secure HivServer2. It also requires a super user and a normal user principal.
+ * Steps to run the test -
+ *   kinit <super-user>
+ *   hive --service jar beeline/target/hive-beeline-0.13.0-SNAPSHOT-tests.jar \
+ *      org.apache.hive.beeline.ProxyAuthTest \
+ *      <HS2host> <HS2Port> <HS2-Server-principal> <client-principal>
+ */
+public class ProxyAuthTest {
+  private static final String driverName = "org.apache.hive.jdbc.HiveDriver";
+  private static final String BEELINE_EXIT = "beeline.system.exit";
+  private static Connection con = null;
+  private static boolean noClose = false;
+  private static String tabName = "jdbc_test";
+  private static String tabDataFileName;
+  private static String scriptFileName;
+  private static String [] dmlStmts;
+  private static String [] dfsStmts;
+  private static String [] selectStmts;
+  private static String [] cleanUpStmts;
+  private static InputStream inpStream = null;
+  private static int tabCount = 1;
+  private static File resultFile= null;
+
+  public static void main(String[] args) throws Exception {
+    if (args.length < 4) {
+      System.out.println("Usage ProxyAuthTest <host> <port> <server_principal> <proxy_user> [testTab]");
+      System.exit(1);
+    }
+
+    File currentResultFile = null;
+    String [] beeLineArgs = {};
+
+    Class.forName(driverName);
+    String host = args[0];
+    String port = args[1];
+    String serverPrincipal = args[2];
+    String proxyUser = args[3];
+    String url = null;
+    if (args.length > 4) {
+       tabName = args[4];
+    }
+
+    generateData();
+    generateSQL(null);
+
+    try {
+    /*
+     * Connect via kerberos and get delegation token
+     */
+    url = "jdbc:hive2://" + host + ":" + port + "/default;principal=" + serverPrincipal;
+    con = DriverManager.getConnection(url);
+    System.out.println("Connected successfully to " + url);
+    // get delegation token for the given proxy user
+    String token = ((HiveConnection)con).getDelegationToken(proxyUser, serverPrincipal);
+    if ("true".equals(System.getProperty("proxyAuth.debug", "false"))) {
+      System.out.println("Got token: " + token);
+    }
+    con.close();
+
+    // so that beeline won't kill the JVM
+    System.setProperty(BEELINE_EXIT, "true");
+
+    // connect using principal via Beeline with inputStream
+    url = "jdbc:hive2://" + host + ":" + port + "/default;principal=" + serverPrincipal;
+    currentResultFile = generateSQL(null);
+    beeLineArgs = new String[] { "-u", url, "-n", "foo", "-p", "bar"};
+    System.out.println("Connection with kerberos, user/password via args, using input rediction");
+    BeeLine.mainWithInputRedirection(beeLineArgs, inpStream);
+    compareResults( currentResultFile);
+
+    // connect using principal via Beeline with inputStream
+    url = "jdbc:hive2://" + host + ":" + port + "/default;principal=" + serverPrincipal;
+    currentResultFile = generateSQL(null);
+    beeLineArgs = new String[] { "-u", url, "-n", "foo", "-p", "bar", "-f" , scriptFileName};
+    System.out.println("Connection with kerberos, user/password via args, using input script");
+    BeeLine.main(beeLineArgs);
+    compareResults( currentResultFile);
+
+    // connect using principal via Beeline with inputStream
+    url = "jdbc:hive2://" + host + ":" + port + "/default;principal=" + serverPrincipal;
+    currentResultFile = generateSQL(url+ " foo bar ");
+    beeLineArgs = new String[] { "-u", url, "-f" , scriptFileName};
+    System.out.println("Connection with kerberos, user/password via connect, using input script");
+    BeeLine.main(beeLineArgs);
+    compareResults( currentResultFile);
+
+    // connect using principal via Beeline with inputStream
+    url = "jdbc:hive2://" + host + ":" + port + "/default;principal=" + serverPrincipal;
+    currentResultFile = generateSQL(url+ " foo bar ");
+    beeLineArgs = new String[] { "-u", url, "-f" , scriptFileName};
+    System.out.println("Connection with kerberos, user/password via connect, using input redirect");
+    BeeLine.mainWithInputRedirection(beeLineArgs, inpStream);
+    compareResults( currentResultFile);
+
+    /*
+     * Connect using the delegation token passed via configuration object
+     */
+    System.out.println("Store token into ugi and try");
+    storeTokenInJobConf(token);
+    url = "jdbc:hive2://" + host + ":" + port + "/default;auth=delegationToken";
+    con = DriverManager.getConnection(url);
+    System.out.println("Connecting to " + url);
+    runTest();
+    con.close();
+
+    // connect using token via Beeline with inputStream
+    url = "jdbc:hive2://" + host + ":" + port + "/default";
+    currentResultFile = generateSQL(null);
+    beeLineArgs = new String[] { "-u", url, "-n", "foo", "-p", "bar", "-a", "delegationToken" };
+    System.out.println("Connection with token, user/password via args, using input redirection");
+    BeeLine.mainWithInputRedirection(beeLineArgs, inpStream);
+    compareResults( currentResultFile);
+
+    // connect using token via Beeline using script
+    url = "jdbc:hive2://" + host + ":" + port + "/default";
+    currentResultFile = generateSQL(null);
+    beeLineArgs = new String[] { "-u", url, "-n", "foo", "-p", "bar", "-a", "delegationToken",
+        "-f", scriptFileName};
+    System.out.println("Connection with token, user/password via args, using input script");
+    BeeLine.main(beeLineArgs);
+    compareResults( currentResultFile);
+
+    // connect using token via Beeline using script
+    url = "jdbc:hive2://" + host + ":" + port + "/default";
+    currentResultFile = generateSQL(url + " foo bar ");
+    beeLineArgs = new String [] {"-a", "delegationToken", "-f", scriptFileName};
+    System.out.println("Connection with token, user/password via connect, using input script");
+    BeeLine.main(beeLineArgs);
+    compareResults( currentResultFile);
+
+    // connect using token via Beeline using script
+    url = "jdbc:hive2://" + host + ":" + port + "/default";
+    currentResultFile = generateSQL(url + " foo bar ");
+    System.out.println("Connection with token, user/password via connect, using input script");
+    beeLineArgs = new String [] {"-f", scriptFileName, "-a", "delegationToken"};
+    BeeLine.main(beeLineArgs);
+    compareResults( currentResultFile);
+
+    /*
+     * Connect via kerberos with trusted proxy user
+     */
+    url = "jdbc:hive2://" + host + ":" + port + "/default;principal=" + serverPrincipal
+          + ";hive.server2.proxy.user=" + proxyUser;
+    con = DriverManager.getConnection(url);
+    System.out.println("Connected successfully to " + url);
+    runTest();
+
+    ((HiveConnection)con).cancelDelegationToken(token);
+    con.close();
+    } catch (SQLException e) {
+      System.out.println("*** SQLException: " + e.getMessage() + " : " + e.getSQLState());
+      e.printStackTrace();
+    }
+
+    /* verify the connection fails after canceling the token */
+    try {
+      url = "jdbc:hive2://" + host + ":" + port + "/default;auth=delegationToken";
+      con = DriverManager.getConnection(url);
+      throw new Exception ("connection should have failed after token cancelation");
+    } catch (SQLException e) {
+      // Expected to fail due to canceled token
+    }
+  }
+
+  private static void storeTokenInJobConf(String tokenStr) throws Exception {
+    ShimLoader.getHadoopShims().setTokenStr(ShimLoader.getHadoopShims().getUGIForConf(new Configuration()),
+          tokenStr, HiveAuthFactory.HS2_CLIENT_TOKEN);
+    System.out.println("Stored token " + tokenStr);
+  }
+
+  // run sql operations
+  private static void runTest() throws Exception {
+    // craete table and check dir ownership
+    runDMLs();
+
+    // run queries
+    for (String stmt: dfsStmts) {
+      runQuery(stmt);
+    }
+
+    // run queries
+    for (String stmt: selectStmts) {
+      runQuery(stmt);
+    }
+
+    // delete all the objects created
+    cleanUp();
+  }
+
+  // create tables and load data
+  private static void runDMLs() throws Exception {
+    for (String stmt : dmlStmts) {
+      exStatement(stmt);
+    }
+  }
+
+  // drop tables
+  private static void cleanUp() throws Exception {
+    for (String stmt : cleanUpStmts) {
+      exStatement(stmt);
+    }
+  }
+
+  private static void runQuery(String sqlStmt) throws Exception {
+    Statement stmt = con.createStatement();
+    ResultSet res = stmt.executeQuery(sqlStmt);
+
+    ResultSetMetaData meta = res.getMetaData();
+    System.out.println("Resultset has " + meta.getColumnCount() + " columns");
+    for (int i = 1; i <= meta.getColumnCount(); i++) {
+      System.out.println("Column #" + i + " Name: " + meta.getColumnName(i) +
+            " Type: " + meta.getColumnType(i));
+    }
+
+    while (res.next()) {
+      for (int i = 1; i <= meta.getColumnCount(); i++) {
+        System.out.println("Column #" + i + ": " + res.getString(i));
+      }
+    }
+    res.close();
+    stmt.close();
+  }
+
+  // Execute the given sql statement
+  private static void exStatement(String query) throws Exception {
+    Statement stmt = con.createStatement();
+    stmt.execute(query);
+    if (!noClose) {
+      stmt.close();
+    }
+  }
+
+  // generate SQL stmts to execute
+  private static File generateSQL(String url) throws Exception {
+    String current = new java.io.File( "." ).getCanonicalPath();
+    String currentDir = System.getProperty("user.dir");
+    String queryTab = tabName + "_" + (tabCount++);
+    dmlStmts = new String[] {
+    "USE default",
+    "drop table if exists  " + queryTab,
+    "create table " + queryTab + "(id int, name string) " +
+        "ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'",
+    "load data local inpath '" + tabDataFileName + "' into table " + queryTab
+    };
+    selectStmts = new String[] {
+      "select * from " + queryTab + " limit 5",
+      "select name, id from " + queryTab + " where id < 3",
+    };
+    dfsStmts = new String[] {
+//      "set " + SESSION_USER_NAME,
+//      "dfs -ls -d ${hiveconf:hive.metastore.warehouse.dir}/" + queryTab
+    };
+    cleanUpStmts = new String[] {
+      "drop table if exists  " + queryTab
+    };
+
+    // write sql statements to file
+    return writeArrayToByteStream(url);
+  }
+
+  // generate data file for test
+  private static void generateData() throws Exception {
+    String fileData[] = {
+      "1|aaa",
+      "2|bbb",
+      "3|ccc",
+      "4|ddd",
+      "5|eee",
+    };
+
+    File tmpFile = File.createTempFile(tabName, ".data");
+    tmpFile.deleteOnExit();
+    tabDataFileName = tmpFile.getPath();
+    FileWriter fstream = new FileWriter(tabDataFileName);
+    BufferedWriter out = new BufferedWriter(fstream);
+    for (String line: fileData) {
+      out.write(line);
+      out.newLine();
+    }
+    out.close();
+    tmpFile.setWritable(true, true);
+  }
+
+  // Create a input stream of given name.ext  and write sql statements to to it
+  // Returns the result File object which will contain the query results
+  private static File writeArrayToByteStream(String url) throws Exception {
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+
+    if (url != null) {
+      writeCmdLine("!connect " + url, out);
+    }
+    writeCmdLine("!brief", out);
+    writeCmdLine("!set silent true", out);
+    resultFile = File.createTempFile(tabName, ".out");
+    if (!"true".equals(System.getProperty("proxyAuth.debug", "false"))) {
+      resultFile.deleteOnExit();
+    }
+    writeCmdLine("!record " + resultFile.getPath(), out);
+
+    for (String stmt: dmlStmts) {
+      writeSqlLine(stmt, out);
+    }
+
+    for (String stmt: selectStmts) {
+      writeSqlLine(stmt, out);
+    }
+
+    for (String stmt: cleanUpStmts) {
+      writeSqlLine(stmt, out);
+    }
+    writeCmdLine("!record", out);
+    writeCmdLine("!quit", out);
+
+    File tmpFile = File.createTempFile(tabName, ".q");
+    tmpFile.deleteOnExit();
+    scriptFileName = tmpFile.getPath();
+    FileOutputStream fstream = new FileOutputStream(scriptFileName);
+    out.writeTo(fstream);
+
+    inpStream = new ByteArrayInputStream(out.toByteArray());
+    return resultFile;
+  }
+
+  // write stmt + ";" + System.getProperty("line.separator")
+  private static void writeSqlLine(String stmt, OutputStream out) throws Exception {
+    out.write(stmt.getBytes());
+    out.write(";".getBytes());
+    out.write(System.getProperty("line.separator").getBytes());
+  }
+
+  private static void writeCmdLine(String cmdLine, OutputStream out) throws Exception {
+    out.write(cmdLine.getBytes());
+    out.write(System.getProperty("line.separator").getBytes());
+  }
+
+  private static void compareResults(File file2)  throws IOException {
+    // load the expected results
+    File baseResultFile = new File(System.getProperty("proxyAuth.res.file"), "data/files/ProxyAuth.res");
+    if (!FileUtils.contentEquals(baseResultFile, file2)) {
+      throw new IOException("File compare failed: " + file2.getPath() + " differs");
+    }
+  }
+}
+

commit aa4a6f4ca03942407ae3b4d2e71f336c03e27be7
Author: Thejas Madhavan Nair <thejas@apache.org>
Date:   Mon Mar 10 14:33:02 2014 +0000

    HIVE-6359 : beeline -f fails on scripts with tabs in them. (Navis, reviewed by Xuefu Zhang, Thejas Nair)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1575952 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 563d242..e63a3b0 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -714,6 +714,10 @@ public ConsoleReader getConsoleReader(InputStream inputStream) throws IOExceptio
       handleException(e);
     }
 
+    if (inputStream instanceof FileInputStream) {
+      // from script.. no need to load history and no need of completor, either
+      return consoleReader;
+    }
     try {
       // now load in the previous history
       if (historyBuffer != null) {

commit 4a2bb52c48faabd27ff90f3223da5c475aed44c6
Author: Harish Butani <rhbutani@apache.org>
Date:   Wed Mar 5 01:18:48 2014 +0000

    Preparing for 0.14 development
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1574277 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index 7449430..02bfaaa 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -19,7 +19,7 @@
   <parent>
     <groupId>org.apache.hive</groupId>
     <artifactId>hive</artifactId>
-    <version>0.13.0-SNAPSHOT</version>
+    <version>0.14.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 

commit 3bf44b3bec35922d6e79a032cac6ced74154cd11
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Sat Feb 1 03:15:47 2014 +0000

    HIVE-6173: Beeline doesn't accept --hiveconf option as Hive CLI does (reviewed by Prasad)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1563369 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index c5e36a5..563d242 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -126,6 +126,7 @@
   private static final int ERRNO_OTHER = 2;
 
   private static final String HIVE_VAR_PREFIX = "--hivevar";
+  private static final String HIVE_CONF_PREFIX = "--hiveconf";
 
   private final Map<Object, Object> formats = map(new Object[] {
       "vertical", new VerticalOutputFormat(this),
@@ -518,6 +519,16 @@ boolean initArgs(String[] args) {
         continue;
       }
 
+      // Parse hive conf variables
+      if (args[i].equals(HIVE_CONF_PREFIX)) {
+        String[] parts = split(args[++i], "=");
+        if (parts.length != 2) {
+          return false;
+        }
+        getOpts().getHiveConfVariables().put(parts[0], parts[1]);
+        continue;
+      }
+
       // -- arguments are treated as properties
       if (args[i].startsWith("--")) {
         String[] parts = split(args[i].substring(2), "=");
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 04802bc..91e20ec 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -88,6 +88,7 @@
   private String scriptFile = null;
 
   private Map<String, String> hiveVariables = new HashMap<String, String>();
+  private Map<String, String> hiveConfVariables = new HashMap<String, String>();
 
   public BeeLineOpts(BeeLine beeLine, Properties props) {
     this.beeLine = beeLine;
@@ -464,6 +465,13 @@ public String getNullString(){
     return nullEmptyString ? "" : DEFAULT_NULL_STRING;
   }
 
+  public Map<String, String> getHiveConfVariables() {
+    return hiveConfVariables;
+  }
+
+  public void setHiveConfVariables(Map<String, String> hiveConfVariables) {
+    this.hiveConfVariables = hiveConfVariables;
+  }
 
 }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index a4b34c7..94178ef 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -42,6 +42,7 @@
   private static final String HIVE_AUTH_USER = "user";
   private static final String HIVE_AUTH_PASSWD = "password";
   private static final String HIVE_VAR_PREFIX = "hivevar:";
+  private static final String HIVE_CONF_PREFIX = "hiveconf:";
 
   private final BeeLine beeLine;
   private Connection connection;
@@ -139,6 +140,12 @@ boolean connect() throws SQLException {
     for (Map.Entry<String, String> var : hiveVars.entrySet()) {
       info.put(HIVE_VAR_PREFIX + var.getKey(), var.getValue());
     }
+
+    Map<String, String> hiveConfVars = beeLine.getOpts().getHiveConfVariables();
+    for (Map.Entry<String, String> var : hiveConfVars.entrySet()) {
+      info.put(HIVE_CONF_PREFIX + var.getKey(), var.getValue());
+    }
+
     setConnection(DriverManager.getConnection(getUrl(), info));
     setDatabaseMetaData(getConnection().getMetaData());
 
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 408286d..ef876af 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -144,6 +144,7 @@ cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  -d <driver class>               the driver class to use\n \
 \  -e <query>                      query that should be executed\n \
 \  -f <file>                       script file that should be executed\n \
+\  --hiveconf property=value       Use value for given property\n \
 \  --hivevar name=value            hive variable name and value\n \
 \                                  This is Hive specific settings in which variables\n \
 \                                  can be set at session level and referenced in Hive\n \

commit f720ca805f104316ed08a5f71de7295256862ab6
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Thu Jan 30 21:25:47 2014 +0000

    HIVE-6217: Refactor Beeline's JDBC connection to use property map instead of long url (reviewed by Prasad)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1562973 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index 553722d..a4b34c7 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -28,10 +28,10 @@
 import java.sql.DriverManager;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Properties;
 import java.util.Set;
 import java.util.TreeSet;
 
@@ -39,6 +39,10 @@
 import jline.Completor;
 
 class DatabaseConnection {
+  private static final String HIVE_AUTH_USER = "user";
+  private static final String HIVE_AUTH_PASSWD = "password";
+  private static final String HIVE_VAR_PREFIX = "hivevar:";
+
   private final BeeLine beeLine;
   private Connection connection;
   private DatabaseMetaData meta;
@@ -56,38 +60,9 @@ public DatabaseConnection(BeeLine beeLine, String driver, String url,
     this.driver = driver;
     this.username = username;
     this.password = password;
-    this.url = appendHiveVariables(beeLine, url);
+    this.url = url;
   }
 
-/**
- * Append hive variables specified on the command line to the connection url
- * (after #). They will be set later on the session on the server side.
- */
-  private static String appendHiveVariables(BeeLine beeLine, String url) {
-    StringBuilder sb = new StringBuilder( url );
-    Map<String, String> hiveVars = beeLine.getOpts().getHiveVariables();
-    if (hiveVars.size() > 0) {
-      if (url.indexOf("#") == -1) {
-        sb.append("#");
-      } else {
-        sb.append(";");
-      }
-      Set<Map.Entry<String, String>> vars = hiveVars.entrySet();
-      Iterator<Map.Entry<String, String>> it = vars.iterator();
-      while (it.hasNext()) {
-        Map.Entry<String, String> var = it.next();
-        sb.append(var.getKey());
-        sb.append("=");
-        sb.append(var.getValue());
-        if (it.hasNext()) {
-          sb.append(";");
-        }
-      }
-    }
-    return sb.toString();
-  }
-
-
   @Override
   public String toString() {
     return getUrl() + "";
@@ -157,7 +132,14 @@ boolean connect() throws SQLException {
       return beeLine.error(e);
     }
 
-    setConnection(DriverManager.getConnection(getUrl(), username, password));
+    Properties info = new Properties();
+    info.put(HIVE_AUTH_USER, username);
+    info.put(HIVE_AUTH_PASSWD, password);
+    Map<String, String> hiveVars = beeLine.getOpts().getHiveVariables();
+    for (Map.Entry<String, String> var : hiveVars.entrySet()) {
+      info.put(HIVE_VAR_PREFIX + var.getKey(), var.getValue());
+    }
+    setConnection(DriverManager.getConnection(getUrl(), info));
     setDatabaseMetaData(getConnection().getMetaData());
 
     try {

commit 88f32b5879194609c66dbe0c66d78ac5e74dda3e
Author: Xuefu Zhang <xuefu@apache.org>
Date:   Sat Dec 21 01:54:32 2013 +0000

    HIVE-6045: Beeline hivevars is broken for more than one hivevar (Szehon via Xuefu)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1552859 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index 1de5829..553722d 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -70,7 +70,7 @@ private static String appendHiveVariables(BeeLine beeLine, String url) {
       if (url.indexOf("#") == -1) {
         sb.append("#");
       } else {
-        sb.append("&");
+        sb.append(";");
       }
       Set<Map.Entry<String, String>> vars = hiveVars.entrySet();
       Iterator<Map.Entry<String, String>> it = vars.iterator();
@@ -80,7 +80,7 @@ private static String appendHiveVariables(BeeLine beeLine, String url) {
         sb.append("=");
         sb.append(var.getValue());
         if (it.hasNext()) {
-          sb.append("&");
+          sb.append(";");
         }
       }
     }
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
deleted file mode 100644
index b077eb5..0000000
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
+++ /dev/null
@@ -1,386 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hive.beeline.src.test;
-
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.PrintStream;
-import java.io.UnsupportedEncodingException;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.hive.conf.HiveConf;
-import org.apache.hive.beeline.BeeLine;
-import org.apache.hive.service.server.HiveServer2;
-import org.junit.AfterClass;
-import org.junit.Assert;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * TestBeeLineWithArgs - executes tests of the command-line arguments to BeeLine
- *
- */
-//public class TestBeeLineWithArgs extends TestCase {
-public class TestBeeLineWithArgs {
-  // Default location of HiveServer2
-  final private static String JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
-  private static final String tableName = "TestBeelineTable1";
-  private static final String tableComment = "Test table comment";
-
-
-  private static HiveServer2 hiveServer2;
-
-  private List<String> getBaseArgs(String jdbcUrl) {
-    List<String> argList = new ArrayList<String>(8);
-    argList.add("-d");
-    argList.add(BeeLine.BEELINE_DEFAULT_JDBC_DRIVER);
-    argList.add("-u");
-    argList.add(jdbcUrl);
-    return argList;
-  }
-  /**
-   * Start up a local Hive Server 2 for these tests
-   */
-  @BeforeClass
-  public static void preTests() throws Exception {
-    HiveConf hiveConf = new HiveConf();
-    //  hiveConf.logVars(System.err);
-    // System.err.flush();
-
-    hiveServer2 = new HiveServer2();
-    hiveServer2.init(hiveConf);
-    System.err.println("Starting HiveServer2...");
-    hiveServer2.start();
-    Thread.sleep(1000);
-    createTable();
-
-  }
-
-  /**
-   * Create table for use by tests
-   * @throws ClassNotFoundException
-   * @throws SQLException
-   */
-  private static void createTable() throws ClassNotFoundException, SQLException {
-    Class.forName(BeeLine.BEELINE_DEFAULT_JDBC_DRIVER);
-    Connection con = DriverManager.getConnection(JDBC_URL,"", "");
-
-    assertNotNull("Connection is null", con);
-    assertFalse("Connection should not be closed", con.isClosed());
-    Statement stmt = con.createStatement();
-    assertNotNull("Statement is null", stmt);
-
-    stmt.execute("set hive.support.concurrency = false");
-
-    HiveConf conf = new HiveConf();
-    String dataFileDir = conf.get("test.data.files").replace('\\', '/')
-        .replace("c:", "");
-    Path dataFilePath = new Path(dataFileDir, "kv1.txt");
-    // drop table. ignore error.
-    try {
-      stmt.execute("drop table " + tableName);
-    } catch (Exception ex) {
-      fail(ex.toString());
-    }
-
-    // create table
-    stmt.execute("create table " + tableName
-        + " (under_col int comment 'the under column', value string) comment '"
-        + tableComment + "'");
-
-    // load data
-    stmt.execute("load data local inpath '"
-        + dataFilePath.toString() + "' into table " + tableName);
-  }
-
-  /**
-   * Shut down a local Hive Server 2 for these tests
-   */
-  @AfterClass
-  public static void postTests() {
-    try {
-      if (hiveServer2 != null) {
-        System.err.println("Stopping HiveServer2...");
-        hiveServer2.stop();
-      }
-    } catch (Throwable t) {
-      t.printStackTrace();
-    }
-  }
-
-  /**
-   * Execute a script with "beeline -f"
-   * @param scriptFileName The name of the script to execute
-   * @throws Any exception while executing
-   * @return The stderr and stdout from running the script
-   */
-  private String testCommandLineScript(List<String> argList) throws Throwable {
-    BeeLine beeLine = new BeeLine();
-    ByteArrayOutputStream os = new ByteArrayOutputStream();
-    PrintStream beelineOutputStream = new PrintStream(os);
-    beeLine.setOutputStream(beelineOutputStream);
-    beeLine.setErrorStream(beelineOutputStream);
-    String[] args = argList.toArray(new String[argList.size()]);
-    beeLine.begin(args, null);
-    String output = os.toString("UTF8");
-
-    return output;
-  }
-
-  /**
-   * Attempt to execute a simple script file with the -f option to BeeLine
-   * Test for presence of an expected pattern
-   * in the output (stdout or stderr), fail if not found
-   * Print PASSED or FAILED
-   * @paramm testName Name of test to print
-   * @param expectedPattern Text to look for in command output/error
-   * @param shouldMatch true if the pattern should be found, false if it should not
-   * @throws Exception on command execution error
-   */
-  private void testScriptFile(String testName, String scriptText, String expectedPattern,
-      boolean shouldMatch, List<String> argList) throws Throwable {
-
-    long startTime = System.currentTimeMillis();
-    System.out.println(">>> STARTED " + testName);
-
-    // Put the script content in a temp file
-    File scriptFile = File.createTempFile(testName, "temp");
-    scriptFile.deleteOnExit();
-    PrintStream os = new PrintStream(new FileOutputStream(scriptFile));
-    os.print(scriptText);
-    os.close();
-
-    argList.add("-f");
-    argList.add(scriptFile.getAbsolutePath());
-
-    String output = testCommandLineScript(argList);
-    boolean matches = output.contains(expectedPattern);
-    if (shouldMatch != matches) {
-      //failed
-      fail(testName + ": Output" + output + " should" +  (shouldMatch ? "" : " not") +
-          " contain " + expectedPattern);
-    }
-    scriptFile.delete();
-  }
-
-  /**
-   * Attempt to execute a simple script file with the -f option to BeeLine
-   * Test for presence of an expected pattern
-   * in the output (stdout or stderr), fail if not found
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testPositiveScriptFile() throws Throwable {
-    final String TEST_NAME = "testPositiveScriptFile";
-    final String SCRIPT_TEXT = "show databases;\n";
-    final String EXPECTED_PATTERN = " default ";
-    List<String> argList = getBaseArgs(JDBC_URL);
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
-  }
-
-  /**
-   * Test Beeline -hivevar option. User can specify --hivevar name=value on Beeline command line.
-   * In the script, user should be able to use it in the form of ${name}, which will be substituted with
-   * the value.
-   * @throws Throwable
-   */
-  @Test
-  public void testBeelineCommandLineHiveVariable() throws Throwable {
-    List<String> argList = getBaseArgs(JDBC_URL);
-    argList.add("--hivevar");
-    argList.add("DUMMY_TBL=dummy");
-    final String TEST_NAME = "testHiveCommandLineHiveVariable";
-    final String SCRIPT_TEXT = "create table ${DUMMY_TBL} (d int);\nshow tables;\n";
-    final String EXPECTED_PATTERN = "dummy";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
-  }
-
-  /**
-   * Attempt to execute a simple script file with the -f option to BeeLine
-   * The first command should fail and the second command should not execute
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testBreakOnErrorScriptFile() throws Throwable {
-    List<String> argList = getBaseArgs(JDBC_URL);
-    final String TEST_NAME = "testBreakOnErrorScriptFile";
-    final String SCRIPT_TEXT = "select * from abcdefg01;\nshow databases;\n";
-    final String EXPECTED_PATTERN = " default ";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, false, argList);
-  }
-
-
-  /**
-   * Select null from table , check how null is printed
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testNullDefault() throws Throwable {
-    final String TEST_NAME = "testNullDefault";
-    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
-        "select null from " + tableName + " limit 1 ;\n";
-    final String EXPECTED_PATTERN = "NULL";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, getBaseArgs(JDBC_URL));
-  }
-
-  /**
-   * Select null from table , check if default null is printed differently
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testNullNonEmpty() throws Throwable {
-    final String TEST_NAME = "testNullNonDefault";
-    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
-        "!set nullemptystring false\n select null from " + tableName + " limit 1 ;\n";
-    final String EXPECTED_PATTERN = "NULL";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, getBaseArgs(JDBC_URL));
-  }
-
-  /**
-   * Select null from table , check if setting null to empty string works.
-   * Original beeline/sqlline used to print nulls as empty strings
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testNullEmpty() throws Throwable {
-    final String TEST_NAME = "testNullNonDefault";
-    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
-                "!set nullemptystring true\n select 'abc',null,'def' from " + tableName + " limit 1 ;\n";
-    final String EXPECTED_PATTERN = "'abc','','def'";
-
-    List<String> argList = getBaseArgs(JDBC_URL);
-    argList.add("--outputformat=csv");
-
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
-  }
-
-  /**
-   * Select null from table , check if setting null to empty string works - Using beeling cmd line
-   *  argument.
-   * Original beeline/sqlline used to print nulls as empty strings
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testNullEmptyCmdArg() throws Throwable {
-    final String TEST_NAME = "testNullNonDefault";
-    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
-                "select 'abc',null,'def' from " + tableName + " limit 1 ;\n";
-    //final String EXPECTED_PATTERN = "| abc  |      | def  |";
-    final String EXPECTED_PATTERN = "'abc','','def'";
-
-    List<String> argList = getBaseArgs(JDBC_URL);
-    argList.add("--nullemptystring=true");
-    argList.add("--outputformat=csv");
-
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
-  }
-
-  /**
-   * Attempt to execute a missing script file with the -f option to BeeLine
-   * Print PASSED or FAILED
-   */
-  @Test
-  public void testNegativeScriptFile() throws Throwable {
-    final String TEST_NAME = "testNegativeScriptFile";
-    final String EXPECTED_PATTERN = " default ";
-
-    long startTime = System.currentTimeMillis();
-    System.out.println(">>> STARTED " + TEST_NAME);
-
-    // Create and delete a temp file
-    File scriptFile = File.createTempFile("beelinenegative", "temp");
-    scriptFile.delete();
-
-    List<String> argList = getBaseArgs(JDBC_URL);
-    argList.add("-f");
-    argList.add(scriptFile.getAbsolutePath());
-
-    try {
-        String output = testCommandLineScript(argList);
-      long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
-      String time = "(" + elapsedTime + "s)";
-      if (output.contains(EXPECTED_PATTERN)) {
-        System.err.println("Output: " + output);
-        System.err.println(">>> FAILED " + TEST_NAME + " (ERROR) " + time);
-        fail(TEST_NAME);
-      } else {
-        System.out.println(">>> PASSED " + TEST_NAME + " " + time);
-      }
-    } catch (Throwable e) {
-      e.printStackTrace();
-      throw e;
-    }
-  }
-
-  /**
-   * HIVE-4566
-   * @throws UnsupportedEncodingException
-   */
-  @Test
-  public void testNPE() throws UnsupportedEncodingException {
-    BeeLine beeLine = new BeeLine();
-
-    ByteArrayOutputStream os = new ByteArrayOutputStream();
-    PrintStream beelineOutputStream = new PrintStream(os);
-    beeLine.setOutputStream(beelineOutputStream);
-    beeLine.setErrorStream(beelineOutputStream);
-
-    beeLine.runCommands( new String[] {"!typeinfo"} );
-    String output = os.toString("UTF8");
-    Assert.assertFalse( output.contains("java.lang.NullPointerException") );
-    Assert.assertTrue( output.contains("No current connection") );
-
-    beeLine.runCommands( new String[] {"!nativesql"} );
-    output = os.toString("UTF8");
-    Assert.assertFalse( output.contains("java.lang.NullPointerException") );
-    Assert.assertTrue( output.contains("No current connection") );
-
-    System.out.println(">>> PASSED " + "testNPE" );
-  }
-
-  @Test
-  public void testHiveVarSubstitution() throws Throwable {
-    List<String> argList = getBaseArgs(JDBC_URL + "#D_TBL=dummy_t");
-    final String TEST_NAME = "testHiveVarSubstitution";
-    final String SCRIPT_TEXT = "create table ${D_TBL} (d int);\nshow tables;\n";
-    final String EXPECTED_PATTERN = "dummy_t";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
-  }
-
-  @Test
-  public void testEmbeddedBeelineConnection() throws Throwable{
-    String embeddedJdbcURL = BeeLine.BEELINE_DEFAULT_JDBC_URL+"/Default";
-    List<String> argList = getBaseArgs(embeddedJdbcURL);
-	argList.add("--hivevar");
-    argList.add("DUMMY_TBL=embedded_table");
-    final String TEST_NAME = "testEmbeddedBeelineConnection";
-    final String SCRIPT_TEXT = "create table ${DUMMY_TBL} (d int);\nshow tables;\n";
-    final String EXPECTED_PATTERN = "embedded_table";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
-  }
-}

commit c390c2d7d1b90b1d62699cd13244e009afed6088
Author: Prasad Suresh Mujumdar <prasadm@apache.org>
Date:   Thu Dec 19 06:38:42 2013 +0000

    HIVE-6036: A test case for embedded beeline - with URL jdbc:hive2:///default (Anandha L Ranganathan via Prasad Mujumdar)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1552242 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
index 819a28d..b077eb5 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
@@ -372,4 +372,15 @@ public void testHiveVarSubstitution() throws Throwable {
     testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
   }
 
+  @Test
+  public void testEmbeddedBeelineConnection() throws Throwable{
+    String embeddedJdbcURL = BeeLine.BEELINE_DEFAULT_JDBC_URL+"/Default";
+    List<String> argList = getBaseArgs(embeddedJdbcURL);
+	argList.add("--hivevar");
+    argList.add("DUMMY_TBL=embedded_table");
+    final String TEST_NAME = "testEmbeddedBeelineConnection";
+    final String SCRIPT_TEXT = "create table ${DUMMY_TBL} (d int);\nshow tables;\n";
+    final String EXPECTED_PATTERN = "embedded_table";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
+  }
 }

commit 082fca0e644ea3c141836903ce4a18917286dafb
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Wed Dec 11 16:29:44 2013 +0000

    HIVE-5897 : Fix hadoop2 execution environment Milestone 2 (Vikram Dixit via Brock Noland)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1550184 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index fea2f8d..7449430 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -118,7 +118,7 @@
           <groupId>org.apache.hadoop</groupId>
           <artifactId>hadoop-core</artifactId>
           <version>${hadoop-20S.version}</version>
-         <optional>true</optional>
+          <optional>true</optional>
         </dependency>
       </dependencies>
     </profile>
@@ -131,6 +131,13 @@
           <version>${hadoop-23.version}</version>
           <optional>true</optional>
         </dependency>
+        <!-- test inter-project -->
+        <dependency>
+          <groupId>org.apache.hadoop</groupId>
+          <artifactId>hadoop-mapreduce-client-core</artifactId>
+          <version>${hadoop-23.version}</version>
+          <scope>test</scope>
+        </dependency>
       </dependencies>
     </profile>
   </profiles>

commit c9f1683dbd04af607bcba6d975f2897846f1ab8a
Author: Brock Noland <brock@apache.org>
Date:   Fri Dec 6 16:52:42 2013 +0000

    HIVE-5641 - BeeLineOpts ignores Throwable (Brock Noland reviewed by Prasad and Thejas)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1548597 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index c3abba3..04802bc 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -138,7 +138,8 @@ public File saveDir() {
   public int complete(String buf, int pos, List cand) {
     try {
       return new SimpleCompletor(propertyNames()).complete(buf, pos, cand);
-    } catch (Throwable t) {
+    } catch (Exception e) {
+      beeLine.handleException(e);
       return -1;
     }
   }

commit 76fa89e395f877a7ca8618a9f0d777f50da00d11
Author: Brock Noland <brock@apache.org>
Date:   Thu Nov 28 18:32:24 2013 +0000

    HIVE-5755 - Fix hadoop2 execution environment Milestone 1 (Vikram Dixit K via Brock Noland)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1546440 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index fb56f49..fea2f8d 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -113,9 +113,6 @@
   <profiles>
     <profile>
       <id>hadoop-1</id>
-      <activation>
-        <activeByDefault>true</activeByDefault>
-      </activation>
       <dependencies>
         <dependency>
           <groupId>org.apache.hadoop</groupId>

commit 7c3a9dbd095bb54058750a7c2c5d12f299691beb
Author: Thejas Madhavan Nair <thejas@apache.org>
Date:   Wed Nov 27 21:28:31 2013 +0000

    HIVE-4485 : beeline prints null as empty strings (Thejas Nair reviewed by Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1546199 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index bc2f4d8..c5e36a5 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -224,6 +224,8 @@
           null),
       new ReflectiveCommandHandler(this, new String[] {"call"},
           null),
+      new ReflectiveCommandHandler(this, new String[] {"nullemptystring"},
+          new Completor[] {new BooleanCompletor()}),
   };
 
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 0884b16..c3abba3 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -52,6 +52,7 @@
   public static final String PROPERTY_PREFIX = "beeline.";
   public static final String PROPERTY_NAME_EXIT =
       PROPERTY_PREFIX + "system.exit";
+  public static final String DEFAULT_NULL_STRING = "NULL";
 
   private final BeeLine beeLine;
   private boolean autosave = false;
@@ -78,6 +79,9 @@
   private boolean trimScripts = true;
   private boolean allowMultiLineCommand = true;
 
+  //This can be set for old behavior of nulls printed as empty strings
+  private boolean nullEmptyString = false;
+
   private final File rcFile = new File(saveDir(), "beeline.properties");
   private String historyFile = new File(saveDir(), "history").getAbsolutePath();
 
@@ -443,5 +447,22 @@ public void setAllowMultiLineCommand(boolean allowMultiLineCommand) {
     this.allowMultiLineCommand = allowMultiLineCommand;
   }
 
+  /**
+   * Use getNullString() to get the null string to be used.
+   * @return true if null representation should be an empty string
+   */
+  public boolean getNullEmptyString() {
+    return nullEmptyString;
+  }
+
+  public void setNullEmptyString(boolean nullStringEmpty) {
+    this.nullEmptyString = nullStringEmpty;
+  }
+
+  public String getNullString(){
+    return nullEmptyString ? "" : DEFAULT_NULL_STRING;
+  }
+
+
 }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BooleanCompletor.java b/beeline/src/java/org/apache/hive/beeline/BooleanCompletor.java
new file mode 100644
index 0000000..3e88c53
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BooleanCompletor.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.hive.beeline;
+
+import java.util.List;
+
+import jline.Completor;
+import jline.SimpleCompletor;
+
+/**
+ * JLine completor boolean value (true/false)
+ */
+class BooleanCompletor extends SimpleCompletor {
+
+  public BooleanCompletor(){
+    super(new String[] {"true", "false"});
+  }
+
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/BufferedRows.java b/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
index fc8e62b..962c531 100644
--- a/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
+++ b/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
@@ -54,6 +54,11 @@ public Object next() {
   }
 
   @Override
+  public String toString(){
+    return list.toString();
+  }
+
+  @Override
   void normalizeWidths() {
     int[] max = null;
     for (Row row : list) {
diff --git a/beeline/src/java/org/apache/hive/beeline/Rows.java b/beeline/src/java/org/apache/hive/beeline/Rows.java
index a66e709..453f685 100644
--- a/beeline/src/java/org/apache/hive/beeline/Rows.java
+++ b/beeline/src/java/org/apache/hive/beeline/Rows.java
@@ -27,19 +27,23 @@
 import java.sql.SQLException;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
+import java.util.Arrays;
 import java.util.Iterator;
 
 /**
  * Abstract base class representing a set of rows to be displayed.
+ * Holds column values as strings
  */
 abstract class Rows implements Iterator {
   private final BeeLine beeLine;
   final ResultSetMetaData rsMeta;
   final Boolean[] primaryKeys;
   final NumberFormat numberFormat;
+  private final String nullStr;
 
   Rows(BeeLine beeLine, ResultSet rs) throws SQLException {
     this.beeLine = beeLine;
+    nullStr = beeLine.getOpts().getNullString();
     rsMeta = rs.getMetaData();
     int count = rsMeta.getColumnCount();
     primaryKeys = new Boolean[count];
@@ -125,6 +129,10 @@ boolean isPrimaryKey(int col) {
       inserted = false;
     }
 
+    @Override
+    public String toString(){
+      return Arrays.asList(values).toString();
+    }
 
     Row(int size, ResultSet rs) throws SQLException {
       isMeta = false;
@@ -157,7 +165,8 @@ boolean isPrimaryKey(int col) {
         } else {
           values[i] = rs.getString(i + 1);
         }
-        sizes[i] = values[i] == null ? 1 : values[i].length();
+        values[i] = values[i] == null ? nullStr : values[i];
+        sizes[i] = values[i].length();
       }
     }
   }
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 9947007..408286d 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -67,6 +67,7 @@ help-tables: List all the tables in the database
 help-columns: List all the columns for the specified table
 help-properties: Connect to the database specified in the properties file(s)
 help-outputformat: Set the output format for displaying results (table,vertical,csv,tsv,xmlattrs,xmlelements)
+help-nullemptystring: Set to true to get historic behavior of printing null as empty string. Default is false.
 
 jline-missing: The JLine jar was not found. Please ensure it is installed.
 
@@ -163,6 +164,7 @@ cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  --autosave=[true/false]         automatically save preferences\n \
 \  --outputformat=[table/vertical/csv/tsv]   format mode for result display\n \
 \  --isolation=LEVEL               set the transaction isolation level\n \
+\  --nullemptystring=[true/false]  set to true to get historic behavior of printing null as empty string\n \
 \  --help                          display this message
 
 
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
index e3c6a72..819a28d 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
@@ -23,9 +23,14 @@
 import java.io.FileOutputStream;
 import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hive.beeline.BeeLine;
 import org.apache.hive.service.server.HiveServer2;
@@ -34,6 +39,8 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 /**
  * TestBeeLineWithArgs - executes tests of the command-line arguments to BeeLine
  *
@@ -42,6 +49,9 @@
 public class TestBeeLineWithArgs {
   // Default location of HiveServer2
   final private static String JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
+  private static final String tableName = "TestBeelineTable1";
+  private static final String tableComment = "Test table comment";
+
 
   private static HiveServer2 hiveServer2;
 
@@ -67,6 +77,45 @@ public static void preTests() throws Exception {
     System.err.println("Starting HiveServer2...");
     hiveServer2.start();
     Thread.sleep(1000);
+    createTable();
+
+  }
+
+  /**
+   * Create table for use by tests
+   * @throws ClassNotFoundException
+   * @throws SQLException
+   */
+  private static void createTable() throws ClassNotFoundException, SQLException {
+    Class.forName(BeeLine.BEELINE_DEFAULT_JDBC_DRIVER);
+    Connection con = DriverManager.getConnection(JDBC_URL,"", "");
+
+    assertNotNull("Connection is null", con);
+    assertFalse("Connection should not be closed", con.isClosed());
+    Statement stmt = con.createStatement();
+    assertNotNull("Statement is null", stmt);
+
+    stmt.execute("set hive.support.concurrency = false");
+
+    HiveConf conf = new HiveConf();
+    String dataFileDir = conf.get("test.data.files").replace('\\', '/')
+        .replace("c:", "");
+    Path dataFilePath = new Path(dataFileDir, "kv1.txt");
+    // drop table. ignore error.
+    try {
+      stmt.execute("drop table " + tableName);
+    } catch (Exception ex) {
+      fail(ex.toString());
+    }
+
+    // create table
+    stmt.execute("create table " + tableName
+        + " (under_col int comment 'the under column', value string) comment '"
+        + tableComment + "'");
+
+    // load data
+    stmt.execute("load data local inpath '"
+        + dataFilePath.toString() + "' into table " + tableName);
   }
 
   /**
@@ -129,39 +178,12 @@ private void testScriptFile(String testName, String scriptText, String expectedP
     argList.add("-f");
     argList.add(scriptFile.getAbsolutePath());
 
-    if(shouldMatch) {
-      try {
-        String output = testCommandLineScript(argList);
-        long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
-        String time = "(" + elapsedTime + "s)";
-        if (output.contains(expectedPattern)) {
-          System.out.println(">>> PASSED " + testName + " " + time);
-        } else {
-          System.err.println("Output: " + output);
-          System.err.println(">>> FAILED " + testName + " (ERROR) " + time);
-          Assert.fail(testName);
-        }
-      } catch (Throwable e) {
-        e.printStackTrace();
-        throw e;
-      }
-    } else {
-      try {
-        String output = testCommandLineScript(argList);
-        long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
-        String time = "(" + elapsedTime + "s)";
-        if (output.contains(expectedPattern)) {
-          System.err.println("Output: " + output);
-          System.err.println(">>> FAILED " + testName + " (ERROR) " + time);
-          Assert.fail(testName);
-        } else {
-          System.out.println(">>> PASSED " + testName + " " + time);
-        }
-      } catch (Throwable e) {
-        System.err.println("Exception: " + e.toString());
-        e.printStackTrace();
-        throw e;
-      }
+    String output = testCommandLineScript(argList);
+    boolean matches = output.contains(expectedPattern);
+    if (shouldMatch != matches) {
+      //failed
+      fail(testName + ": Output" + output + " should" +  (shouldMatch ? "" : " not") +
+          " contain " + expectedPattern);
     }
     scriptFile.delete();
   }
@@ -212,6 +234,72 @@ public void testBreakOnErrorScriptFile() throws Throwable {
     testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, false, argList);
   }
 
+
+  /**
+   * Select null from table , check how null is printed
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testNullDefault() throws Throwable {
+    final String TEST_NAME = "testNullDefault";
+    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
+        "select null from " + tableName + " limit 1 ;\n";
+    final String EXPECTED_PATTERN = "NULL";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, getBaseArgs(JDBC_URL));
+  }
+
+  /**
+   * Select null from table , check if default null is printed differently
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testNullNonEmpty() throws Throwable {
+    final String TEST_NAME = "testNullNonDefault";
+    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
+        "!set nullemptystring false\n select null from " + tableName + " limit 1 ;\n";
+    final String EXPECTED_PATTERN = "NULL";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, getBaseArgs(JDBC_URL));
+  }
+
+  /**
+   * Select null from table , check if setting null to empty string works.
+   * Original beeline/sqlline used to print nulls as empty strings
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testNullEmpty() throws Throwable {
+    final String TEST_NAME = "testNullNonDefault";
+    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
+                "!set nullemptystring true\n select 'abc',null,'def' from " + tableName + " limit 1 ;\n";
+    final String EXPECTED_PATTERN = "'abc','','def'";
+
+    List<String> argList = getBaseArgs(JDBC_URL);
+    argList.add("--outputformat=csv");
+
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
+  }
+
+  /**
+   * Select null from table , check if setting null to empty string works - Using beeling cmd line
+   *  argument.
+   * Original beeline/sqlline used to print nulls as empty strings
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testNullEmptyCmdArg() throws Throwable {
+    final String TEST_NAME = "testNullNonDefault";
+    final String SCRIPT_TEXT = "set hive.support.concurrency = false;\n" +
+                "select 'abc',null,'def' from " + tableName + " limit 1 ;\n";
+    //final String EXPECTED_PATTERN = "| abc  |      | def  |";
+    final String EXPECTED_PATTERN = "'abc','','def'";
+
+    List<String> argList = getBaseArgs(JDBC_URL);
+    argList.add("--nullemptystring=true");
+    argList.add("--outputformat=csv");
+
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
+  }
+
   /**
    * Attempt to execute a missing script file with the -f option to BeeLine
    * Print PASSED or FAILED
@@ -239,7 +327,7 @@ public void testNegativeScriptFile() throws Throwable {
       if (output.contains(EXPECTED_PATTERN)) {
         System.err.println("Output: " + output);
         System.err.println(">>> FAILED " + TEST_NAME + " (ERROR) " + time);
-        Assert.fail(TEST_NAME);
+        fail(TEST_NAME);
       } else {
         System.out.println(">>> PASSED " + TEST_NAME + " " + time);
       }

commit b79fa46937d7740f45086213f91d481227f551e4
Author: Brock Noland <brock@apache.org>
Date:   Mon Nov 18 16:16:42 2013 +0000

    HIVE-5741: Fix binary packaging build eg include hcatalog, resolve pom issues (Brock Noland reviewed by Xuefu Zhang)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1543065 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index 6c59229..fb56f49 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -32,6 +32,7 @@
   </properties>
 
   <dependencies>
+    <!-- dependencies are always listed in sorted order by groupId, artifectId -->
     <!-- intra-project -->
     <dependency>
       <groupId>org.apache.hive</groupId>

commit 36c6fde0c9110ad68c214e07f4fcf9173d8823cb
Author: Brock Noland <brock@apache.org>
Date:   Thu Nov 7 16:08:55 2013 +0000

    HIVE-5711 - Fix eclipse:eclipse maven goal (Carl Steinbach via Brock Noland)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1539698 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index 7efb8d4..6c59229 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -47,7 +47,6 @@
       <groupId>org.apache.hive</groupId>
       <artifactId>hive-shims</artifactId>
       <version>${project.version}</version>
-      <classifier>uberjar</classifier>
       <scope>runtime</scope>
     </dependency>
     <!-- inter-project -->

commit a5c8353837114a61715c6b5aa84d257f46e21453
Author: Brock Noland <brock@apache.org>
Date:   Thu Nov 7 16:04:58 2013 +0000

    HIVE-5713 - Verify versions of libraries post maven merge (Brock Noland reviewed by Gunther Hagleitner)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1539695 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
index 48a6edd..7efb8d4 100644
--- a/beeline/pom.xml
+++ b/beeline/pom.xml
@@ -52,6 +52,11 @@
     </dependency>
     <!-- inter-project -->
     <dependency>
+      <groupId>commons-cli</groupId>
+      <artifactId>commons-cli</artifactId>
+      <version>${commons-cli.version}</version>
+    </dependency>
+    <dependency>
       <groupId>commons-lang</groupId>
       <artifactId>commons-lang</artifactId>
       <version>${commons-lang.version}</version>

commit ed26e66996182a2d3f6632e51bd0c464eb978d47
Author: Brock Noland <brock@apache.org>
Date:   Thu Nov 7 16:03:17 2013 +0000

    HIVE-5765 - Beeline throws NPE when -e option is used (Szehon Ho via Brock Noland)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1539694 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 91ee3b3..d2d7fd3 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -674,7 +674,10 @@ private boolean execute(String line, boolean call) {
 
     // use multiple lines for statements not terminated by ";"
     try {
-      while (!(line.trim().endsWith(";")) && beeLine.getOpts().isAllowMultiLineCommand()) {
+      //When using -e, console reader is not initialized and command is a single line
+      while (beeLine.getConsoleReader() != null && !(line.trim().endsWith(";"))
+        && beeLine.getOpts().isAllowMultiLineCommand()) {
+
         StringBuilder prompt = new StringBuilder(beeLine.getPrompt());
         for (int i = 0; i < prompt.length() - 1; i++) {
           if (prompt.charAt(i) != '>') {
@@ -691,6 +694,7 @@ private boolean execute(String line, boolean call) {
       beeLine.handleException(e);
     }
 
+
     if (line.endsWith(";")) {
       line = line.substring(0, line.length() - 1);
     }

commit 169706955954067398ff85a77ca305e777b09c3a
Author: Brock Noland <brock@apache.org>
Date:   Tue Nov 5 20:04:56 2013 +0000

    HIVE-5730: Beeline throws non-terminal NPE upon starting, after mavenization (Szehon Ho reviewed by Navis)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1539117 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java b/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
index 916c7fc..844b9ae 100644
--- a/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
+++ b/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
@@ -45,7 +45,7 @@ public SQLCompletor(BeeLine beeLine, boolean skipmeta)
     // add the default SQL completions
     String keywords = new BufferedReader(new InputStreamReader(
         SQLCompletor.class.getResourceAsStream(
-            "sql-keywords.properties"))).readLine();
+            "/sql-keywords.properties"))).readLine();
 
     // now add the keywords from the current connection
     try {

commit ef635affd151464dc2dcaa14296cc07ad0c5b0aa
Author: Brock Noland <brock@apache.org>
Date:   Thu Oct 31 18:52:58 2013 +0000

    HIVE-5610 - Merge maven branch into trunk (delete ant)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1537585 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/build.xml b/beeline/build.xml
deleted file mode 100644
index d583915..0000000
--- a/beeline/build.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0"?>
-
-<!--
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
--->
-
-
-<!-- 
-Before you can run these subtargets directly, you need 
-to call at top-level: ant deploy-contrib compile-core-test
--->
-<project name="beeline" default="jar">
-
-  <property name="src.dir"  location="${basedir}/src/java"/>
-  <import file="../build-common.xml"/>
-
-  <target name="compile" depends="init, setup, ivy-retrieve">
-    <echo message="Project: ${ant.project.name}"/>
-    <javac
-     encoding="${build.encoding}"
-     srcdir="${src.dir}"
-     includes="**/*.java"
-     destdir="${build.classes}"
-     debug="${javac.debug}"
-     deprecation="${javac.deprecation}"
-     includeantruntime="false">
-      <compilerarg line="${javac.args} ${javac.args.warnings}" />
-      <classpath refid="classpath"/>
-    </javac>
-    <copy todir="${build.classes}" failonerror="false">
-      <fileset dir="${src.dir}">
-        <include name="**/*.properties"/>
-      </fileset>
-    </copy>
-  </target>
-
-</project>
diff --git a/beeline/ivy.xml b/beeline/ivy.xml
deleted file mode 100644
index cdded26..0000000
--- a/beeline/ivy.xml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
--->
-<ivy-module version="2.0">
-  <info organisation="${hive.ivy.org}" module="hive-beeline" revision="${version}">
-    <license name="The Apache Software License, Version 2.0" url="http://www.apache.org/licenses/LICENSE-2.0.txt" />
-    <description homepage="http://hive.apache.org">
-      The Apache Hive (TM) data warehouse software facilitates querying and managing large datasets residing in distributed storage.
-      https://cwiki.apache.org/confluence/display/Hive/Home
-    </description>
-  </info>
-  <configurations>
-    <include file="${ivy.conf.dir}/common-configurations.xml"/>
-  </configurations>
-  <dependencies>
-    <!-- Runtime Dependencies -->
-
-    <dependency org="commons-cli" name="commons-cli" rev="${commons-cli.version}"/>
-    <dependency org="commons-io" name="commons-io" rev="${commons-io.version}" />
-    <dependency org="commons-lang" name="commons-lang" rev="${commons-lang.version}"/>
-    <dependency org="commons-logging" name="commons-logging" rev="${commons-logging.version}"
-                transitive="false"/>
-    <dependency org="commons-logging" name="commons-logging-api" rev="${commons-logging-api.version}"
-                transitive="false"/>
-    <dependency org="jline" name="jline" rev="${jline.version}"
-                transitive="false"/>
-    <dependency org="org.apache.thrift" name="libthrift" rev="${libthrift.version}"
-                transitive="false"/>
-
-    <dependency org="org.apache.hive" name="hive-service" rev="${version}"
-                conf="compile->default" />
-    <dependency org="org.apache.hive" name="hive-shims" rev="${version}"
-                conf="runtime" transitive="false"/>
-    
-    <!-- Test Dependencies -->
-    <dependency org="junit" name="junit"
-                rev="${junit.version}" conf="test->default" />
-    <dependency org="org.mockito" name="mockito-all"
-                rev="${mockito-all.version}" conf="test->default" />
-  </dependencies>
-</ivy-module>

commit 9e429196a6f1476377faa7e54eb8650579121054
Author: Brock Noland <brock@apache.org>
Date:   Thu Oct 31 18:41:45 2013 +0000

    HIVE-5610 - Merge maven branch into trunk (maven rollforward)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1537581 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
deleted file mode 100644
index 9947007..0000000
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
+++ /dev/null
@@ -1,168 +0,0 @@
-app-introduction: {0} version {1} by {2}
-
-jline-version: The version of the required {0} library is too old. Version \
-				"{1}" was found, but "{2}" is required.
-
-enter-for-more: [ Hit "enter" for more ("q" to exit) ]
-no-manual: Could not find manual resource.
-executing-command:	Executing command: {0}
-unknown-command: Unknown command: {0}
-autocommit-needs-off: Operation requires that autocommit be turned off.
-no-current-connection: No current connection
-connection-is-closed: Connection is closed
-reconnecting: Reconnecting to "{0}"...
-connecting: Connecting to "{0}"...
-no-driver: No known driver to handle "{0}"
-setting-prop: Setting property: {0}
-saving-options: Saving preferences to: {0}
-loaded-options: Loaded preferences from: {0}
-
-jdbc-level: JDBC level
-compliant: Compliant
-jdbc-version: Version
-driver-class: Driver Class
-
-help-quit: Exits the program
-help-dropall: Drop all tables in the current database
-help-connect: Open a new connection to the database.
-help-manual: Display the BeeLine manual
-help-typeinfo: Display the type map for the current connection
-help-describe: Describe a table
-help-reconnect: Reconnect to the database
-help-metadata: Obtain metadata information
-help-dbinfo: Give metadata information about the database
-help-rehash: Fetch table and column names for command completion
-help-verbose: Set verbose mode on
-help-run: Run a script from the specified file
-help-list: List the current connections
-help-all: Execute the specified SQL against all the current connections
-help-go: Select the current connection
-help-script: Start saving a script to a file
-help-brief: Set verbose mode off
-help-close: Close the current connection to the database
-help-closeall: Close all current open connections
-help-isolation: Set the transaction isolation for this connection
-help-nativesql: Show the native SQL for the specified statement
-help-call: Execute a callable statement
-help-autocommit: Set autocommit mode on or off
-help-commit: Commit the current transaction (if autocommit is off)
-help-rollback: Roll back the current transaction (if autocommit is off)
-help-batch: Start or execute a batch of statements
-help-help: Print a summary of command usage
-help-set: Set a beeline variable
-help-save: Save the current variabes and aliases
-help-native: Show the database''s native SQL for a command
-help-alias: Create a new command alias
-help-unalias: Unset a command alias
-help-scan: Scan for installed JDBC drivers
-help-sql: Execute a SQL command
-help-history: Display the command history
-help-record: Record all output to the specified file
-help-indexes: List all the indexes for the specified table
-help-primarykeys: List all the primary keys for the specified table
-help-exportedkeys: List all the exported keys for the specified table
-help-importedkeys: List all the imported keys for the specified table
-help-procedures: List all the procedures
-help-tables: List all the tables in the database
-help-columns: List all the columns for the specified table
-help-properties: Connect to the database specified in the properties file(s)
-help-outputformat: Set the output format for displaying results (table,vertical,csv,tsv,xmlattrs,xmlelements)
-
-jline-missing: The JLine jar was not found. Please ensure it is installed.
-
-batch-start: Batching SQL statements. Run "batch" again to execute the batch.
-running-batch: Running batched SQL statements...
-
-arg-usage: Usage: {0} <{1}>
-
-scanning: Scanning {0}...
-no-such-method: No such method "{0}"
-possible-methods: Possible methods:
-
-closing: Closing: {0}
-already-closed: Connection is already closed.
-error-setting: Error setting configuration: {0}: {1}
-no-method: No method matching "{0}" was found in {1}.
-
-
-connected: Connected to: {0} (version {1})
-driver: Driver: {0} (version {1})
-autocommit-status: Autocommit status: {0}
-isolation-status: Transaction isolation: {0}
-unknown-format: Unknown output format "{0}". Possible values: {1}
-
-closed: closed
-open: open
-
-executing-con: Executing SQL against: {0}
-comments: Comments, bug reports, and patches go to {0}
-building-tables: Building list of tables and columns for tab-completion \
-	(set fastconnect to true to skip)...
-done: Done
-state: state
-code: code
-
-invalid-connections: Invalid connection: {0}
-
-script-closed: Script closed. Enter "run {0}" to replay it.
-script-already-running: Script ({0}) is already running. Enter "script" with no arguments to stop it.
-script-started: Saving command script to "{0}". Enter "script" with no arguments to stop it.
-
-
-record-closed: Recording stopped.
-record-already-running: Output already being saved to ({0}). Enter "record" with no arguments to stop it.
-record-started: Saving all output to "{0}". Enter "record" with no arguments to stop it.
-
-autoloading-known-drivers: No known driver to handle "{0}". Searching for known drivers...
-
-Warning: Warning: {0} (state={1},code={2,number,#})
-Error: Error: {0} (state={1},code={2,number,#})
-
-commit-complete: Commit complete
-rollback-complete: Rollback complete
-
-abort-on-error: Aborting command set because "force" is false and \
-				 command failed: "{0}"
-
-multiple-matches: Ambiguous command: {0}
-
-really-drop-all: Really drop every table in the database? (y/n)\
-abort-drop-all: Aborting drop all tables.
-
-drivers-found-count: 0#No driver classes found|1#{0} driver class found|1<{0} driver classes found
-rows-selected: 0#No rows selected|1#{0} row selected|1<{0} rows selected
-rows-affected: 0#No rows affected|1#{0} row affected|1<{0} rows affected|0>Unknown rows affected
-active-connections: 0#No active connections|1#{0} active connection:|1<{0} active connections:
-
-time-ms: ({0,number,#.###} seconds)
-
-cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
-\  -u <database url>               the JDBC URL to connect to\n \
-\  -n <username>                   the username to connect as\n \
-\  -p <password>                   the password to connect as\n \
-\  -d <driver class>               the driver class to use\n \
-\  -e <query>                      query that should be executed\n \
-\  -f <file>                       script file that should be executed\n \
-\  --hivevar name=value            hive variable name and value\n \
-\                                  This is Hive specific settings in which variables\n \
-\                                  can be set at session level and referenced in Hive\n \
-\                                  commands or queries.\n \
-\  --color=[true/false]            control whether color is used for display\n \
-\  --showHeader=[true/false]       show column names in query results\n \
-\  --headerInterval=ROWS;          the interval between which heades are displayed\n \
-\  --fastConnect=[true/false]      skip building table/column list for tab-completion\n \
-\  --autoCommit=[true/false]       enable/disable automatic transaction commit\n \
-\  --verbose=[true/false]          show verbose error messages and debug info\n \
-\  --showWarnings=[true/false]     display connection warnings\n \
-\  --showNestedErrs=[true/false]   display nested errors\n \
-\  --numberFormat=[pattern]        format numbers using DecimalFormat pattern\n \
-\  --force=[true/false]            continue running script even after errors\n \
-\  --maxWidth=MAXWIDTH             the maximum width of the terminal\n \
-\  --maxColumnWidth=MAXCOLWIDTH    the maximum width to use when displaying columns\n \
-\  --silent=[true/false]           be more silent\n \
-\  --autosave=[true/false]         automatically save preferences\n \
-\  --outputformat=[table/vertical/csv/tsv]   format mode for result display\n \
-\  --isolation=LEVEL               set the transaction isolation level\n \
-\  --help                          display this message
-
-
diff --git a/beeline/src/java/org/apache/hive/beeline/sql-keywords.properties b/beeline/src/java/org/apache/hive/beeline/sql-keywords.properties
deleted file mode 100644
index 0f1eb65..0000000
--- a/beeline/src/java/org/apache/hive/beeline/sql-keywords.properties
+++ /dev/null
@@ -1 +0,0 @@
-ABSOLUTE,ACTION,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,ASC,ASSERTION,AT,AUTHORIZATION,AVG,BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHARACTER,CHAR_LENGTH,CHARACTER_LENGTH,CHECK,CLOSE,CLUSTER,COALESCE,COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,DISTINCT,DOMAIN,DOUBLE,DROP,ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXTERNAL,EXTRACT,FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FOUND,FROM,FULL,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,IDENTITY,IMMEDIATE,IN,INDICATOR,INITIALLY,INNER,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,MATCH,MAX,MIN,MINUTE,MODULE,MONTH,NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NOT,NULL,NULLIF,NUMERIC,OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,OVERWRITE,PAD,PARTIAL,PARTITION,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWS,SCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,SMALLINT,SOME,SPACE,SQL,SQLCODE,SQLERROR,SQLSTATE,SUBSTRING,SUM,SYSTEM_USER,TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,YEAR,ZONE,ADA,C,CATALOG_NAME,CHARACTER_SET_CATALOG,CHARACTER_SET_NAME,CHARACTER_SET_SCHEMA,CLASS_ORIGIN,COBOL,COLLATION_CATALOG,COLLATION_NAME,COLLATION_SCHEMA,COLUMN_NAME,COMMAND_FUNCTION,COMMITTED,CONDITION_NUMBER,CONNECTION_NAME,CONSTRAINT_CATALOG,CONSTRAINT_NAME,CONSTRAINT_SCHEMA,CURSOR_NAME,DATA,DATETIME_INTERVAL_CODE,DATETIME_INTERVAL_PRECISION,DYNAMIC_FUNCTION,FORTRAN,LENGTH,MESSAGE_LENGTH,MESSAGE_OCTET_LENGTH,MESSAGE_TEXT,MORE,MUMPS,NAME,NULLABLE,NUMBER,PASCAL,PLI,REPEATABLE,RETURNED_LENGTH,RETURNED_OCTET_LENGTH,RETURNED_SQLSTATE,ROW_COUNT,SCALE,SCHEMA_NAME,SERIALIZABLE,SERVER_NAME,SUBCLASS_ORIGIN,TABLE_NAME,TYPE,UNCOMMITTED,UNNAMED
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
new file mode 100644
index 0000000..9947007
--- /dev/null
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -0,0 +1,168 @@
+app-introduction: {0} version {1} by {2}
+
+jline-version: The version of the required {0} library is too old. Version \
+				"{1}" was found, but "{2}" is required.
+
+enter-for-more: [ Hit "enter" for more ("q" to exit) ]
+no-manual: Could not find manual resource.
+executing-command:	Executing command: {0}
+unknown-command: Unknown command: {0}
+autocommit-needs-off: Operation requires that autocommit be turned off.
+no-current-connection: No current connection
+connection-is-closed: Connection is closed
+reconnecting: Reconnecting to "{0}"...
+connecting: Connecting to "{0}"...
+no-driver: No known driver to handle "{0}"
+setting-prop: Setting property: {0}
+saving-options: Saving preferences to: {0}
+loaded-options: Loaded preferences from: {0}
+
+jdbc-level: JDBC level
+compliant: Compliant
+jdbc-version: Version
+driver-class: Driver Class
+
+help-quit: Exits the program
+help-dropall: Drop all tables in the current database
+help-connect: Open a new connection to the database.
+help-manual: Display the BeeLine manual
+help-typeinfo: Display the type map for the current connection
+help-describe: Describe a table
+help-reconnect: Reconnect to the database
+help-metadata: Obtain metadata information
+help-dbinfo: Give metadata information about the database
+help-rehash: Fetch table and column names for command completion
+help-verbose: Set verbose mode on
+help-run: Run a script from the specified file
+help-list: List the current connections
+help-all: Execute the specified SQL against all the current connections
+help-go: Select the current connection
+help-script: Start saving a script to a file
+help-brief: Set verbose mode off
+help-close: Close the current connection to the database
+help-closeall: Close all current open connections
+help-isolation: Set the transaction isolation for this connection
+help-nativesql: Show the native SQL for the specified statement
+help-call: Execute a callable statement
+help-autocommit: Set autocommit mode on or off
+help-commit: Commit the current transaction (if autocommit is off)
+help-rollback: Roll back the current transaction (if autocommit is off)
+help-batch: Start or execute a batch of statements
+help-help: Print a summary of command usage
+help-set: Set a beeline variable
+help-save: Save the current variabes and aliases
+help-native: Show the database''s native SQL for a command
+help-alias: Create a new command alias
+help-unalias: Unset a command alias
+help-scan: Scan for installed JDBC drivers
+help-sql: Execute a SQL command
+help-history: Display the command history
+help-record: Record all output to the specified file
+help-indexes: List all the indexes for the specified table
+help-primarykeys: List all the primary keys for the specified table
+help-exportedkeys: List all the exported keys for the specified table
+help-importedkeys: List all the imported keys for the specified table
+help-procedures: List all the procedures
+help-tables: List all the tables in the database
+help-columns: List all the columns for the specified table
+help-properties: Connect to the database specified in the properties file(s)
+help-outputformat: Set the output format for displaying results (table,vertical,csv,tsv,xmlattrs,xmlelements)
+
+jline-missing: The JLine jar was not found. Please ensure it is installed.
+
+batch-start: Batching SQL statements. Run "batch" again to execute the batch.
+running-batch: Running batched SQL statements...
+
+arg-usage: Usage: {0} <{1}>
+
+scanning: Scanning {0}...
+no-such-method: No such method "{0}"
+possible-methods: Possible methods:
+
+closing: Closing: {0}
+already-closed: Connection is already closed.
+error-setting: Error setting configuration: {0}: {1}
+no-method: No method matching "{0}" was found in {1}.
+
+
+connected: Connected to: {0} (version {1})
+driver: Driver: {0} (version {1})
+autocommit-status: Autocommit status: {0}
+isolation-status: Transaction isolation: {0}
+unknown-format: Unknown output format "{0}". Possible values: {1}
+
+closed: closed
+open: open
+
+executing-con: Executing SQL against: {0}
+comments: Comments, bug reports, and patches go to {0}
+building-tables: Building list of tables and columns for tab-completion \
+	(set fastconnect to true to skip)...
+done: Done
+state: state
+code: code
+
+invalid-connections: Invalid connection: {0}
+
+script-closed: Script closed. Enter "run {0}" to replay it.
+script-already-running: Script ({0}) is already running. Enter "script" with no arguments to stop it.
+script-started: Saving command script to "{0}". Enter "script" with no arguments to stop it.
+
+
+record-closed: Recording stopped.
+record-already-running: Output already being saved to ({0}). Enter "record" with no arguments to stop it.
+record-started: Saving all output to "{0}". Enter "record" with no arguments to stop it.
+
+autoloading-known-drivers: No known driver to handle "{0}". Searching for known drivers...
+
+Warning: Warning: {0} (state={1},code={2,number,#})
+Error: Error: {0} (state={1},code={2,number,#})
+
+commit-complete: Commit complete
+rollback-complete: Rollback complete
+
+abort-on-error: Aborting command set because "force" is false and \
+				 command failed: "{0}"
+
+multiple-matches: Ambiguous command: {0}
+
+really-drop-all: Really drop every table in the database? (y/n)\
+abort-drop-all: Aborting drop all tables.
+
+drivers-found-count: 0#No driver classes found|1#{0} driver class found|1<{0} driver classes found
+rows-selected: 0#No rows selected|1#{0} row selected|1<{0} rows selected
+rows-affected: 0#No rows affected|1#{0} row affected|1<{0} rows affected|0>Unknown rows affected
+active-connections: 0#No active connections|1#{0} active connection:|1<{0} active connections:
+
+time-ms: ({0,number,#.###} seconds)
+
+cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
+\  -u <database url>               the JDBC URL to connect to\n \
+\  -n <username>                   the username to connect as\n \
+\  -p <password>                   the password to connect as\n \
+\  -d <driver class>               the driver class to use\n \
+\  -e <query>                      query that should be executed\n \
+\  -f <file>                       script file that should be executed\n \
+\  --hivevar name=value            hive variable name and value\n \
+\                                  This is Hive specific settings in which variables\n \
+\                                  can be set at session level and referenced in Hive\n \
+\                                  commands or queries.\n \
+\  --color=[true/false]            control whether color is used for display\n \
+\  --showHeader=[true/false]       show column names in query results\n \
+\  --headerInterval=ROWS;          the interval between which heades are displayed\n \
+\  --fastConnect=[true/false]      skip building table/column list for tab-completion\n \
+\  --autoCommit=[true/false]       enable/disable automatic transaction commit\n \
+\  --verbose=[true/false]          show verbose error messages and debug info\n \
+\  --showWarnings=[true/false]     display connection warnings\n \
+\  --showNestedErrs=[true/false]   display nested errors\n \
+\  --numberFormat=[pattern]        format numbers using DecimalFormat pattern\n \
+\  --force=[true/false]            continue running script even after errors\n \
+\  --maxWidth=MAXWIDTH             the maximum width of the terminal\n \
+\  --maxColumnWidth=MAXCOLWIDTH    the maximum width to use when displaying columns\n \
+\  --silent=[true/false]           be more silent\n \
+\  --autosave=[true/false]         automatically save preferences\n \
+\  --outputformat=[table/vertical/csv/tsv]   format mode for result display\n \
+\  --isolation=LEVEL               set the transaction isolation level\n \
+\  --help                          display this message
+
+
diff --git a/beeline/src/main/resources/sql-keywords.properties b/beeline/src/main/resources/sql-keywords.properties
new file mode 100644
index 0000000..0f1eb65
--- /dev/null
+++ b/beeline/src/main/resources/sql-keywords.properties
@@ -0,0 +1 @@
+ABSOLUTE,ACTION,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,ASC,ASSERTION,AT,AUTHORIZATION,AVG,BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHARACTER,CHAR_LENGTH,CHARACTER_LENGTH,CHECK,CLOSE,CLUSTER,COALESCE,COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,DISTINCT,DOMAIN,DOUBLE,DROP,ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXTERNAL,EXTRACT,FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FOUND,FROM,FULL,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,IDENTITY,IMMEDIATE,IN,INDICATOR,INITIALLY,INNER,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,MATCH,MAX,MIN,MINUTE,MODULE,MONTH,NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NOT,NULL,NULLIF,NUMERIC,OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,OVERWRITE,PAD,PARTIAL,PARTITION,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWS,SCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,SMALLINT,SOME,SPACE,SQL,SQLCODE,SQLERROR,SQLSTATE,SUBSTRING,SUM,SYSTEM_USER,TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,YEAR,ZONE,ADA,C,CATALOG_NAME,CHARACTER_SET_CATALOG,CHARACTER_SET_NAME,CHARACTER_SET_SCHEMA,CLASS_ORIGIN,COBOL,COLLATION_CATALOG,COLLATION_NAME,COLLATION_SCHEMA,COLUMN_NAME,COMMAND_FUNCTION,COMMITTED,CONDITION_NUMBER,CONNECTION_NAME,CONSTRAINT_CATALOG,CONSTRAINT_NAME,CONSTRAINT_SCHEMA,CURSOR_NAME,DATA,DATETIME_INTERVAL_CODE,DATETIME_INTERVAL_PRECISION,DYNAMIC_FUNCTION,FORTRAN,LENGTH,MESSAGE_LENGTH,MESSAGE_OCTET_LENGTH,MESSAGE_TEXT,MORE,MUMPS,NAME,NULLABLE,NUMBER,PASCAL,PLI,REPEATABLE,RETURNED_LENGTH,RETURNED_OCTET_LENGTH,RETURNED_SQLSTATE,ROW_COUNT,SCALE,SCHEMA_NAME,SERIALIZABLE,SERVER_NAME,SUBCLASS_ORIGIN,TABLE_NAME,TYPE,UNCOMMITTED,UNNAMED
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
deleted file mode 100644
index 71c7756..0000000
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
+++ /dev/null
@@ -1,383 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hive.beeline;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.util.Random;
-
-import junit.framework.TestCase;
-
-import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.hadoop.hive.conf.HiveConf;
-import org.apache.hadoop.hive.metastore.HiveMetaException;
-import org.apache.hadoop.hive.metastore.MetaStoreSchemaInfo;
-import org.apache.hive.beeline.HiveSchemaHelper;
-import org.apache.hive.beeline.HiveSchemaHelper.NestedScriptParser;
-import org.apache.hive.beeline.HiveSchemaTool;
-
-public class TestSchemaTool extends TestCase {
-  private HiveSchemaTool schemaTool;
-  private HiveConf hiveConf;
-  private String testMetastoreDB;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    testMetastoreDB = System.getProperty("java.io.tmpdir") +
-        File.separator + "test_metastore-" + new Random().nextInt();
-    System.setProperty(HiveConf.ConfVars.METASTORECONNECTURLKEY.varname,
-        "jdbc:derby:" + testMetastoreDB + ";create=true");
-    hiveConf = new HiveConf(this.getClass());
-    schemaTool = new HiveSchemaTool(System.getProperty("test.tmp.dir"), hiveConf, "derby");
-    System.setProperty("beeLine.system.exit", "true");
-  }
-
-  @Override
-  protected void tearDown() throws Exception {
-    File metaStoreDir = new File(testMetastoreDB);
-    if (metaStoreDir.exists()) {
-      FileUtils.deleteDirectory(metaStoreDir);
-    }
-  }
-
-  /**
-   * Test dryrun of schema initialization
-   * @throws Exception
-   */
-  public void testSchemaInitDryRun() throws Exception {
-    schemaTool.setDryRun(true);
-    schemaTool.doInit("0.7.0");
-    schemaTool.setDryRun(false);
-    try {
-      schemaTool.verifySchemaVersion();
-    } catch (HiveMetaException e) {
-      // The connection should fail since it the dry run
-      return;
-    }
-    fail("Dry run shouldn't create actual metastore");
-  }
-
-  /**
-   * Test dryrun of schema upgrade
-   * @throws Exception
-   */
-  public void testSchemaUpgradeDryRun() throws Exception {
-    schemaTool.doInit("0.7.0");
-
-    schemaTool.setDryRun(true);
-    schemaTool.doUpgrade("0.7.0");
-    schemaTool.setDryRun(false);
-    try {
-      schemaTool.verifySchemaVersion();
-    } catch (HiveMetaException e) {
-      // The connection should fail since it the dry run
-      return;
-    }
-    fail("Dry run shouldn't upgrade metastore schema");
-  }
-
-  /**
-   * Test schema initialization
-   * @throws Exception
-   */
-  public void testSchemaInit() throws Exception {
-    schemaTool.doInit(MetaStoreSchemaInfo.getHiveSchemaVersion());
-    schemaTool.verifySchemaVersion();
-    }
-
-  /**
-   * Test schema upgrade
-   * @throws Exception
-   */
-  public void testSchemaUpgrade() throws Exception {
-    boolean foundException = false;
-    // Initialize 0.7.0 schema
-    schemaTool.doInit("0.7.0");
-    // verify that driver fails due to older version schema
-    try {
-      schemaTool.verifySchemaVersion();
-    } catch (HiveMetaException e) {
-      // Expected to fail due to old schema
-      foundException = true;
-    }
-    if (!foundException) {
-      throw new Exception("Hive operations shouldn't pass with older version schema");
-    }
-
-    // upgrade schema from 0.7.0 to latest
-    schemaTool.doUpgrade("0.7.0");
-    // verify that driver works fine with latest schema
-    schemaTool.verifySchemaVersion();
-  }
-
-  /**
-   * Test script formatting
-   * @throws Exception
-   */
-  public void testScripts() throws Exception {
-    String testScript[] = {
-        "-- this is a comment",
-      "DROP TABLE IF EXISTS fooTab;",
-      "/*!1234 this is comment code like mysql */;",
-      "CREATE TABLE fooTab(id INTEGER);",
-      "DROP TABLE footab;",
-      "-- ending comment"
-    };
-    String resultScript[] = {
-      "DROP TABLE IF EXISTS fooTab",
-      "/*!1234 this is comment code like mysql */",
-      "CREATE TABLE fooTab(id INTEGER)",
-      "DROP TABLE footab",
-    };
-    String expectedSQL = StringUtils.join(resultScript, System.getProperty("line.separator")) +
-        System.getProperty("line.separator");
-    File testScriptFile = generateTestScript(testScript);
-    String flattenedSql = HiveSchemaTool.buildCommand(
-        HiveSchemaHelper.getDbCommandParser("derby"),
-        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
-
-    assertEquals(expectedSQL, flattenedSql);
-  }
-
-  /**
-   * Test nested script formatting
-   * @throws Exception
-   */
-  public void testNestedScriptsForDerby() throws Exception {
-    String childTab1 = "childTab1";
-    String childTab2 = "childTab2";
-    String parentTab = "fooTab";
-
-    String childTestScript1[] = {
-      "-- this is a comment ",
-      "DROP TABLE IF EXISTS " + childTab1 + ";",
-      "CREATE TABLE " + childTab1 + "(id INTEGER);",
-      "DROP TABLE " + childTab1 + ";"
-    };
-    String childTestScript2[] = {
-        "-- this is a comment",
-        "DROP TABLE IF EXISTS " + childTab2 + ";",
-        "CREATE TABLE " + childTab2 + "(id INTEGER);",
-        "-- this is also a comment",
-        "DROP TABLE " + childTab2 + ";"
-    };
-
-    String parentTestScript[] = {
-        " -- this is a comment",
-        "DROP TABLE IF EXISTS " + parentTab + ";",
-        " -- this is another comment ",
-        "CREATE TABLE " + parentTab + "(id INTEGER);",
-        "RUN '" + generateTestScript(childTestScript1).getName() + "';",
-        "DROP TABLE " + parentTab + ";",
-        "RUN '" + generateTestScript(childTestScript2).getName() + "';",
-        "--ending comment ",
-      };
-
-    File testScriptFile = generateTestScript(parentTestScript);
-    String flattenedSql = HiveSchemaTool.buildCommand(
-        HiveSchemaHelper.getDbCommandParser("derby"),
-        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
-    assertFalse(flattenedSql.contains("RUN"));
-    assertFalse(flattenedSql.contains("comment"));
-    assertTrue(flattenedSql.contains(childTab1));
-    assertTrue(flattenedSql.contains(childTab2));
-    assertTrue(flattenedSql.contains(parentTab));
-  }
-
-  /**
-   * Test nested script formatting
-   * @throws Exception
-   */
-  public void testNestedScriptsForMySQL() throws Exception {
-    String childTab1 = "childTab1";
-    String childTab2 = "childTab2";
-    String parentTab = "fooTab";
-
-    String childTestScript1[] = {
-      "/* this is a comment code */",
-      "DROP TABLE IF EXISTS " + childTab1 + ";",
-      "CREATE TABLE " + childTab1 + "(id INTEGER);",
-      "DROP TABLE " + childTab1 + ";"
-    };
-    String childTestScript2[] = {
-        "/* this is a special exec code */;",
-        "DROP TABLE IF EXISTS " + childTab2 + ";",
-        "CREATE TABLE " + childTab2 + "(id INTEGER);",
-        "-- this is a comment",
-        "DROP TABLE " + childTab2 + ";"
-    };
-
-    String parentTestScript[] = {
-        " -- this is a comment",
-        "DROP TABLE IF EXISTS " + parentTab + ";",
-        " /* this is special exec code */;",
-        "CREATE TABLE " + parentTab + "(id INTEGER);",
-        "SOURCE " + generateTestScript(childTestScript1).getName() + ";",
-        "DROP TABLE " + parentTab + ";",
-        "SOURCE " + generateTestScript(childTestScript2).getName() + ";",
-        "--ending comment ",
-      };
-
-    File testScriptFile = generateTestScript(parentTestScript);
-    String flattenedSql = HiveSchemaTool.buildCommand(
-        HiveSchemaHelper.getDbCommandParser("mysql"),
-        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
-    assertFalse(flattenedSql.contains("RUN"));
-    assertFalse(flattenedSql.contains("comment"));
-    assertTrue(flattenedSql.contains(childTab1));
-    assertTrue(flattenedSql.contains(childTab2));
-    assertTrue(flattenedSql.contains(parentTab));
-  }
-
-  /**
-   * Test script formatting
-   * @throws Exception
-   */
-  public void testScriptWithDelimiter() throws Exception {
-    String testScript[] = {
-        "-- this is a comment",
-      "DROP TABLE IF EXISTS fooTab;",
-      "DELIMITER $$",
-      "/*!1234 this is comment code like mysql */$$",
-      "CREATE TABLE fooTab(id INTEGER)$$",
-      "CREATE PROCEDURE fooProc()",
-      "SELECT * FROM fooTab;",
-      "CALL barProc();",
-      "END PROCEDURE$$",
-      "DELIMITER ;",
-      "DROP TABLE footab;",
-      "-- ending comment"
-    };
-    String resultScript[] = {
-      "DROP TABLE IF EXISTS fooTab",
-      "/*!1234 this is comment code like mysql */",
-      "CREATE TABLE fooTab(id INTEGER)",
-      "CREATE PROCEDURE fooProc()" + " " +
-      "SELECT * FROM fooTab;" + " " +
-      "CALL barProc();" + " " +
-      "END PROCEDURE",
-      "DROP TABLE footab",
-    };
-    String expectedSQL = StringUtils.join(resultScript, System.getProperty("line.separator")) +
-        System.getProperty("line.separator");
-    File testScriptFile = generateTestScript(testScript);
-    NestedScriptParser testDbParser = HiveSchemaHelper.getDbCommandParser("mysql");
-    String flattenedSql = HiveSchemaTool.buildCommand(testDbParser,
-        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
-
-    assertEquals(expectedSQL, flattenedSql);
-  }
-
-  /**
-   * Test script formatting
-   * @throws Exception
-   */
-  public void testScriptMultiRowComment() throws Exception {
-    String testScript[] = {
-        "-- this is a comment",
-      "DROP TABLE IF EXISTS fooTab;",
-      "DELIMITER $$",
-      "/*!1234 this is comment code like mysql */$$",
-      "CREATE TABLE fooTab(id INTEGER)$$",
-      "DELIMITER ;",
-      "/* multiline comment started ",
-      " * multiline comment continue",
-      " * multiline comment ended */",
-      "DROP TABLE footab;",
-      "-- ending comment"
-    };
-    String parsedScript[] = {
-      "DROP TABLE IF EXISTS fooTab",
-      "/*!1234 this is comment code like mysql */",
-      "CREATE TABLE fooTab(id INTEGER)",
-      "DROP TABLE footab",
-    };
-
-    String expectedSQL = StringUtils.join(parsedScript, System.getProperty("line.separator")) +
-        System.getProperty("line.separator");
-    File testScriptFile = generateTestScript(testScript);
-    NestedScriptParser testDbParser = HiveSchemaHelper.getDbCommandParser("mysql");
-    String flattenedSql = HiveSchemaTool.buildCommand(testDbParser,
-        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
-
-    assertEquals(expectedSQL, flattenedSql);
-  }
-
-  /**
-   * Test nested script formatting
-   * @throws Exception
-   */
-  public void testNestedScriptsForOracle() throws Exception {
-    String childTab1 = "childTab1";
-    String childTab2 = "childTab2";
-    String parentTab = "fooTab";
-
-    String childTestScript1[] = {
-      "-- this is a comment ",
-      "DROP TABLE IF EXISTS " + childTab1 + ";",
-      "CREATE TABLE " + childTab1 + "(id INTEGER);",
-      "DROP TABLE " + childTab1 + ";"
-    };
-    String childTestScript2[] = {
-        "-- this is a comment",
-        "DROP TABLE IF EXISTS " + childTab2 + ";",
-        "CREATE TABLE " + childTab2 + "(id INTEGER);",
-        "-- this is also a comment",
-        "DROP TABLE " + childTab2 + ";"
-    };
-
-    String parentTestScript[] = {
-        " -- this is a comment",
-        "DROP TABLE IF EXISTS " + parentTab + ";",
-        " -- this is another comment ",
-        "CREATE TABLE " + parentTab + "(id INTEGER);",
-        "@" + generateTestScript(childTestScript1).getName() + ";",
-        "DROP TABLE " + parentTab + ";",
-        "@" + generateTestScript(childTestScript2).getName() + ";",
-        "--ending comment ",
-      };
-
-    File testScriptFile = generateTestScript(parentTestScript);
-    String flattenedSql = HiveSchemaTool.buildCommand(
-        HiveSchemaHelper.getDbCommandParser("oracle"),
-        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
-    assertFalse(flattenedSql.contains("@"));
-    assertFalse(flattenedSql.contains("comment"));
-    assertTrue(flattenedSql.contains(childTab1));
-    assertTrue(flattenedSql.contains(childTab2));
-    assertTrue(flattenedSql.contains(parentTab));
-  }
-
-  private File generateTestScript(String [] stmts) throws IOException {
-    File testScriptFile = File.createTempFile("schematest", ".sql");
-    testScriptFile.deleteOnExit();
-    FileWriter fstream = new FileWriter(testScriptFile.getPath());
-    BufferedWriter out = new BufferedWriter(fstream);
-    for (String line: stmts) {
-      out.write(line);
-      out.newLine();
-    }
-    out.close();
-    return testScriptFile;
-  }
-}

commit 4a4f16e95ec4e9f718cb61251fbf01b7c4cbe097
Author: Brock Noland <brock@apache.org>
Date:   Thu Oct 31 18:27:31 2013 +0000

    HIVE-5610 - Merge maven branch into trunk (patch)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1537576 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/pom.xml b/beeline/pom.xml
new file mode 100644
index 0000000..48a6edd
--- /dev/null
+++ b/beeline/pom.xml
@@ -0,0 +1,141 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.apache.hive</groupId>
+    <artifactId>hive</artifactId>
+    <version>0.13.0-SNAPSHOT</version>
+    <relativePath>../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>hive-beeline</artifactId>
+  <packaging>jar</packaging>
+  <name>Hive Beeline</name>
+
+  <properties>
+    <hive.path.to.root>..</hive.path.to.root>
+  </properties>
+
+  <dependencies>
+    <!-- intra-project -->
+    <dependency>
+      <groupId>org.apache.hive</groupId>
+      <artifactId>hive-common</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.hive</groupId>
+      <artifactId>hive-metastore</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.hive</groupId>
+      <artifactId>hive-shims</artifactId>
+      <version>${project.version}</version>
+      <classifier>uberjar</classifier>
+      <scope>runtime</scope>
+    </dependency>
+    <!-- inter-project -->
+    <dependency>
+      <groupId>commons-lang</groupId>
+      <artifactId>commons-lang</artifactId>
+      <version>${commons-lang.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-logging</groupId>
+      <artifactId>commons-logging</artifactId>
+      <version>${commons-logging.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-io</groupId>
+      <artifactId>commons-io</artifactId>
+      <version>${commons-io.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>jline</groupId>
+      <artifactId>jline</artifactId>
+      <version>${jline.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.thrift</groupId>
+      <artifactId>libthrift</artifactId>
+      <version>${libthrift.version}</version>
+    </dependency>
+    <!-- test intra-project -->
+    <dependency>
+      <groupId>org.apache.hive</groupId>
+      <artifactId>hive-jdbc</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.hive</groupId>
+      <artifactId>hive-exec</artifactId>
+      <version>${project.version}</version>
+      <classifier>tests</classifier>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.hive</groupId>
+      <artifactId>hive-service</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+    </dependency>
+    <!-- test inter-project -->
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>${junit.version}</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <profiles>
+    <profile>
+      <id>hadoop-1</id>
+      <activation>
+        <activeByDefault>true</activeByDefault>
+      </activation>
+      <dependencies>
+        <dependency>
+          <groupId>org.apache.hadoop</groupId>
+          <artifactId>hadoop-core</artifactId>
+          <version>${hadoop-20S.version}</version>
+         <optional>true</optional>
+        </dependency>
+      </dependencies>
+    </profile>
+   <profile>
+      <id>hadoop-2</id>
+      <dependencies>
+        <dependency>
+          <groupId>org.apache.hadoop</groupId>
+          <artifactId>hadoop-common</artifactId>
+          <version>${hadoop-23.version}</version>
+          <optional>true</optional>
+        </dependency>
+      </dependencies>
+    </profile>
+  </profiles>
+
+  <build>
+    <sourceDirectory>${basedir}/src/java</sourceDirectory>
+    <testSourceDirectory>${basedir}/src/test</testSourceDirectory>
+  </build>
+
+</project>
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index da9977e..bc2f4d8 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -95,7 +95,7 @@
  */
 public class BeeLine {
   private static final ResourceBundle resourceBundle =
-      ResourceBundle.getBundle(BeeLine.class.getName());
+      ResourceBundle.getBundle(BeeLine.class.getSimpleName());
   private final BeeLineSignalHandler signalHandler = null;
   private static final String separator = System.getProperty("line.separator");
   private boolean exit = false;
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
index 6c386ae..9947007 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
@@ -105,12 +105,12 @@ code: code
 invalid-connections: Invalid connection: {0}
 
 script-closed: Script closed. Enter "run {0}" to replay it.
-script-already-running: Script ({0}) is already running. Enter "script" with no arguments to stop it.  
+script-already-running: Script ({0}) is already running. Enter "script" with no arguments to stop it.
 script-started: Saving command script to "{0}". Enter "script" with no arguments to stop it.
 
 
 record-closed: Recording stopped.
-record-already-running: Output already being saved to ({0}). Enter "record" with no arguments to stop it.  
+record-already-running: Output already being saved to ({0}). Enter "record" with no arguments to stop it.
 record-started: Saving all output to "{0}". Enter "record" with no arguments to stop it.
 
 autoloading-known-drivers: No known driver to handle "{0}". Searching for known drivers...
@@ -126,7 +126,7 @@ abort-on-error: Aborting command set because "force" is false and \
 
 multiple-matches: Ambiguous command: {0}
 
-really-drop-all: Really drop every table in the database? (y/n)\ 
+really-drop-all: Really drop every table in the database? (y/n)\
 abort-drop-all: Aborting drop all tables.
 
 drivers-found-count: 0#No driver classes found|1#{0} driver class found|1<{0} driver classes found
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
index 338dc42..71c7756 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package org.apache.hive.beeline.src.test;
+package org.apache.hive.beeline;
 
 import java.io.BufferedWriter;
 import java.io.File;
@@ -48,7 +48,7 @@ protected void setUp() throws Exception {
     System.setProperty(HiveConf.ConfVars.METASTORECONNECTURLKEY.varname,
         "jdbc:derby:" + testMetastoreDB + ";create=true");
     hiveConf = new HiveConf(this.getClass());
-    schemaTool = new HiveSchemaTool(System.getProperty("hive.home"), hiveConf, "derby");
+    schemaTool = new HiveSchemaTool(System.getProperty("test.tmp.dir"), hiveConf, "derby");
     System.setProperty("beeLine.system.exit", "true");
   }
 

commit bf642284eb144ad232188b84eacf74cb077d5f2f
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Sat Oct 5 16:23:59 2013 +0000

    HIVE-5449 : Hive schematool info option incorrectly reports error for Postgres metastore (Prasad Mujumdar via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1529476 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
index 23e2fc7..5dda36c 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
@@ -73,6 +73,12 @@
      * @return
      */
     public String cleanseCommand(String dbCommand);
+
+    /***
+     * Does the DB required table/column names quoted
+     * @return
+     */
+    public boolean needsQuotedIdentifier();
   }
 
 
@@ -115,6 +121,11 @@ public String cleanseCommand(String dbCommand) {
       }
       return dbCommand;
     }
+
+    @Override
+    public boolean needsQuotedIdentifier() {
+      return false;
+    }
   }
 
 
@@ -215,6 +226,11 @@ public String getScriptName(String dbCommand) throws IllegalArgumentException {
     public boolean isNestedScript(String dbCommand) {
       return dbCommand.startsWith(POSTGRES_NESTING_TOKEN);
     }
+
+    @Override
+    public boolean needsQuotedIdentifier() {
+      return true;
+    }
   }
 
   //Oracle specific parser
diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
index a1f9a6a..1b8e315 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
@@ -116,7 +116,12 @@ public void showInfo() throws HiveMetaException {
   // read schema version from metastore
   private String getMetaStoreSchemaVersion(Connection metastoreConn)
         throws HiveMetaException {
-    String versionQuery = "select t.SCHEMA_VERSION from VERSION t";
+    String versionQuery;
+    if (HiveSchemaHelper.getDbCommandParser(dbType).needsQuotedIdentifier()) {
+      versionQuery = "select t.\"SCHEMA_VERSION\" from \"VERSION\" t";
+    } else {
+      versionQuery = "select t.SCHEMA_VERSION from VERSION t";
+    }
     try {
       Statement stmt = metastoreConn.createStatement();
       ResultSet res = stmt.executeQuery(versionQuery);

commit 1a1057312176326b3ff41a3ba2ee27cbc593eabf
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Wed Oct 2 22:24:32 2013 +0000

    HIVE-5419 : Fix schema tool issues with Oracle metastore (Prasad Mujumdar via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1528655 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
index b0f8b15..23e2fc7 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
@@ -22,7 +22,7 @@
 public class HiveSchemaHelper {
   public static final String DB_DERBY = "derby";
   public static final String DB_MYSQL = "mysql";
-  public static final String DB_POSTGRACE = "postgrace";
+  public static final String DB_POSTGRACE = "postgres";
   public static final String DB_ORACLE = "oracle";
 
   public interface NestedScriptParser {
@@ -225,8 +225,8 @@ public String getScriptName(String dbCommand) throws IllegalArgumentException {
       if (!isNestedScript(dbCommand)) {
         throw new IllegalArgumentException("Not a nested script format " + dbCommand);
       }
-      // remove ending ';'
-      return dbCommand.replace(";", "");
+      // remove ending ';' and starting '@'
+      return dbCommand.replace(";", "").replace(ORACLE_NESTING_TOKEN, "");
     }
 
     @Override
diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
index 318e7ed..a1f9a6a 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
@@ -366,6 +366,7 @@ public void runBeeLine(String sqlScriptFile) throws IOException {
       beeLine.getOpts().setSilent(true);
     }
     beeLine.getOpts().setAllowMultiLineCommand(false);
+    beeLine.getOpts().setIsolation("TRANSACTION_READ_COMMITTED");
     int status = beeLine.begin(argList.toArray(new String[0]), null);
     if (status != 0) {
       throw new IOException("Schema script failed, errorcode " + status);
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
index 09d96d7..338dc42 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
@@ -30,6 +30,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.metastore.HiveMetaException;
+import org.apache.hadoop.hive.metastore.MetaStoreSchemaInfo;
 import org.apache.hive.beeline.HiveSchemaHelper;
 import org.apache.hive.beeline.HiveSchemaHelper.NestedScriptParser;
 import org.apache.hive.beeline.HiveSchemaTool;
@@ -100,7 +101,8 @@ public void testSchemaUpgradeDryRun() throws Exception {
    * @throws Exception
    */
   public void testSchemaInit() throws Exception {
-    schemaTool.doInit("0.12.0");
+    schemaTool.doInit(MetaStoreSchemaInfo.getHiveSchemaVersion());
+    schemaTool.verifySchemaVersion();
     }
 
   /**
@@ -321,6 +323,51 @@ public void testScriptMultiRowComment() throws Exception {
     assertEquals(expectedSQL, flattenedSql);
   }
 
+  /**
+   * Test nested script formatting
+   * @throws Exception
+   */
+  public void testNestedScriptsForOracle() throws Exception {
+    String childTab1 = "childTab1";
+    String childTab2 = "childTab2";
+    String parentTab = "fooTab";
+
+    String childTestScript1[] = {
+      "-- this is a comment ",
+      "DROP TABLE IF EXISTS " + childTab1 + ";",
+      "CREATE TABLE " + childTab1 + "(id INTEGER);",
+      "DROP TABLE " + childTab1 + ";"
+    };
+    String childTestScript2[] = {
+        "-- this is a comment",
+        "DROP TABLE IF EXISTS " + childTab2 + ";",
+        "CREATE TABLE " + childTab2 + "(id INTEGER);",
+        "-- this is also a comment",
+        "DROP TABLE " + childTab2 + ";"
+    };
+
+    String parentTestScript[] = {
+        " -- this is a comment",
+        "DROP TABLE IF EXISTS " + parentTab + ";",
+        " -- this is another comment ",
+        "CREATE TABLE " + parentTab + "(id INTEGER);",
+        "@" + generateTestScript(childTestScript1).getName() + ";",
+        "DROP TABLE " + parentTab + ";",
+        "@" + generateTestScript(childTestScript2).getName() + ";",
+        "--ending comment ",
+      };
+
+    File testScriptFile = generateTestScript(parentTestScript);
+    String flattenedSql = HiveSchemaTool.buildCommand(
+        HiveSchemaHelper.getDbCommandParser("oracle"),
+        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
+    assertFalse(flattenedSql.contains("@"));
+    assertFalse(flattenedSql.contains("comment"));
+    assertTrue(flattenedSql.contains(childTab1));
+    assertTrue(flattenedSql.contains(childTab2));
+    assertTrue(flattenedSql.contains(parentTab));
+  }
+
   private File generateTestScript(String [] stmts) throws IOException {
     File testScriptFile = File.createTempFile("schematest", ".sql");
     testScriptFile.deleteOnExit();

commit 60cae20e7f7d8326617bbb6f1fbf57b2c8afd878
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Thu Sep 26 17:01:41 2013 +0000

    HIVE-5082 : Beeline usage is printed twice when beeline --help is executed (Xuefu Zhang via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1526604 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index df05fd2..da9977e 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -502,7 +502,7 @@ boolean initArgs(String[] args) {
 
     for (int i = 0; i < args.length; i++) {
       if (args[i].equals("--help") || args[i].equals("-h")) {
-        usage();
+        // Return false here, so usage will be printed.
         return false;
       }
 

commit f8f2216aaf248c2a720d00d46bef1b3d60a6d838
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Wed Sep 25 07:57:14 2013 +0000

    HIVE-5301 : Add a schema tool for offline metastore schema upgrade (Prasad Mujumdar via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1526122 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 2802f4c..df05fd2 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -665,7 +665,7 @@ public void close() {
   public ConsoleReader getConsoleReader(InputStream inputStream) throws IOException {
     if (inputStream != null) {
       // ### NOTE: fix for sf.net bug 879425.
-      consoleReader = new ConsoleReader(inputStream, new PrintWriter(System.out, true));
+      consoleReader = new ConsoleReader(inputStream, new PrintWriter(getOutputStream(), true));
     } else {
       consoleReader = new ConsoleReader();
     }
@@ -802,6 +802,11 @@ boolean needsContinuation(String line) {
     if (trimmed.length() == 0) {
       return false;
     }
+
+    if (!getOpts().isAllowMultiLineCommand()) {
+      return false;
+    }
+
     return !trimmed.endsWith(";");
   }
 
@@ -1626,7 +1631,7 @@ void setCompletions() throws SQLException, IOException {
     }
   }
 
-  BeeLineOpts getOpts() {
+  public BeeLineOpts getOpts() {
     return opts;
   }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index c9e24fa..0884b16 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -76,6 +76,7 @@
   private String isolation = DEFAULT_ISOLATION_LEVEL;
   private String outputFormat = "table";
   private boolean trimScripts = true;
+  private boolean allowMultiLineCommand = true;
 
   private final File rcFile = new File(saveDir(), "beeline.properties");
   private String historyFile = new File(saveDir(), "history").getAbsolutePath();
@@ -434,4 +435,13 @@ public void setHiveVariables(Map<String, String> hiveVariables) {
     this.hiveVariables = hiveVariables;
   }
 
+  public boolean isAllowMultiLineCommand() {
+    return allowMultiLineCommand;
+  }
+
+  public void setAllowMultiLineCommand(boolean allowMultiLineCommand) {
+    this.allowMultiLineCommand = allowMultiLineCommand;
+  }
+
 }
+
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index c574cd4..91ee3b3 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -674,7 +674,7 @@ private boolean execute(String line, boolean call) {
 
     // use multiple lines for statements not terminated by ";"
     try {
-      while (!(line.trim().endsWith(";"))) {
+      while (!(line.trim().endsWith(";")) && beeLine.getOpts().isAllowMultiLineCommand()) {
         StringBuilder prompt = new StringBuilder(beeLine.getPrompt());
         for (int i = 0; i < prompt.length() - 1; i++) {
           if (prompt.charAt(i) != '>') {
diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
new file mode 100644
index 0000000..b0f8b15
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaHelper.java
@@ -0,0 +1,251 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hive.beeline;
+
+import java.util.IllegalFormatException;
+
+public class HiveSchemaHelper {
+  public static final String DB_DERBY = "derby";
+  public static final String DB_MYSQL = "mysql";
+  public static final String DB_POSTGRACE = "postgrace";
+  public static final String DB_ORACLE = "oracle";
+
+  public interface NestedScriptParser {
+
+    public enum CommandType {
+      PARTIAL_STATEMENT,
+      TERMINATED_STATEMENT,
+      COMMENT
+    }
+
+    static final String DEFAUTL_DELIMITER = ";";
+    /***
+     * Find the type of given command
+     * @param dbCommand
+     * @return
+     */
+    public boolean isPartialCommand(String dbCommand) throws IllegalArgumentException;
+
+    /** Parse the DB specific nesting format and extract the inner script name if any
+     * @param dbCommand command from parent script
+     * @return
+     * @throws IllegalFormatException
+     */
+    public String getScriptName(String dbCommand) throws IllegalArgumentException;
+
+    /***
+     * Find if the given command is a nested script execution
+     * @param dbCommand
+     * @return
+     */
+    public boolean isNestedScript(String dbCommand);
+
+    /***
+     * Find if the given command is should be passed to DB
+     * @param dbCommand
+     * @return
+     */
+    public boolean isNonExecCommand(String dbCommand);
+
+    /***
+     * Get the SQL statement delimiter
+     * @return
+     */
+    public String getDelimiter();
+
+    /***
+     * Clear any client specific tags
+     * @return
+     */
+    public String cleanseCommand(String dbCommand);
+  }
+
+
+  /***
+   * Base implemenation of NestedScriptParser
+   * abstractCommandParser.
+   *
+   */
+  private static abstract class AbstractCommandParser implements NestedScriptParser {
+
+    @Override
+    public boolean isPartialCommand(String dbCommand) throws IllegalArgumentException{
+      if (dbCommand == null || dbCommand.isEmpty()) {
+        throw new IllegalArgumentException("invalid command line " + dbCommand);
+      }
+      dbCommand = dbCommand.trim();
+      if (dbCommand.endsWith(getDelimiter()) || isNonExecCommand(dbCommand)) {
+        return false;
+      } else {
+        return true;
+      }
+    }
+
+    @Override
+    public boolean isNonExecCommand(String dbCommand) {
+      return (dbCommand.startsWith("--") || dbCommand.startsWith("#"));
+    }
+
+    @Override
+    public String getDelimiter() {
+      return DEFAUTL_DELIMITER;
+    }
+
+    @Override
+    public String cleanseCommand(String dbCommand) {
+      // strip off the delimiter
+      if (dbCommand.endsWith(getDelimiter())) {
+        dbCommand = dbCommand.substring(0,
+            dbCommand.length() - getDelimiter().length());
+      }
+      return dbCommand;
+    }
+  }
+
+
+  // Derby commandline parser
+  public static class DerbyCommandParser extends AbstractCommandParser {
+    private static String DERBY_NESTING_TOKEN = "RUN";
+
+    @Override
+    public String getScriptName(String dbCommand) throws IllegalArgumentException {
+
+      if (!isNestedScript(dbCommand)) {
+        throw new IllegalArgumentException("Not a script format " + dbCommand);
+      }
+      String[] tokens = dbCommand.split(" ");
+      if (tokens.length != 2) {
+        throw new IllegalArgumentException("Couldn't parse line " + dbCommand);
+      }
+      return tokens[1].replace(";", "").replaceAll("'", "");
+    }
+
+    @Override
+    public boolean isNestedScript(String dbCommand) {
+      // Derby script format is RUN '<file>'
+     return dbCommand.startsWith(DERBY_NESTING_TOKEN);
+    }
+  }
+
+
+  // MySQL parser
+  public static class MySqlCommandParser extends AbstractCommandParser {
+    private static final String MYSQL_NESTING_TOKEN = "SOURCE";
+    private static final String DELIMITER_TOKEN = "DELIMITER";
+    private String delimiter = DEFAUTL_DELIMITER;
+
+    @Override
+    public boolean isPartialCommand(String dbCommand) throws IllegalArgumentException{
+      boolean isPartial = super.isPartialCommand(dbCommand);
+      // if this is a delimiter directive, reset our delimiter
+      if (dbCommand.startsWith(DELIMITER_TOKEN)) {
+        String[] tokens = dbCommand.split(" ");
+        if (tokens.length != 2) {
+          throw new IllegalArgumentException("Couldn't parse line " + dbCommand);
+        }
+        delimiter = tokens[1];
+      }
+      return isPartial;
+    }
+
+    @Override
+    public String getScriptName(String dbCommand) throws IllegalArgumentException {
+      String[] tokens = dbCommand.split(" ");
+      if (tokens.length != 2) {
+        throw new IllegalArgumentException("Couldn't parse line " + dbCommand);
+      }
+      // remove ending ';'
+      return tokens[1].replace(";", "");
+    }
+
+    @Override
+    public boolean isNestedScript(String dbCommand) {
+      return dbCommand.startsWith(MYSQL_NESTING_TOKEN);
+    }
+
+    @Override
+    public String getDelimiter() {
+      return delimiter;
+    }
+
+    @Override
+    public boolean isNonExecCommand(String dbCommand) {
+      return super.isNonExecCommand(dbCommand) ||
+          (dbCommand.startsWith("/*") && dbCommand.endsWith("*/")) ||
+          dbCommand.startsWith(DELIMITER_TOKEN);
+    }
+
+    @Override
+    public String cleanseCommand(String dbCommand) {
+      return super.cleanseCommand(dbCommand).replaceAll("/\\*.*?\\*/[^;]", "");
+    }
+
+  }
+
+  // Postgres specific parser
+  public static class PostgresCommandParser extends AbstractCommandParser {
+    private static String POSTGRES_NESTING_TOKEN = "\\i";
+
+    @Override
+    public String getScriptName(String dbCommand) throws IllegalArgumentException {
+      String[] tokens = dbCommand.split(" ");
+      if (tokens.length != 2) {
+        throw new IllegalArgumentException("Couldn't parse line " + dbCommand);
+      }
+      // remove ending ';'
+      return tokens[1].replace(";", "");
+    }
+
+    @Override
+    public boolean isNestedScript(String dbCommand) {
+      return dbCommand.startsWith(POSTGRES_NESTING_TOKEN);
+    }
+  }
+
+  //Oracle specific parser
+  public static class OracleCommandParser extends AbstractCommandParser {
+    private static String ORACLE_NESTING_TOKEN = "@";
+    @Override
+    public String getScriptName(String dbCommand) throws IllegalArgumentException {
+      if (!isNestedScript(dbCommand)) {
+        throw new IllegalArgumentException("Not a nested script format " + dbCommand);
+      }
+      // remove ending ';'
+      return dbCommand.replace(";", "");
+    }
+
+    @Override
+    public boolean isNestedScript(String dbCommand) {
+      return dbCommand.startsWith(ORACLE_NESTING_TOKEN);
+    }
+  }
+
+  public static NestedScriptParser getDbCommandParser(String dbName) {
+    if (dbName.equalsIgnoreCase(DB_DERBY)) {
+      return new DerbyCommandParser();
+    } else if (dbName.equalsIgnoreCase(DB_MYSQL)) {
+      return new MySqlCommandParser();
+    } else if (dbName.equalsIgnoreCase(DB_POSTGRACE)) {
+      return new PostgresCommandParser();
+    } else if (dbName.equalsIgnoreCase(DB_ORACLE)) {
+      return new OracleCommandParser();
+    } else {
+      throw new IllegalArgumentException("Unknown dbType " + dbName);
+    }
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
new file mode 100644
index 0000000..318e7ed
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
@@ -0,0 +1,506 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hive.beeline;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.IllegalFormatException;
+import java.util.List;
+
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.CommandLineParser;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.Option;
+import org.apache.commons.cli.OptionBuilder;
+import org.apache.commons.cli.OptionGroup;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.ParseException;
+import org.apache.commons.io.output.NullOutputStream;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hadoop.hive.metastore.HiveMetaException;
+import org.apache.hadoop.hive.metastore.MetaStoreSchemaInfo;
+import org.apache.hadoop.hive.metastore.api.MetaException;
+import org.apache.hive.beeline.HiveSchemaHelper.NestedScriptParser;
+
+public class HiveSchemaTool {
+  private String userName = null;
+  private String passWord = null;
+  private boolean dryRun = false;
+  private boolean verbose = false;
+  private final HiveConf hiveConf;
+  private final String dbType;
+  private final MetaStoreSchemaInfo metaStoreSchemaInfo;
+
+  public HiveSchemaTool(String dbType) throws HiveMetaException {
+    this(System.getenv("HIVE_HOME"), new HiveConf(HiveSchemaTool.class), dbType);
+  }
+
+  public HiveSchemaTool(String hiveHome, HiveConf hiveConf, String dbType)
+        throws HiveMetaException {
+    if (hiveHome == null || hiveHome.isEmpty()) {
+      throw new HiveMetaException("No Hive home directory provided");
+    }
+    this.hiveConf = hiveConf;
+    this.dbType = dbType;
+    this.metaStoreSchemaInfo = new MetaStoreSchemaInfo(hiveHome, hiveConf, dbType);
+    userName = hiveConf.get(ConfVars.METASTORE_CONNECTION_USER_NAME.varname);
+    passWord = hiveConf.get(HiveConf.ConfVars.METASTOREPWD.varname);
+  }
+
+  public HiveConf getHiveConf() {
+    return hiveConf;
+  }
+
+  public void setUserName(String userName) {
+    this.userName = userName;
+  }
+
+  public void setPassWord(String passWord) {
+    this.passWord = passWord;
+  }
+
+  public void setDryRun(boolean dryRun) {
+    this.dryRun = dryRun;
+  }
+
+  public void setVerbose(boolean verbose) {
+    this.verbose = verbose;
+  }
+
+  private static void printAndExit(Options cmdLineOptions) {
+    HelpFormatter formatter = new HelpFormatter();
+    formatter.printHelp("schemaTool", cmdLineOptions);
+    System.exit(1);
+  }
+
+  /***
+   * Print Hive version and schema version
+   * @throws MetaException
+   */
+  public void showInfo() throws HiveMetaException {
+    Connection metastoreConn = getConnectionToMetastore(true);
+    System.out.println("Hive distribution version:\t " +
+        MetaStoreSchemaInfo.getHiveSchemaVersion());
+    System.out.println("Metastore schema version:\t " +
+        getMetaStoreSchemaVersion(metastoreConn));
+  }
+
+  // read schema version from metastore
+  private String getMetaStoreSchemaVersion(Connection metastoreConn)
+        throws HiveMetaException {
+    String versionQuery = "select t.SCHEMA_VERSION from VERSION t";
+    try {
+      Statement stmt = metastoreConn.createStatement();
+      ResultSet res = stmt.executeQuery(versionQuery);
+      if (!res.next()) {
+        throw new HiveMetaException("Didn't find version data in metastore");
+      }
+      String currentSchemaVersion = res.getString(1);
+      metastoreConn.close();
+      return currentSchemaVersion;
+    } catch (SQLException e) {
+      throw new HiveMetaException("Failed to get schema version.", e);
+    }
+  }
+
+  // test the connection metastore using the config property
+  private void testConnectionToMetastore() throws HiveMetaException {
+    Connection conn = getConnectionToMetastore(true);
+    try {
+      conn.close();
+    } catch (SQLException e) {
+      throw new HiveMetaException("Failed to close metastore connection", e);
+    }
+  }
+
+  /***
+   * get JDBC connection to metastore db
+   *
+   * @param printInfo print connection parameters
+   * @return
+   * @throws MetaException
+   */
+  private Connection getConnectionToMetastore(boolean printInfo)
+        throws HiveMetaException {
+    try {
+      String connectionURL = getValidConfVar(ConfVars.METASTORECONNECTURLKEY);
+      String driver = getValidConfVar(ConfVars.METASTORE_CONNECTION_DRIVER);
+      if (printInfo) {
+        System.out.println("Metastore connection URL:\t " + connectionURL);
+        System.out.println("Metastore Connection Driver :\t " + driver);
+        System.out.println("Metastore connection User:\t " + userName);
+      }
+      if ((userName == null) || userName.isEmpty()) {
+        throw new HiveMetaException("UserName empty ");
+      }
+
+      // load required JDBC driver
+      Class.forName(driver);
+
+      // Connect using the JDBC URL and user/pass from conf
+      return DriverManager.getConnection(connectionURL, userName, passWord);
+    } catch (IOException e) {
+      throw new HiveMetaException("Failed to get schema version.", e);
+    } catch (SQLException e) {
+      throw new HiveMetaException("Failed to get schema version.", e);
+    } catch (ClassNotFoundException e) {
+      throw new HiveMetaException("Failed to load driver", e);
+    }
+  }
+
+  /**
+   * check if the current schema version in metastore matches the Hive version
+   * @throws MetaException
+   */
+  public void verifySchemaVersion() throws HiveMetaException {
+    // don't check version if its a dry run
+    if (dryRun) {
+      return;
+    }
+    String newSchemaVersion =
+        getMetaStoreSchemaVersion(getConnectionToMetastore(false));
+    // verify that the new version is added to schema
+    if (!MetaStoreSchemaInfo.getHiveSchemaVersion().equalsIgnoreCase(newSchemaVersion)) {
+      throw new HiveMetaException("Found unexpected schema version " + newSchemaVersion);
+    }
+  }
+
+  /**
+   * Perform metastore schema upgrade. extract the current schema version from metastore
+   * @throws MetaException
+   */
+  public void doUpgrade() throws HiveMetaException {
+    String fromVersion = getMetaStoreSchemaVersion(getConnectionToMetastore(false));
+    if (fromVersion == null || fromVersion.isEmpty()) {
+      throw new HiveMetaException("Schema version not stored in the metastore. " +
+          "Metastore schema is too old or corrupt. Try specifying the version manually");
+    }
+    doUpgrade(fromVersion);
+  }
+
+  /**
+   * Perform metastore schema upgrade
+   *
+   * @param fromSchemaVer
+   *          Existing version of the metastore. If null, then read from the metastore
+   * @throws MetaException
+   */
+  public void doUpgrade(String fromSchemaVer) throws HiveMetaException {
+    if (MetaStoreSchemaInfo.getHiveSchemaVersion().equals(fromSchemaVer)) {
+      System.out.println("No schema upgrade required from version " + fromSchemaVer);
+      return;
+    }
+    // Find the list of scripts to execute for this upgrade
+    List<String> upgradeScripts =
+        metaStoreSchemaInfo.getUpgradeScripts(fromSchemaVer);
+    testConnectionToMetastore();
+    System.out.println("Starting upgrade metastore schema from version " +
+        fromSchemaVer + " to " + MetaStoreSchemaInfo.getHiveSchemaVersion());
+    String scriptDir = metaStoreSchemaInfo.getMetaStoreScriptDir();
+    try {
+      for (String scriptFile : upgradeScripts) {
+        System.out.println("Upgrade script " + scriptFile);
+        if (!dryRun) {
+          runBeeLine(scriptDir, scriptFile);
+          System.out.println("Completed " + scriptFile);
+        }
+      }
+    } catch (IOException eIO) {
+      throw new HiveMetaException(
+          "Upgrade FAILED! Metastore state would be inconsistent !!", eIO);
+    }
+
+    // Revalidated the new version after upgrade
+    verifySchemaVersion();
+  }
+
+  /**
+   * Initialize the metastore schema to current version
+   *
+   * @throws MetaException
+   */
+  public void doInit() throws HiveMetaException {
+    doInit(MetaStoreSchemaInfo.getHiveSchemaVersion());
+
+    // Revalidated the new version after upgrade
+    verifySchemaVersion();
+  }
+
+  /**
+   * Initialize the metastore schema
+   *
+   * @param toVersion
+   *          If null then current hive version is used
+   * @throws MetaException
+   */
+  public void doInit(String toVersion) throws HiveMetaException {
+    testConnectionToMetastore();
+    System.out.println("Starting metastore schema initialization to " + toVersion);
+
+    String initScriptDir = metaStoreSchemaInfo.getMetaStoreScriptDir();
+    String initScriptFile = metaStoreSchemaInfo.generateInitFileName(toVersion);
+
+    try {
+      System.out.println("Initialization script " + initScriptFile);
+      if (!dryRun) {
+        runBeeLine(initScriptDir, initScriptFile);
+        System.out.println("Initialization script completed");
+      }
+    } catch (IOException e) {
+      throw new HiveMetaException("Schema initialization FAILED!" +
+      		" Metastore state would be inconsistent !!", e);
+    }
+  }
+
+  // Flatten the nested upgrade script into a buffer
+  public static String buildCommand(NestedScriptParser dbCommandParser,
+        String scriptDir, String scriptFile) throws IllegalFormatException, IOException {
+
+    BufferedReader bfReader =
+        new BufferedReader(new FileReader(scriptDir + File.separatorChar + scriptFile));
+    String currLine;
+    StringBuilder sb = new StringBuilder();
+    String currentCommand = null;
+    while ((currLine = bfReader.readLine()) != null) {
+      currLine = currLine.trim();
+      if (currLine.isEmpty()) {
+        continue; // skip empty lines
+      }
+
+      if (currentCommand == null) {
+        currentCommand = currLine;
+      } else {
+        currentCommand = currentCommand + " " + currLine;
+      }
+      if (dbCommandParser.isPartialCommand(currLine)) {
+        // if its a partial line, continue collecting the pieces
+        continue;
+      }
+
+      // if this is a valid executable command then add it to the buffer
+      if (!dbCommandParser.isNonExecCommand(currentCommand)) {
+        currentCommand = dbCommandParser.cleanseCommand(currentCommand);
+
+        if (dbCommandParser.isNestedScript(currentCommand)) {
+          // if this is a nested sql script then flatten it
+          String currScript = dbCommandParser.getScriptName(currentCommand);
+          sb.append(buildCommand(dbCommandParser, scriptDir, currScript));
+        } else {
+          // Now we have a complete statement, process it
+          // write the line to buffer
+          sb.append(currentCommand);
+          sb.append(System.getProperty("line.separator"));
+        }
+      }
+      currentCommand = null;
+    }
+    bfReader.close();
+    return sb.toString();
+  }
+
+  // run beeline on the given metastore scrip, flatten the nested scripts into single file
+  private void runBeeLine(String scriptDir, String scriptFile) throws IOException {
+    NestedScriptParser dbCommandParser =
+        HiveSchemaHelper.getDbCommandParser(dbType);
+    // expand the nested script
+    String sqlCommands = buildCommand(dbCommandParser, scriptDir, scriptFile);
+    File tmpFile = File.createTempFile("schematool", ".sql");
+    tmpFile.deleteOnExit();
+
+    // write out the buffer into a file. Add beeline commands for autocommit and close
+    FileWriter fstream = new FileWriter(tmpFile.getPath());
+    BufferedWriter out = new BufferedWriter(fstream);
+    out.write("!autocommit on" + System.getProperty("line.separator"));
+    out.write(sqlCommands);
+    out.write("!closeall" + System.getProperty("line.separator"));
+    out.close();
+    runBeeLine(tmpFile.getPath());
+  }
+
+  // Generate the beeline args per hive conf and execute the given script
+  public void runBeeLine(String sqlScriptFile) throws IOException {
+    List<String> argList = new ArrayList<String>();
+    argList.add("-u");
+    argList.add(getValidConfVar(ConfVars.METASTORECONNECTURLKEY));
+    argList.add("-d");
+    argList.add(getValidConfVar(ConfVars.METASTORE_CONNECTION_DRIVER));
+    argList.add("-n");
+    argList.add(userName);
+    argList.add("-p");
+    argList.add(passWord);
+    argList.add("-f");
+    argList.add(sqlScriptFile);
+
+    // run the script using Beeline
+    BeeLine beeLine = new BeeLine();
+    if (!verbose) {
+      beeLine.setOutputStream(new PrintStream(new NullOutputStream()));
+      beeLine.getOpts().setSilent(true);
+    }
+    beeLine.getOpts().setAllowMultiLineCommand(false);
+    int status = beeLine.begin(argList.toArray(new String[0]), null);
+    if (status != 0) {
+      throw new IOException("Schema script failed, errorcode " + status);
+    }
+  }
+
+  private String getValidConfVar(ConfVars confVar) throws IOException {
+    String confVarStr = hiveConf.get(confVar.varname);
+    if (confVarStr == null || confVarStr.isEmpty()) {
+      throw new IOException("Empty " + confVar.varname);
+    }
+    return confVarStr;
+  }
+
+  // Create the required command line options
+  @SuppressWarnings("static-access")
+  private static void initOptions(Options cmdLineOptions) {
+    Option help = new Option("help", "print this message");
+    Option upgradeOpt = new Option("upgradeSchema", "Schema upgrade");
+    Option upgradeFromOpt = OptionBuilder.withArgName("upgradeFrom").hasArg().
+                withDescription("Schema upgrade from a version").
+                create("upgradeSchemaFrom");
+    Option initOpt = new Option("initSchema", "Schema initialization");
+    Option initToOpt = OptionBuilder.withArgName("initTo").hasArg().
+                withDescription("Schema initialization to a version").
+                create("initSchemaTo");
+    Option infoOpt = new Option("info", "Show config and schema details");
+
+    OptionGroup optGroup = new OptionGroup();
+    optGroup.addOption(upgradeOpt).addOption(initOpt).
+                addOption(help).addOption(upgradeFromOpt).
+                addOption(initToOpt).addOption(infoOpt);
+    optGroup.setRequired(true);
+
+    Option userNameOpt = OptionBuilder.withArgName("user")
+                .hasArgs()
+                .withDescription("Override config file user name")
+                .create("userName");
+    Option passwdOpt = OptionBuilder.withArgName("password")
+                .hasArgs()
+                 .withDescription("Override config file password")
+                 .create("passWord");
+    Option dbTypeOpt = OptionBuilder.withArgName("databaseType")
+                .hasArgs().withDescription("Metastore database type")
+                .create("dbType");
+    Option dryRunOpt = new Option("dryRun", "list SQL scripts (no execute)");
+    Option verboseOpt = new Option("verbose", "only print SQL statements");
+
+    cmdLineOptions.addOption(help);
+    cmdLineOptions.addOption(dryRunOpt);
+    cmdLineOptions.addOption(userNameOpt);
+    cmdLineOptions.addOption(passwdOpt);
+    cmdLineOptions.addOption(dbTypeOpt);
+    cmdLineOptions.addOption(verboseOpt);
+    cmdLineOptions.addOptionGroup(optGroup);
+  }
+
+  public static void main(String[] args) {
+    CommandLineParser parser = new GnuParser();
+    CommandLine line = null;
+    String dbType = null;
+    String schemaVer = null;
+    Options cmdLineOptions = new Options();
+
+    // Argument handling
+    initOptions(cmdLineOptions);
+    try {
+      line = parser.parse(cmdLineOptions, args);
+    } catch (ParseException e) {
+      System.err.println("HiveSchemaTool:Parsing failed.  Reason: " + e.getLocalizedMessage());
+      printAndExit(cmdLineOptions);
+    }
+
+    if (line.hasOption("help")) {
+      HelpFormatter formatter = new HelpFormatter();
+      formatter.printHelp("schemaTool", cmdLineOptions);
+      return;
+    }
+
+    if (line.hasOption("dbType")) {
+      dbType = line.getOptionValue("dbType");
+      if ((!dbType.equalsIgnoreCase(HiveSchemaHelper.DB_DERBY) &&
+          !dbType.equalsIgnoreCase(HiveSchemaHelper.DB_MYSQL) &&
+          !dbType.equalsIgnoreCase(HiveSchemaHelper.DB_POSTGRACE) && !dbType
+          .equalsIgnoreCase(HiveSchemaHelper.DB_ORACLE))) {
+        System.err.println("Unsupported dbType " + dbType);
+        printAndExit(cmdLineOptions);
+      }
+    } else {
+      System.err.println("no dbType supplied");
+      printAndExit(cmdLineOptions);
+    }
+
+    System.setProperty(HiveConf.ConfVars.METASTORE_SCHEMA_VERIFICATION.varname, "true");
+    try {
+      HiveSchemaTool schemaTool = new HiveSchemaTool(dbType);
+
+      if (line.hasOption("userName")) {
+        schemaTool.setUserName(line.getOptionValue("userName"));
+      }
+      if (line.hasOption("passWord")) {
+        schemaTool.setPassWord(line.getOptionValue("passWord"));
+      }
+      if (line.hasOption("dryRun")) {
+        schemaTool.setDryRun(true);
+      }
+      if (line.hasOption("verbose")) {
+        schemaTool.setVerbose(true);
+      }
+
+      if (line.hasOption("info")) {
+        schemaTool.showInfo();
+      } else if (line.hasOption("upgradeSchema")) {
+        schemaTool.doUpgrade();
+      } else if (line.hasOption("upgradeSchemaFrom")) {
+        schemaVer = line.getOptionValue("upgradeSchemaFrom");
+        schemaTool.doUpgrade(schemaVer);
+      } else if (line.hasOption("initSchema")) {
+        schemaTool.doInit();
+      } else if (line.hasOption("initSchemaTo")) {
+        schemaVer = line.getOptionValue("initSchemaTo");
+        schemaTool.doInit(schemaVer);
+      } else {
+        System.err.println("no valid option supplied");
+        printAndExit(cmdLineOptions);
+      }
+    } catch (HiveMetaException e) {
+      System.err.println(e);
+      if (line.hasOption("verbose")) {
+        e.printStackTrace();
+      }
+      System.err.println("*** schemaTool failed ***");
+      System.exit(1);
+    }
+    System.out.println("schemaTool completeted");
+
+  }
+}
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
new file mode 100644
index 0000000..09d96d7
--- /dev/null
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestSchemaTool.java
@@ -0,0 +1,336 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.beeline.src.test;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Random;
+
+import junit.framework.TestCase;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.metastore.HiveMetaException;
+import org.apache.hive.beeline.HiveSchemaHelper;
+import org.apache.hive.beeline.HiveSchemaHelper.NestedScriptParser;
+import org.apache.hive.beeline.HiveSchemaTool;
+
+public class TestSchemaTool extends TestCase {
+  private HiveSchemaTool schemaTool;
+  private HiveConf hiveConf;
+  private String testMetastoreDB;
+
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
+    testMetastoreDB = System.getProperty("java.io.tmpdir") +
+        File.separator + "test_metastore-" + new Random().nextInt();
+    System.setProperty(HiveConf.ConfVars.METASTORECONNECTURLKEY.varname,
+        "jdbc:derby:" + testMetastoreDB + ";create=true");
+    hiveConf = new HiveConf(this.getClass());
+    schemaTool = new HiveSchemaTool(System.getProperty("hive.home"), hiveConf, "derby");
+    System.setProperty("beeLine.system.exit", "true");
+  }
+
+  @Override
+  protected void tearDown() throws Exception {
+    File metaStoreDir = new File(testMetastoreDB);
+    if (metaStoreDir.exists()) {
+      FileUtils.deleteDirectory(metaStoreDir);
+    }
+  }
+
+  /**
+   * Test dryrun of schema initialization
+   * @throws Exception
+   */
+  public void testSchemaInitDryRun() throws Exception {
+    schemaTool.setDryRun(true);
+    schemaTool.doInit("0.7.0");
+    schemaTool.setDryRun(false);
+    try {
+      schemaTool.verifySchemaVersion();
+    } catch (HiveMetaException e) {
+      // The connection should fail since it the dry run
+      return;
+    }
+    fail("Dry run shouldn't create actual metastore");
+  }
+
+  /**
+   * Test dryrun of schema upgrade
+   * @throws Exception
+   */
+  public void testSchemaUpgradeDryRun() throws Exception {
+    schemaTool.doInit("0.7.0");
+
+    schemaTool.setDryRun(true);
+    schemaTool.doUpgrade("0.7.0");
+    schemaTool.setDryRun(false);
+    try {
+      schemaTool.verifySchemaVersion();
+    } catch (HiveMetaException e) {
+      // The connection should fail since it the dry run
+      return;
+    }
+    fail("Dry run shouldn't upgrade metastore schema");
+  }
+
+  /**
+   * Test schema initialization
+   * @throws Exception
+   */
+  public void testSchemaInit() throws Exception {
+    schemaTool.doInit("0.12.0");
+    }
+
+  /**
+   * Test schema upgrade
+   * @throws Exception
+   */
+  public void testSchemaUpgrade() throws Exception {
+    boolean foundException = false;
+    // Initialize 0.7.0 schema
+    schemaTool.doInit("0.7.0");
+    // verify that driver fails due to older version schema
+    try {
+      schemaTool.verifySchemaVersion();
+    } catch (HiveMetaException e) {
+      // Expected to fail due to old schema
+      foundException = true;
+    }
+    if (!foundException) {
+      throw new Exception("Hive operations shouldn't pass with older version schema");
+    }
+
+    // upgrade schema from 0.7.0 to latest
+    schemaTool.doUpgrade("0.7.0");
+    // verify that driver works fine with latest schema
+    schemaTool.verifySchemaVersion();
+  }
+
+  /**
+   * Test script formatting
+   * @throws Exception
+   */
+  public void testScripts() throws Exception {
+    String testScript[] = {
+        "-- this is a comment",
+      "DROP TABLE IF EXISTS fooTab;",
+      "/*!1234 this is comment code like mysql */;",
+      "CREATE TABLE fooTab(id INTEGER);",
+      "DROP TABLE footab;",
+      "-- ending comment"
+    };
+    String resultScript[] = {
+      "DROP TABLE IF EXISTS fooTab",
+      "/*!1234 this is comment code like mysql */",
+      "CREATE TABLE fooTab(id INTEGER)",
+      "DROP TABLE footab",
+    };
+    String expectedSQL = StringUtils.join(resultScript, System.getProperty("line.separator")) +
+        System.getProperty("line.separator");
+    File testScriptFile = generateTestScript(testScript);
+    String flattenedSql = HiveSchemaTool.buildCommand(
+        HiveSchemaHelper.getDbCommandParser("derby"),
+        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
+
+    assertEquals(expectedSQL, flattenedSql);
+  }
+
+  /**
+   * Test nested script formatting
+   * @throws Exception
+   */
+  public void testNestedScriptsForDerby() throws Exception {
+    String childTab1 = "childTab1";
+    String childTab2 = "childTab2";
+    String parentTab = "fooTab";
+
+    String childTestScript1[] = {
+      "-- this is a comment ",
+      "DROP TABLE IF EXISTS " + childTab1 + ";",
+      "CREATE TABLE " + childTab1 + "(id INTEGER);",
+      "DROP TABLE " + childTab1 + ";"
+    };
+    String childTestScript2[] = {
+        "-- this is a comment",
+        "DROP TABLE IF EXISTS " + childTab2 + ";",
+        "CREATE TABLE " + childTab2 + "(id INTEGER);",
+        "-- this is also a comment",
+        "DROP TABLE " + childTab2 + ";"
+    };
+
+    String parentTestScript[] = {
+        " -- this is a comment",
+        "DROP TABLE IF EXISTS " + parentTab + ";",
+        " -- this is another comment ",
+        "CREATE TABLE " + parentTab + "(id INTEGER);",
+        "RUN '" + generateTestScript(childTestScript1).getName() + "';",
+        "DROP TABLE " + parentTab + ";",
+        "RUN '" + generateTestScript(childTestScript2).getName() + "';",
+        "--ending comment ",
+      };
+
+    File testScriptFile = generateTestScript(parentTestScript);
+    String flattenedSql = HiveSchemaTool.buildCommand(
+        HiveSchemaHelper.getDbCommandParser("derby"),
+        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
+    assertFalse(flattenedSql.contains("RUN"));
+    assertFalse(flattenedSql.contains("comment"));
+    assertTrue(flattenedSql.contains(childTab1));
+    assertTrue(flattenedSql.contains(childTab2));
+    assertTrue(flattenedSql.contains(parentTab));
+  }
+
+  /**
+   * Test nested script formatting
+   * @throws Exception
+   */
+  public void testNestedScriptsForMySQL() throws Exception {
+    String childTab1 = "childTab1";
+    String childTab2 = "childTab2";
+    String parentTab = "fooTab";
+
+    String childTestScript1[] = {
+      "/* this is a comment code */",
+      "DROP TABLE IF EXISTS " + childTab1 + ";",
+      "CREATE TABLE " + childTab1 + "(id INTEGER);",
+      "DROP TABLE " + childTab1 + ";"
+    };
+    String childTestScript2[] = {
+        "/* this is a special exec code */;",
+        "DROP TABLE IF EXISTS " + childTab2 + ";",
+        "CREATE TABLE " + childTab2 + "(id INTEGER);",
+        "-- this is a comment",
+        "DROP TABLE " + childTab2 + ";"
+    };
+
+    String parentTestScript[] = {
+        " -- this is a comment",
+        "DROP TABLE IF EXISTS " + parentTab + ";",
+        " /* this is special exec code */;",
+        "CREATE TABLE " + parentTab + "(id INTEGER);",
+        "SOURCE " + generateTestScript(childTestScript1).getName() + ";",
+        "DROP TABLE " + parentTab + ";",
+        "SOURCE " + generateTestScript(childTestScript2).getName() + ";",
+        "--ending comment ",
+      };
+
+    File testScriptFile = generateTestScript(parentTestScript);
+    String flattenedSql = HiveSchemaTool.buildCommand(
+        HiveSchemaHelper.getDbCommandParser("mysql"),
+        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
+    assertFalse(flattenedSql.contains("RUN"));
+    assertFalse(flattenedSql.contains("comment"));
+    assertTrue(flattenedSql.contains(childTab1));
+    assertTrue(flattenedSql.contains(childTab2));
+    assertTrue(flattenedSql.contains(parentTab));
+  }
+
+  /**
+   * Test script formatting
+   * @throws Exception
+   */
+  public void testScriptWithDelimiter() throws Exception {
+    String testScript[] = {
+        "-- this is a comment",
+      "DROP TABLE IF EXISTS fooTab;",
+      "DELIMITER $$",
+      "/*!1234 this is comment code like mysql */$$",
+      "CREATE TABLE fooTab(id INTEGER)$$",
+      "CREATE PROCEDURE fooProc()",
+      "SELECT * FROM fooTab;",
+      "CALL barProc();",
+      "END PROCEDURE$$",
+      "DELIMITER ;",
+      "DROP TABLE footab;",
+      "-- ending comment"
+    };
+    String resultScript[] = {
+      "DROP TABLE IF EXISTS fooTab",
+      "/*!1234 this is comment code like mysql */",
+      "CREATE TABLE fooTab(id INTEGER)",
+      "CREATE PROCEDURE fooProc()" + " " +
+      "SELECT * FROM fooTab;" + " " +
+      "CALL barProc();" + " " +
+      "END PROCEDURE",
+      "DROP TABLE footab",
+    };
+    String expectedSQL = StringUtils.join(resultScript, System.getProperty("line.separator")) +
+        System.getProperty("line.separator");
+    File testScriptFile = generateTestScript(testScript);
+    NestedScriptParser testDbParser = HiveSchemaHelper.getDbCommandParser("mysql");
+    String flattenedSql = HiveSchemaTool.buildCommand(testDbParser,
+        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
+
+    assertEquals(expectedSQL, flattenedSql);
+  }
+
+  /**
+   * Test script formatting
+   * @throws Exception
+   */
+  public void testScriptMultiRowComment() throws Exception {
+    String testScript[] = {
+        "-- this is a comment",
+      "DROP TABLE IF EXISTS fooTab;",
+      "DELIMITER $$",
+      "/*!1234 this is comment code like mysql */$$",
+      "CREATE TABLE fooTab(id INTEGER)$$",
+      "DELIMITER ;",
+      "/* multiline comment started ",
+      " * multiline comment continue",
+      " * multiline comment ended */",
+      "DROP TABLE footab;",
+      "-- ending comment"
+    };
+    String parsedScript[] = {
+      "DROP TABLE IF EXISTS fooTab",
+      "/*!1234 this is comment code like mysql */",
+      "CREATE TABLE fooTab(id INTEGER)",
+      "DROP TABLE footab",
+    };
+
+    String expectedSQL = StringUtils.join(parsedScript, System.getProperty("line.separator")) +
+        System.getProperty("line.separator");
+    File testScriptFile = generateTestScript(testScript);
+    NestedScriptParser testDbParser = HiveSchemaHelper.getDbCommandParser("mysql");
+    String flattenedSql = HiveSchemaTool.buildCommand(testDbParser,
+        testScriptFile.getParentFile().getPath(), testScriptFile.getName());
+
+    assertEquals(expectedSQL, flattenedSql);
+  }
+
+  private File generateTestScript(String [] stmts) throws IOException {
+    File testScriptFile = File.createTempFile("schematest", ".sql");
+    testScriptFile.deleteOnExit();
+    FileWriter fstream = new FileWriter(testScriptFile.getPath());
+    BufferedWriter out = new BufferedWriter(fstream);
+    for (String line: stmts) {
+      out.write(line);
+      out.newLine();
+    }
+    out.close();
+    return testScriptFile;
+  }
+}

commit 51f9b0788048620a25b22c7663d4ef9651ff295d
Author: Brock Noland <brock@apache.org>
Date:   Fri Sep 20 16:07:16 2013 +0000

    HIVE-4568 - Beeline needs to support resolving variables (Xuefu Zhang reviewed by Thejas M Nair)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1525046 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 4c6eb9b..2802f4c 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -96,7 +96,7 @@
 public class BeeLine {
   private static final ResourceBundle resourceBundle =
       ResourceBundle.getBundle(BeeLine.class.getName());
-  private BeeLineSignalHandler signalHandler = null;
+  private final BeeLineSignalHandler signalHandler = null;
   private static final String separator = System.getProperty("line.separator");
   private boolean exit = false;
   private final DatabaseConnections connections = new DatabaseConnections();
@@ -125,6 +125,8 @@
   private static final int ERRNO_ARGS = 1;
   private static final int ERRNO_OTHER = 2;
 
+  private static final String HIVE_VAR_PREFIX = "--hivevar";
+
   private final Map<Object, Object> formats = map(new Object[] {
       "vertical", new VerticalOutputFormat(this),
       "table", new TableOutputFormat(this),
@@ -504,6 +506,16 @@ boolean initArgs(String[] args) {
         return false;
       }
 
+      // Parse hive variables
+      if (args[i].equals(HIVE_VAR_PREFIX)) {
+        String[] parts = split(args[++i], "=");
+        if (parts.length != 2) {
+          return false;
+        }
+        getOpts().getHiveVariables().put(parts[0], parts[1]);
+        continue;
+      }
+
       // -- arguments are treated as properties
       if (args[i].startsWith("--")) {
         String[] parts = split(args[i].substring(2), "=");
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
index b6650cf..6c386ae 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
@@ -143,6 +143,10 @@ cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  -d <driver class>               the driver class to use\n \
 \  -e <query>                      query that should be executed\n \
 \  -f <file>                       script file that should be executed\n \
+\  --hivevar name=value            hive variable name and value\n \
+\                                  This is Hive specific settings in which variables\n \
+\                                  can be set at session level and referenced in Hive\n \
+\                                  commands or queries.\n \
 \  --color=[true/false]            control whether color is used for display\n \
 \  --showHeader=[true/false]       show column names in query results\n \
 \  --headerInterval=ROWS;          the interval between which heades are displayed\n \
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 61bdeee..c9e24fa 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -31,8 +31,10 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.Properties;
 import java.util.TreeSet;
 
@@ -80,6 +82,8 @@
 
   private String scriptFile = null;
 
+  private Map<String, String> hiveVariables = new HashMap<String, String>();
+
   public BeeLineOpts(BeeLine beeLine, Properties props) {
     this.beeLine = beeLine;
     if (terminal.getTerminalWidth() > 0) {
@@ -421,4 +425,13 @@ public int getMaxHeight() {
   public File getPropertiesFile() {
     return rcFile;
   }
+
+  public Map<String, String> getHiveVariables() {
+    return hiveVariables;
+  }
+
+  public void setHiveVariables(Map<String, String> hiveVariables) {
+    this.hiveVariables = hiveVariables;
+  }
+
 }
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index c70003d..1de5829 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -28,8 +28,10 @@
 import java.sql.DriverManager;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
 
@@ -52,9 +54,37 @@ public DatabaseConnection(BeeLine beeLine, String driver, String url,
       String username, String password) throws SQLException {
     this.beeLine = beeLine;
     this.driver = driver;
-    this.url = url;
     this.username = username;
     this.password = password;
+    this.url = appendHiveVariables(beeLine, url);
+  }
+
+/**
+ * Append hive variables specified on the command line to the connection url
+ * (after #). They will be set later on the session on the server side.
+ */
+  private static String appendHiveVariables(BeeLine beeLine, String url) {
+    StringBuilder sb = new StringBuilder( url );
+    Map<String, String> hiveVars = beeLine.getOpts().getHiveVariables();
+    if (hiveVars.size() > 0) {
+      if (url.indexOf("#") == -1) {
+        sb.append("#");
+      } else {
+        sb.append("&");
+      }
+      Set<Map.Entry<String, String>> vars = hiveVars.entrySet();
+      Iterator<Map.Entry<String, String>> it = vars.iterator();
+      while (it.hasNext()) {
+        Map.Entry<String, String> var = it.next();
+        sb.append(var.getKey());
+        sb.append("=");
+        sb.append(var.getValue());
+        if (it.hasNext()) {
+          sb.append("&");
+        }
+      }
+    }
+    return sb.toString();
   }
 
 
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
index 4280449..e3c6a72 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
@@ -23,6 +23,8 @@
 import java.io.FileOutputStream;
 import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hive.beeline.BeeLine;
@@ -38,14 +40,19 @@
  */
 //public class TestBeeLineWithArgs extends TestCase {
 public class TestBeeLineWithArgs {
-
   // Default location of HiveServer2
-  final static String BASE_JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
-  //set JDBC_URL to something else in test case, if it needs to be customized
-  String JDBC_URL = BASE_JDBC_URL;
+  final private static String JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
 
   private static HiveServer2 hiveServer2;
 
+  private List<String> getBaseArgs(String jdbcUrl) {
+    List<String> argList = new ArrayList<String>(8);
+    argList.add("-d");
+    argList.add(BeeLine.BEELINE_DEFAULT_JDBC_DRIVER);
+    argList.add("-u");
+    argList.add(jdbcUrl);
+    return argList;
+  }
   /**
    * Start up a local Hive Server 2 for these tests
    */
@@ -83,13 +90,13 @@ public static void postTests() {
    * @throws Any exception while executing
    * @return The stderr and stdout from running the script
    */
-  private String testCommandLineScript(String scriptFileName) throws Throwable {
-    String[] args = {"-d", BeeLine.BEELINE_DEFAULT_JDBC_DRIVER, "-u", JDBC_URL, "-f", scriptFileName};
+  private String testCommandLineScript(List<String> argList) throws Throwable {
     BeeLine beeLine = new BeeLine();
     ByteArrayOutputStream os = new ByteArrayOutputStream();
     PrintStream beelineOutputStream = new PrintStream(os);
     beeLine.setOutputStream(beelineOutputStream);
     beeLine.setErrorStream(beelineOutputStream);
+    String[] args = argList.toArray(new String[argList.size()]);
     beeLine.begin(args, null);
     String output = os.toString("UTF8");
 
@@ -106,7 +113,8 @@ private String testCommandLineScript(String scriptFileName) throws Throwable {
    * @param shouldMatch true if the pattern should be found, false if it should not
    * @throws Exception on command execution error
    */
-  private void testScriptFile(String testName, String scriptText, String expectedPattern, boolean shouldMatch) throws Throwable {
+  private void testScriptFile(String testName, String scriptText, String expectedPattern,
+      boolean shouldMatch, List<String> argList) throws Throwable {
 
     long startTime = System.currentTimeMillis();
     System.out.println(">>> STARTED " + testName);
@@ -118,9 +126,12 @@ private void testScriptFile(String testName, String scriptText, String expectedP
     os.print(scriptText);
     os.close();
 
+    argList.add("-f");
+    argList.add(scriptFile.getAbsolutePath());
+
     if(shouldMatch) {
       try {
-        String output = testCommandLineScript(scriptFile.getAbsolutePath());
+        String output = testCommandLineScript(argList);
         long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
         String time = "(" + elapsedTime + "s)";
         if (output.contains(expectedPattern)) {
@@ -136,7 +147,7 @@ private void testScriptFile(String testName, String scriptText, String expectedP
       }
     } else {
       try {
-        String output = testCommandLineScript(scriptFile.getAbsolutePath());
+        String output = testCommandLineScript(argList);
         long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
         String time = "(" + elapsedTime + "s)";
         if (output.contains(expectedPattern)) {
@@ -166,7 +177,25 @@ public void testPositiveScriptFile() throws Throwable {
     final String TEST_NAME = "testPositiveScriptFile";
     final String SCRIPT_TEXT = "show databases;\n";
     final String EXPECTED_PATTERN = " default ";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true);
+    List<String> argList = getBaseArgs(JDBC_URL);
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
+  }
+
+  /**
+   * Test Beeline -hivevar option. User can specify --hivevar name=value on Beeline command line.
+   * In the script, user should be able to use it in the form of ${name}, which will be substituted with
+   * the value.
+   * @throws Throwable
+   */
+  @Test
+  public void testBeelineCommandLineHiveVariable() throws Throwable {
+    List<String> argList = getBaseArgs(JDBC_URL);
+    argList.add("--hivevar");
+    argList.add("DUMMY_TBL=dummy");
+    final String TEST_NAME = "testHiveCommandLineHiveVariable";
+    final String SCRIPT_TEXT = "create table ${DUMMY_TBL} (d int);\nshow tables;\n";
+    final String EXPECTED_PATTERN = "dummy";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
   }
 
   /**
@@ -176,10 +205,11 @@ public void testPositiveScriptFile() throws Throwable {
    */
   @Test
   public void testBreakOnErrorScriptFile() throws Throwable {
+    List<String> argList = getBaseArgs(JDBC_URL);
     final String TEST_NAME = "testBreakOnErrorScriptFile";
     final String SCRIPT_TEXT = "select * from abcdefg01;\nshow databases;\n";
     final String EXPECTED_PATTERN = " default ";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, false);
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, false, argList);
   }
 
   /**
@@ -198,8 +228,12 @@ public void testNegativeScriptFile() throws Throwable {
     File scriptFile = File.createTempFile("beelinenegative", "temp");
     scriptFile.delete();
 
+    List<String> argList = getBaseArgs(JDBC_URL);
+    argList.add("-f");
+    argList.add(scriptFile.getAbsolutePath());
+
     try {
-        String output = testCommandLineScript(scriptFile.getAbsolutePath());
+        String output = testCommandLineScript(argList);
       long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
       String time = "(" + elapsedTime + "s)";
       if (output.contains(EXPECTED_PATTERN)) {
@@ -243,11 +277,11 @@ public void testNPE() throws UnsupportedEncodingException {
 
   @Test
   public void testHiveVarSubstitution() throws Throwable {
-    JDBC_URL = BASE_JDBC_URL + "#D_TBL=dummy_t";
+    List<String> argList = getBaseArgs(JDBC_URL + "#D_TBL=dummy_t");
     final String TEST_NAME = "testHiveVarSubstitution";
     final String SCRIPT_TEXT = "create table ${D_TBL} (d int);\nshow tables;\n";
     final String EXPECTED_PATTERN = "dummy_t";
-    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true);
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
   }
 
 }

commit a730e91e94bce55e578c21b93356fb715ca9ee35
Author: Thejas Madhavan Nair <thejas@apache.org>
Date:   Fri Sep 6 00:39:03 2013 +0000

    HIVE-5131: JDBC client's hive variables are not passed to HS2 (Xuefu Zhang via Thejas Nair)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1520465 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
index 030f6b0..4280449 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
@@ -40,7 +40,9 @@
 public class TestBeeLineWithArgs {
 
   // Default location of HiveServer2
-  final static String JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
+  final static String BASE_JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
+  //set JDBC_URL to something else in test case, if it needs to be customized
+  String JDBC_URL = BASE_JDBC_URL;
 
   private static HiveServer2 hiveServer2;
 
@@ -100,7 +102,7 @@ private String testCommandLineScript(String scriptFileName) throws Throwable {
    * in the output (stdout or stderr), fail if not found
    * Print PASSED or FAILED
    * @paramm testName Name of test to print
-   * @param expecttedPattern Text to look for in command output
+   * @param expectedPattern Text to look for in command output/error
    * @param shouldMatch true if the pattern should be found, false if it should not
    * @throws Exception on command execution error
    */
@@ -239,4 +241,13 @@ public void testNPE() throws UnsupportedEncodingException {
     System.out.println(">>> PASSED " + "testNPE" );
   }
 
+  @Test
+  public void testHiveVarSubstitution() throws Throwable {
+    JDBC_URL = BASE_JDBC_URL + "#D_TBL=dummy_t";
+    final String TEST_NAME = "testHiveVarSubstitution";
+    final String SCRIPT_TEXT = "create table ${D_TBL} (d int);\nshow tables;\n";
+    final String EXPECTED_PATTERN = "dummy_t";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true);
+  }
+
 }

commit 8c01f61f26c2d6094de575e52230d4f6f0c54f6e
Author: Owen O'Malley <omalley@apache.org>
Date:   Wed Aug 7 21:01:45 2013 +0000

    HIVE-4886 Beeline code should have Apache license headers. (Thejas M Nair via
    omalley)
    
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1511485 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java b/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java
index 30f43c4..c762096 100644
--- a/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java
+++ b/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java
index cee9713..97d27eb 100644
--- a/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index aeb1e8b..4c6eb9b 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java b/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java
index a0bfb17..52313e6 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java
@@ -1,46 +1,19 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
- *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
- */
-
-/*
- * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java b/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java
index 746466e..c6bb4fe 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 84f2828..61bdeee 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java b/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java
index cab521f..378f1b0 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 
 package org.apache.hive.beeline;
diff --git a/beeline/src/java/org/apache/hive/beeline/BufferedRows.java b/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
index 4384a52..fc8e62b 100644
--- a/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
+++ b/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java b/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java
index 3b2f8d4..b0fda1d 100644
--- a/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java
+++ b/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/CommandHandler.java b/beeline/src/java/org/apache/hive/beeline/CommandHandler.java
index 4d09da9..0441bce 100644
--- a/beeline/src/java/org/apache/hive/beeline/CommandHandler.java
+++ b/beeline/src/java/org/apache/hive/beeline/CommandHandler.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 3799cc1..c574cd4 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index 68d82ca..c70003d 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java
index 6eb499a..ce576ff 100644
--- a/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/DriverInfo.java b/beeline/src/java/org/apache/hive/beeline/DriverInfo.java
index 5a115a5..df432b1 100644
--- a/beeline/src/java/org/apache/hive/beeline/DriverInfo.java
+++ b/beeline/src/java/org/apache/hive/beeline/DriverInfo.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java b/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java
index 2c0fa35..8aef976 100644
--- a/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java
+++ b/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/OutputFile.java b/beeline/src/java/org/apache/hive/beeline/OutputFile.java
index 8171200..1014af3 100644
--- a/beeline/src/java/org/apache/hive/beeline/OutputFile.java
+++ b/beeline/src/java/org/apache/hive/beeline/OutputFile.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/OutputFormat.java b/beeline/src/java/org/apache/hive/beeline/OutputFormat.java
index 287b1c7..3189cc5 100644
--- a/beeline/src/java/org/apache/hive/beeline/OutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/OutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java b/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java
index a00fb53..0fb636e 100644
--- a/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java
+++ b/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/Reflector.java b/beeline/src/java/org/apache/hive/beeline/Reflector.java
index 2501046..1b80431 100644
--- a/beeline/src/java/org/apache/hive/beeline/Reflector.java
+++ b/beeline/src/java/org/apache/hive/beeline/Reflector.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/Rows.java b/beeline/src/java/org/apache/hive/beeline/Rows.java
index aacbf05..a66e709 100644
--- a/beeline/src/java/org/apache/hive/beeline/Rows.java
+++ b/beeline/src/java/org/apache/hive/beeline/Rows.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java b/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
index 6b2c975..916c7fc 100644
--- a/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
+++ b/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java
index c06f7e0..7853c3f 100644
--- a/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java b/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java
index befff94..8d4097e 100644
--- a/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java
+++ b/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java b/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java
index 8f9cc42..bc0d9be 100644
--- a/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java
+++ b/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
index 2439bf9..2be4678 100644
--- a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java
index 7b19504..f56c5a6 100644
--- a/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java
index 296a328..943a212 100644
--- a/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 
diff --git a/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java
index e187a6d..d52d59f 100644
--- a/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java
+++ b/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java
@@ -1,46 +1,24 @@
-/*
- *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
- *  All rights reserved.
- *
- *
- *  Redistribution and use in source and binary forms,
- *  with or without modification, are permitted provided
- *  that the following conditions are met:
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
  *
- *  Redistributions of source code must retain the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer.
- *  Redistributions in binary form must reproduce the above
- *  copyright notice, this list of conditions and the following
- *  disclaimer in the documentation and/or other materials
- *  provided with the distribution.
- *  Neither the name of the <ORGANIZATION> nor the names
- *  of its contributors may be used to endorse or promote
- *  products derived from this software without specific
- *  prior written permission.
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
- *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
- *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  This software is hosted by SourceForge.
- *  SourceForge is a trademark of VA Linux Systems, Inc.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 /*
  * This source file is based on code taken from SQLLine 1.0.2
- * The license above originally appeared in src/sqlline/SqlLine.java
- * http://sqlline.sourceforge.net/
+ * See SQLLine notice in LICENSE
  */
 package org.apache.hive.beeline;
 

commit 46a903cdad936e1d318ffb90520deab251c83750
Author: Brock Noland <brock@apache.org>
Date:   Wed Jul 24 13:52:43 2013 +0000

    HIVE-4876: Beeling help text do not contain -f and -e parameters (Jarek Jarcec Cecho via Brock Noland)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1506555 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
index fa02f92..b6650cf 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
@@ -141,6 +141,8 @@ cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  -n <username>                   the username to connect as\n \
 \  -p <password>                   the password to connect as\n \
 \  -d <driver class>               the driver class to use\n \
+\  -e <query>                      query that should be executed\n \
+\  -f <file>                       script file that should be executed\n \
 \  --color=[true/false]            control whether color is used for display\n \
 \  --showHeader=[true/false]       show column names in query results\n \
 \  --headerInterval=ROWS;          the interval between which heades are displayed\n \

commit 19918f90b2603d16dd6d8dd8a6abd5389431ea44
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Tue Jun 4 23:24:01 2013 +0000

    HIVE-4566 : NullPointerException if typeinfo and nativesql commands are executed at beeline before a DB connection is established (Xuefu Zhang via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1489672 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index cc4f4d0..3799cc1 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -96,8 +96,12 @@ public boolean metadata(String line) {
 
 
   public boolean metadata(String cmd, String[] args) {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+
     try {
-      Method[] m = beeLine.getDatabaseConnection().getDatabaseMetaData().getClass().getMethods();
+      Method[] m = beeLine.getDatabaseMetaData().getClass().getMethods();
       Set<String> methodNames = new TreeSet<String>();
       Set<String> methodNamesUpper = new TreeSet<String>();
       for (int i = 0; i < m.length; i++) {
@@ -114,7 +118,7 @@ public boolean metadata(String cmd, String[] args) {
         return false;
       }
 
-      Object res = beeLine.getReflector().invoke(beeLine.getDatabaseConnection().getDatabaseMetaData(),
+      Object res = beeLine.getReflector().invoke(beeLine.getDatabaseMetaData(),
           DatabaseMetaData.class, cmd, Arrays.asList(args));
 
       if (res instanceof ResultSet) {
@@ -224,7 +228,7 @@ public boolean nativesql(String sql) throws Exception {
     if (sql.startsWith("native")) {
       sql = sql.substring("native".length() + 1);
     }
-    String nat = beeLine.getDatabaseConnection().getConnection().nativeSQL(sql);
+    String nat = beeLine.getConnection().nativeSQL(sql);
     beeLine.output(nat);
     return true;
   }
@@ -568,7 +572,7 @@ public boolean dbinfo(String line) {
     for (int i = 0; i < m.length; i++) {
       try {
         beeLine.output(beeLine.getColorBuffer().pad(m[i], padlen).append(
-            "" + beeLine.getReflector().invoke(beeLine.getDatabaseConnection().getDatabaseMetaData(),
+            "" + beeLine.getReflector().invoke(beeLine.getDatabaseMetaData(),
                 m[i], new Object[0])));
       } catch (Exception e) {
         beeLine.handleException(e);
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
index 2a3848e..030f6b0 100644
--- a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
@@ -18,23 +18,19 @@
 
 package org.apache.hive.beeline.src.test;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintStream;
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.FileOutputStream;
-
-import junit.framework.TestCase;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.junit.Assert;
+import java.io.PrintStream;
+import java.io.UnsupportedEncodingException;
 
 import org.apache.hadoop.hive.conf.HiveConf;
-import org.apache.hadoop.hive.ql.parse.SemanticException;
 import org.apache.hive.beeline.BeeLine;
 import org.apache.hive.service.server.HiveServer2;
-import org.apache.hive.service.cli.HiveSQLException;
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 /**
  * TestBeeLineWithArgs - executes tests of the command-line arguments to BeeLine
@@ -216,4 +212,31 @@ public void testNegativeScriptFile() throws Throwable {
       throw e;
     }
   }
+
+  /**
+   * HIVE-4566
+   * @throws UnsupportedEncodingException
+   */
+  @Test
+  public void testNPE() throws UnsupportedEncodingException {
+    BeeLine beeLine = new BeeLine();
+
+    ByteArrayOutputStream os = new ByteArrayOutputStream();
+    PrintStream beelineOutputStream = new PrintStream(os);
+    beeLine.setOutputStream(beelineOutputStream);
+    beeLine.setErrorStream(beelineOutputStream);
+
+    beeLine.runCommands( new String[] {"!typeinfo"} );
+    String output = os.toString("UTF8");
+    Assert.assertFalse( output.contains("java.lang.NullPointerException") );
+    Assert.assertTrue( output.contains("No current connection") );
+
+    beeLine.runCommands( new String[] {"!nativesql"} );
+    output = os.toString("UTF8");
+    Assert.assertFalse( output.contains("java.lang.NullPointerException") );
+    Assert.assertTrue( output.contains("No current connection") );
+
+    System.out.println(">>> PASSED " + "testNPE" );
+  }
+
 }

commit edf749771133a111ed8960701f3dbb2be0cd243e
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Sun Jun 2 16:58:06 2013 +0000

    HIVE-4489 : beeline always return the same error message twice (Chaoyu Tang via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1488741 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 8e2a52f..cc4f4d0 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -771,9 +771,6 @@ private boolean execute(String line, boolean call) {
           beeLine.info(beeLine.loc("rows-affected", count)
               + " " + beeLine.locElapsedTime(end - start));
         }
-      } catch (Exception e) {
-        beeLine.error(e);
-        throw e;
       } finally {
         if (stmnt != null) {
           stmnt.close();

commit cc59684bcd71c7e7e5a4492f6e9a4cb01a0fb439
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Sun Apr 21 16:01:06 2013 +0000

    HIVE-4364 : beeline always exits with 0 status, should exit with non-zero status on error (Rob Weltman via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1470314 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index f6c3242..aeb1e8b 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -143,6 +143,10 @@
   private static final String SCRIPT_OUTPUT_PREFIX = ">>>";
   private static final int SCRIPT_OUTPUT_PAD_SIZE = 5;
 
+  private static final int ERRNO_OK = 0;
+  private static final int ERRNO_ARGS = 1;
+  private static final int ERRNO_OTHER = 2;
+
   private final Map<Object, Object> formats = map(new Object[] {
       "vertical", new VerticalOutputFormat(this),
       "table", new TableOutputFormat(this),
@@ -367,6 +371,7 @@ public static void main(String[] args) throws IOException {
   /**
    * Starts the program with redirected input. For redirected output,
    * setOutputStream() and setErrorStream can be used.
+   * Exits with 0 on success, 1 on invalid arguments, and 2 on any other error
    *
    * @param args
    *          same as main()
@@ -377,12 +382,10 @@ public static void main(String[] args) throws IOException {
   public static void mainWithInputRedirection(String[] args, InputStream inputStream)
       throws IOException {
     BeeLine beeLine = new BeeLine();
-    beeLine.begin(args, inputStream);
+    int status = beeLine.begin(args, inputStream);
 
-    // exit the system: useful for Hypersonic and other
-    // badly-behaving systems
     if (!Boolean.getBoolean(BeeLineOpts.PROPERTY_NAME_EXIT)) {
-      System.exit(0);
+      System.exit(status);
     }
   }
 
@@ -608,7 +611,8 @@ boolean initArgs(String[] args) {
    * to the appropriate {@link CommandHandler} until the
    * global variable <code>exit</code> is true.
    */
-  public void begin(String[] args, InputStream inputStream) throws IOException {
+  public int begin(String[] args, InputStream inputStream) throws IOException {
+    int status = ERRNO_OK;
     try {
       // load the options first, so we can override on the command line
       getOpts().load();
@@ -618,7 +622,7 @@ public void begin(String[] args, InputStream inputStream) throws IOException {
 
     if (!(initArgs(args))) {
       usage();
-      return;
+      return ERRNO_ARGS;
     }
 
     ConsoleReader reader = null;
@@ -630,6 +634,7 @@ public void begin(String[] args, InputStream inputStream) throws IOException {
       } catch (Throwable t) {
         handleException(t);
         commands.quit(null);
+        status = ERRNO_OTHER;
       }
     } else {
       reader = getConsoleReader(inputStream);
@@ -646,17 +651,20 @@ public void begin(String[] args, InputStream inputStream) throws IOException {
         // Execute one instruction; terminate on executing a script if there is an error
         if (!dispatch(reader.readLine(getPrompt())) && runningScript) {
           commands.quit(null);
+          status = ERRNO_OTHER;
         }
       } catch (EOFException eof) {
         // CTRL-D
         commands.quit(null);
       } catch (Throwable t) {
         handleException(t);
+        status = ERRNO_OTHER;
       }
     }
     // ### NOTE jvs 10-Aug-2004: Clean up any outstanding
     // connections automatically.
     commands.closeall(null);
+    return status;
   }
 
   public void close() {

commit 624ea851b580c8d8fd6482ebd16067ff463c028e
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Thu Apr 18 14:39:44 2013 +0000

    HIVE-4278 : HCat needs to get current Hive jars instead of pulling them from maven repo (Sushanth Sowmyan via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1469348 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/ivy.xml b/beeline/ivy.xml
index cfefa76..cdded26 100644
--- a/beeline/ivy.xml
+++ b/beeline/ivy.xml
@@ -45,8 +45,6 @@
                 conf="compile->default" />
     <dependency org="org.apache.hive" name="hive-shims" rev="${version}"
                 conf="runtime" transitive="false"/>
-    <dependency org="org.apache.hive" name="hive-builtins" rev="${version}"
-                conf="runtime" transitive="false"/>
     
     <!-- Test Dependencies -->
     <dependency org="junit" name="junit"

commit a681b57609ae306c7623491549cc0176b6cdf38d
Author: Carl Steinbach <cws@apache.org>
Date:   Mon Apr 15 09:54:54 2013 +0000

    HIVE-4268. Beeline should support the -f option (Rob Weltman via cws)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1467920 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index 1d822ba..f6c3242 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -554,6 +554,8 @@ boolean initArgs(String[] args) {
         url = args[i++ + 1];
       } else if (args[i].equals("-e")) {
         commands.add(args[i++ + 1]);
+      } else if (args[i].equals("-f")) {
+        getOpts().setScriptFile(args[i++ + 1]);
       } else {
         files.add(args[i]);
       }
@@ -606,7 +608,7 @@ boolean initArgs(String[] args) {
    * to the appropriate {@link CommandHandler} until the
    * global variable <code>exit</code> is true.
    */
-  void begin(String[] args, InputStream inputStream) throws IOException {
+  public void begin(String[] args, InputStream inputStream) throws IOException {
     try {
       // load the options first, so we can override on the command line
       getOpts().load();
@@ -614,12 +616,25 @@ void begin(String[] args, InputStream inputStream) throws IOException {
       // nothing
     }
 
-    ConsoleReader reader = getConsoleReader(inputStream);
     if (!(initArgs(args))) {
       usage();
       return;
     }
 
+    ConsoleReader reader = null;
+    boolean runningScript = (getOpts().getScriptFile() != null);
+    if (runningScript) {
+      try {
+        FileInputStream scriptStream = new FileInputStream(getOpts().getScriptFile());
+        reader = getConsoleReader(scriptStream);
+      } catch (Throwable t) {
+        handleException(t);
+        commands.quit(null);
+      }
+    } else {
+      reader = getConsoleReader(inputStream);
+    }
+
     try {
       info(getApplicationTitle());
     } catch (Exception e) {
@@ -628,7 +643,10 @@ void begin(String[] args, InputStream inputStream) throws IOException {
 
     while (!exit) {
       try {
-        dispatch(reader.readLine(getPrompt()));
+        // Execute one instruction; terminate on executing a script if there is an error
+        if (!dispatch(reader.readLine(getPrompt())) && runningScript) {
+          commands.quit(null);
+        }
       } catch (EOFException eof) {
         // CTRL-D
         commands.quit(null);
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 0a06876..84f2828 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -100,6 +100,7 @@
   private final File rcFile = new File(saveDir(), "beeline.properties");
   private String historyFile = new File(saveDir(), "history").getAbsolutePath();
 
+  private String scriptFile = null;
 
   public BeeLineOpts(BeeLine beeLine, Properties props) {
     this.beeLine = beeLine;
@@ -351,6 +352,14 @@ public String getHistoryFile() {
     return historyFile;
   }
 
+  public void setScriptFile(String scriptFile) {
+    this.scriptFile = scriptFile;
+  }
+
+  public String getScriptFile() {
+    return scriptFile;
+  }
+
   public void setColor(boolean color) {
     this.color = color;
   }
diff --git a/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
new file mode 100644
index 0000000..2a3848e
--- /dev/null
+++ b/beeline/src/test/org/apache/hive/beeline/src/test/TestBeeLineWithArgs.java
@@ -0,0 +1,219 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.beeline.src.test;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.io.ByteArrayOutputStream;
+import java.io.FileOutputStream;
+
+import junit.framework.TestCase;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.junit.Assert;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.ql.parse.SemanticException;
+import org.apache.hive.beeline.BeeLine;
+import org.apache.hive.service.server.HiveServer2;
+import org.apache.hive.service.cli.HiveSQLException;
+
+/**
+ * TestBeeLineWithArgs - executes tests of the command-line arguments to BeeLine
+ *
+ */
+//public class TestBeeLineWithArgs extends TestCase {
+public class TestBeeLineWithArgs {
+
+  // Default location of HiveServer2
+  final static String JDBC_URL = BeeLine.BEELINE_DEFAULT_JDBC_URL + "localhost:10000";
+
+  private static HiveServer2 hiveServer2;
+
+  /**
+   * Start up a local Hive Server 2 for these tests
+   */
+  @BeforeClass
+  public static void preTests() throws Exception {
+    HiveConf hiveConf = new HiveConf();
+    //  hiveConf.logVars(System.err);
+    // System.err.flush();
+
+    hiveServer2 = new HiveServer2();
+    hiveServer2.init(hiveConf);
+    System.err.println("Starting HiveServer2...");
+    hiveServer2.start();
+    Thread.sleep(1000);
+  }
+
+  /**
+   * Shut down a local Hive Server 2 for these tests
+   */
+  @AfterClass
+  public static void postTests() {
+    try {
+      if (hiveServer2 != null) {
+        System.err.println("Stopping HiveServer2...");
+        hiveServer2.stop();
+      }
+    } catch (Throwable t) {
+      t.printStackTrace();
+    }
+  }
+
+  /**
+   * Execute a script with "beeline -f"
+   * @param scriptFileName The name of the script to execute
+   * @throws Any exception while executing
+   * @return The stderr and stdout from running the script
+   */
+  private String testCommandLineScript(String scriptFileName) throws Throwable {
+    String[] args = {"-d", BeeLine.BEELINE_DEFAULT_JDBC_DRIVER, "-u", JDBC_URL, "-f", scriptFileName};
+    BeeLine beeLine = new BeeLine();
+    ByteArrayOutputStream os = new ByteArrayOutputStream();
+    PrintStream beelineOutputStream = new PrintStream(os);
+    beeLine.setOutputStream(beelineOutputStream);
+    beeLine.setErrorStream(beelineOutputStream);
+    beeLine.begin(args, null);
+    String output = os.toString("UTF8");
+
+    return output;
+  }
+
+  /**
+   * Attempt to execute a simple script file with the -f option to BeeLine
+   * Test for presence of an expected pattern
+   * in the output (stdout or stderr), fail if not found
+   * Print PASSED or FAILED
+   * @paramm testName Name of test to print
+   * @param expecttedPattern Text to look for in command output
+   * @param shouldMatch true if the pattern should be found, false if it should not
+   * @throws Exception on command execution error
+   */
+  private void testScriptFile(String testName, String scriptText, String expectedPattern, boolean shouldMatch) throws Throwable {
+
+    long startTime = System.currentTimeMillis();
+    System.out.println(">>> STARTED " + testName);
+
+    // Put the script content in a temp file
+    File scriptFile = File.createTempFile(testName, "temp");
+    scriptFile.deleteOnExit();
+    PrintStream os = new PrintStream(new FileOutputStream(scriptFile));
+    os.print(scriptText);
+    os.close();
+
+    if(shouldMatch) {
+      try {
+        String output = testCommandLineScript(scriptFile.getAbsolutePath());
+        long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
+        String time = "(" + elapsedTime + "s)";
+        if (output.contains(expectedPattern)) {
+          System.out.println(">>> PASSED " + testName + " " + time);
+        } else {
+          System.err.println("Output: " + output);
+          System.err.println(">>> FAILED " + testName + " (ERROR) " + time);
+          Assert.fail(testName);
+        }
+      } catch (Throwable e) {
+        e.printStackTrace();
+        throw e;
+      }
+    } else {
+      try {
+        String output = testCommandLineScript(scriptFile.getAbsolutePath());
+        long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
+        String time = "(" + elapsedTime + "s)";
+        if (output.contains(expectedPattern)) {
+          System.err.println("Output: " + output);
+          System.err.println(">>> FAILED " + testName + " (ERROR) " + time);
+          Assert.fail(testName);
+        } else {
+          System.out.println(">>> PASSED " + testName + " " + time);
+        }
+      } catch (Throwable e) {
+        System.err.println("Exception: " + e.toString());
+        e.printStackTrace();
+        throw e;
+      }
+    }
+    scriptFile.delete();
+  }
+
+  /**
+   * Attempt to execute a simple script file with the -f option to BeeLine
+   * Test for presence of an expected pattern
+   * in the output (stdout or stderr), fail if not found
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testPositiveScriptFile() throws Throwable {
+    final String TEST_NAME = "testPositiveScriptFile";
+    final String SCRIPT_TEXT = "show databases;\n";
+    final String EXPECTED_PATTERN = " default ";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, true);
+  }
+
+  /**
+   * Attempt to execute a simple script file with the -f option to BeeLine
+   * The first command should fail and the second command should not execute
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testBreakOnErrorScriptFile() throws Throwable {
+    final String TEST_NAME = "testBreakOnErrorScriptFile";
+    final String SCRIPT_TEXT = "select * from abcdefg01;\nshow databases;\n";
+    final String EXPECTED_PATTERN = " default ";
+    testScriptFile(TEST_NAME, SCRIPT_TEXT, EXPECTED_PATTERN, false);
+  }
+
+  /**
+   * Attempt to execute a missing script file with the -f option to BeeLine
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testNegativeScriptFile() throws Throwable {
+    final String TEST_NAME = "testNegativeScriptFile";
+    final String EXPECTED_PATTERN = " default ";
+
+    long startTime = System.currentTimeMillis();
+    System.out.println(">>> STARTED " + TEST_NAME);
+
+    // Create and delete a temp file
+    File scriptFile = File.createTempFile("beelinenegative", "temp");
+    scriptFile.delete();
+
+    try {
+        String output = testCommandLineScript(scriptFile.getAbsolutePath());
+      long elapsedTime = (System.currentTimeMillis() - startTime)/1000;
+      String time = "(" + elapsedTime + "s)";
+      if (output.contains(EXPECTED_PATTERN)) {
+        System.err.println("Output: " + output);
+        System.err.println(">>> FAILED " + TEST_NAME + " (ERROR) " + time);
+        Assert.fail(TEST_NAME);
+      } else {
+        System.out.println(">>> PASSED " + TEST_NAME + " " + time);
+      }
+    } catch (Throwable e) {
+      e.printStackTrace();
+      throw e;
+    }
+  }
+}

commit 3dd12952937f64d8473419011c1c2d0519ad0966
Author: Ashutosh Chauhan <hashutosh@apache.org>
Date:   Tue Mar 12 17:48:00 2013 +0000

    HIVE-2935 : Implement HiveServer2 Beeline code changes (2nd patch of 4) (Carl Steinbach and others via Ashutosh Chauhan)
    
    git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1455648 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/beeline/build.xml b/beeline/build.xml
new file mode 100644
index 0000000..d583915
--- /dev/null
+++ b/beeline/build.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0"?>
+
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+
+
+<!-- 
+Before you can run these subtargets directly, you need 
+to call at top-level: ant deploy-contrib compile-core-test
+-->
+<project name="beeline" default="jar">
+
+  <property name="src.dir"  location="${basedir}/src/java"/>
+  <import file="../build-common.xml"/>
+
+  <target name="compile" depends="init, setup, ivy-retrieve">
+    <echo message="Project: ${ant.project.name}"/>
+    <javac
+     encoding="${build.encoding}"
+     srcdir="${src.dir}"
+     includes="**/*.java"
+     destdir="${build.classes}"
+     debug="${javac.debug}"
+     deprecation="${javac.deprecation}"
+     includeantruntime="false">
+      <compilerarg line="${javac.args} ${javac.args.warnings}" />
+      <classpath refid="classpath"/>
+    </javac>
+    <copy todir="${build.classes}" failonerror="false">
+      <fileset dir="${src.dir}">
+        <include name="**/*.properties"/>
+      </fileset>
+    </copy>
+  </target>
+
+</project>
diff --git a/beeline/ivy.xml b/beeline/ivy.xml
new file mode 100644
index 0000000..cfefa76
--- /dev/null
+++ b/beeline/ivy.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<ivy-module version="2.0">
+  <info organisation="${hive.ivy.org}" module="hive-beeline" revision="${version}">
+    <license name="The Apache Software License, Version 2.0" url="http://www.apache.org/licenses/LICENSE-2.0.txt" />
+    <description homepage="http://hive.apache.org">
+      The Apache Hive (TM) data warehouse software facilitates querying and managing large datasets residing in distributed storage.
+      https://cwiki.apache.org/confluence/display/Hive/Home
+    </description>
+  </info>
+  <configurations>
+    <include file="${ivy.conf.dir}/common-configurations.xml"/>
+  </configurations>
+  <dependencies>
+    <!-- Runtime Dependencies -->
+
+    <dependency org="commons-cli" name="commons-cli" rev="${commons-cli.version}"/>
+    <dependency org="commons-io" name="commons-io" rev="${commons-io.version}" />
+    <dependency org="commons-lang" name="commons-lang" rev="${commons-lang.version}"/>
+    <dependency org="commons-logging" name="commons-logging" rev="${commons-logging.version}"
+                transitive="false"/>
+    <dependency org="commons-logging" name="commons-logging-api" rev="${commons-logging-api.version}"
+                transitive="false"/>
+    <dependency org="jline" name="jline" rev="${jline.version}"
+                transitive="false"/>
+    <dependency org="org.apache.thrift" name="libthrift" rev="${libthrift.version}"
+                transitive="false"/>
+
+    <dependency org="org.apache.hive" name="hive-service" rev="${version}"
+                conf="compile->default" />
+    <dependency org="org.apache.hive" name="hive-shims" rev="${version}"
+                conf="runtime" transitive="false"/>
+    <dependency org="org.apache.hive" name="hive-builtins" rev="${version}"
+                conf="runtime" transitive="false"/>
+    
+    <!-- Test Dependencies -->
+    <dependency org="junit" name="junit"
+                rev="${junit.version}" conf="test->default" />
+    <dependency org="org.mockito" name="mockito-all"
+                rev="${mockito-all.version}" conf="test->default" />
+  </dependencies>
+</ivy-module>
diff --git a/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java b/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java
new file mode 100644
index 0000000..30f43c4
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/AbstractCommandHandler.java
@@ -0,0 +1,126 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+
+import jline.Completor;
+import jline.NullCompletor;
+
+/**
+ * An abstract implementation of CommandHandler.
+ *
+ */
+public abstract class AbstractCommandHandler implements CommandHandler {
+  private final BeeLine beeLine;
+  private final String name;
+  private final String[] names;
+  private final String helpText;
+  private Completor[] parameterCompletors = new Completor[0];
+
+
+  public AbstractCommandHandler(BeeLine beeLine, String[] names, String helpText,
+      Completor[] completors) {
+    this.beeLine = beeLine;
+    name = names[0];
+    this.names = names;
+    this.helpText = helpText;
+    if (completors == null || completors.length == 0) {
+      parameterCompletors = new Completor[] { new NullCompletor() };
+    } else {
+      List<Completor> c = new LinkedList<Completor>(Arrays.asList(completors));
+      c.add(new NullCompletor());
+      parameterCompletors = c.toArray(new Completor[0]);
+    }
+  }
+
+  @Override
+  public String getHelpText() {
+    return helpText;
+  }
+
+
+  @Override
+  public String getName() {
+    return name;
+  }
+
+
+  @Override
+  public String[] getNames() {
+    return names;
+  }
+
+
+  @Override
+  public String matches(String line) {
+    if (line == null || line.length() == 0) {
+      return null;
+    }
+
+    String[] parts = beeLine.split(line);
+    if (parts == null || parts.length == 0) {
+      return null;
+    }
+
+    for (String name2 : names) {
+      if (name2.startsWith(parts[0])) {
+        return name2;
+      }
+    }
+    return null;
+  }
+
+  public void setParameterCompletors(Completor[] parameterCompletors) {
+    this.parameterCompletors = parameterCompletors;
+  }
+
+  @Override
+  public Completor[] getParameterCompletors() {
+    return parameterCompletors;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java
new file mode 100644
index 0000000..cee9713
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/AbstractOutputFormat.java
@@ -0,0 +1,72 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+/**
+ * Abstract OutputFormat.
+ *
+ */
+abstract class AbstractOutputFormat implements OutputFormat {
+
+  public int print(Rows rows) {
+    int count = 0;
+    Rows.Row header = (Rows.Row) rows.next();
+    printHeader(header);
+
+    while (rows.hasNext()) {
+      printRow(rows, header, (Rows.Row) rows.next());
+      count++;
+    }
+    printFooter(header);
+    return count;
+  }
+
+
+  abstract void printHeader(Rows.Row header);
+
+  abstract void printFooter(Rows.Row header);
+
+  abstract void printRow(Rows rows, Rows.Row header, Rows.Row row);
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
new file mode 100644
index 0000000..1d822ba
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -0,0 +1,1700 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.EOFException;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.net.URLConnection;
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.Driver;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.Statement;
+import java.text.ChoiceFormat;
+import java.text.MessageFormat;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.ResourceBundle;
+import java.util.Set;
+import java.util.SortedSet;
+import java.util.StringTokenizer;
+import java.util.TreeMap;
+import java.util.TreeSet;
+import java.util.jar.Attributes;
+import java.util.jar.Manifest;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+import jline.ClassNameCompletor;
+import jline.Completor;
+import jline.ConsoleReader;
+import jline.FileNameCompletor;
+import jline.SimpleCompletor;
+
+
+/**
+ * A console SQL shell with command completion.
+ * <p>
+ * TODO:
+ * <ul>
+ * <li>User-friendly connection prompts</li>
+ * <li>Page results</li>
+ * <li>Handle binary data (blob fields)</li>
+ * <li>Implement command aliases</li>
+ * <li>Stored procedure execution</li>
+ * <li>Binding parameters to prepared statements</li>
+ * <li>Scripting language</li>
+ * <li>XA transactions</li>
+ * </ul>
+ *
+ */
+public class BeeLine {
+  private static final ResourceBundle resourceBundle =
+      ResourceBundle.getBundle(BeeLine.class.getName());
+  private BeeLineSignalHandler signalHandler = null;
+  private static final String separator = System.getProperty("line.separator");
+  private boolean exit = false;
+  private final DatabaseConnections connections = new DatabaseConnections();
+  public static final String COMMAND_PREFIX = "!";
+  private final Completor beeLineCommandCompletor;
+  private Collection<Driver> drivers = null;
+  private final BeeLineOpts opts = new BeeLineOpts(this, System.getProperties());
+  private String lastProgress = null;
+  private final Map<SQLWarning, Date> seenWarnings = new HashMap<SQLWarning, Date>();
+  private final Commands commands = new Commands(this);
+  private OutputFile scriptOutputFile = null;
+  private OutputFile recordOutputFile = null;
+  private PrintStream outputStream = new PrintStream(System.out, true);
+  private PrintStream errorStream = new PrintStream(System.err, true);
+  private ConsoleReader consoleReader;
+  private List<String> batch = null;
+  private final Reflector reflector;
+
+  public static final String BEELINE_DEFAULT_JDBC_DRIVER = "org.apache.hive.jdbc.HiveDriver";
+  public static final String BEELINE_DEFAULT_JDBC_URL = "jdbc:hive2://";
+
+  private static final String SCRIPT_OUTPUT_PREFIX = ">>>";
+  private static final int SCRIPT_OUTPUT_PAD_SIZE = 5;
+
+  private final Map<Object, Object> formats = map(new Object[] {
+      "vertical", new VerticalOutputFormat(this),
+      "table", new TableOutputFormat(this),
+      "csv", new SeparatedValuesOutputFormat(this, ','),
+      "tsv", new SeparatedValuesOutputFormat(this, '\t'),
+      "xmlattr", new XMLAttributeOutputFormat(this),
+      "xmlelements", new XMLElementOutputFormat(this),
+  });
+
+
+  final CommandHandler[] commandHandlers = new CommandHandler[] {
+      new ReflectiveCommandHandler(this, new String[] {"quit", "done", "exit"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"connect", "open"},
+          new Completor[] {new SimpleCompletor(getConnectionURLExamples())}),
+      new ReflectiveCommandHandler(this, new String[] {"describe"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"indexes"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"primarykeys"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"exportedkeys"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"manual"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"importedkeys"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"procedures"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"tables"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"typeinfo"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"columns"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"reconnect"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"dropall"},
+          new Completor[] {new TableNameCompletor(this)}),
+      new ReflectiveCommandHandler(this, new String[] {"history"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"metadata"},
+          new Completor[] {
+              new SimpleCompletor(getMetadataMethodNames())}),
+      new ReflectiveCommandHandler(this, new String[] {"nativesql"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"dbinfo"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"rehash"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"verbose"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"run"},
+          new Completor[] {new FileNameCompletor()}),
+      new ReflectiveCommandHandler(this, new String[] {"batch"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"list"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"all"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"go", "#"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"script"},
+          new Completor[] {new FileNameCompletor()}),
+      new ReflectiveCommandHandler(this, new String[] {"record"},
+          new Completor[] {new FileNameCompletor()}),
+      new ReflectiveCommandHandler(this, new String[] {"brief"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"close"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"closeall"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"isolation"},
+          new Completor[] {new SimpleCompletor(getIsolationLevels())}),
+      new ReflectiveCommandHandler(this, new String[] {"outputformat"},
+          new Completor[] {new SimpleCompletor(
+              formats.keySet().toArray(new String[0]))}),
+      new ReflectiveCommandHandler(this, new String[] {"autocommit"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"commit"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"properties"},
+          new Completor[] {new FileNameCompletor()}),
+      new ReflectiveCommandHandler(this, new String[] {"rollback"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"help", "?"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"set"},
+          getOpts().optionCompletors()),
+      new ReflectiveCommandHandler(this, new String[] {"save"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"scan"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"sql"},
+          null),
+      new ReflectiveCommandHandler(this, new String[] {"call"},
+          null),
+  };
+
+
+  static final SortedSet<String> KNOWN_DRIVERS = new TreeSet<String>(Arrays.asList(
+      new String[] {
+          "org.apache.hive.jdbc.HiveDriver",
+          "org.apache.hadoop.hive.jdbc.HiveDriver",
+      }));
+
+
+  static {
+    try {
+      Class.forName("jline.ConsoleReader");
+    } catch (Throwable t) {
+      throw new ExceptionInInitializerError("jline-missing");
+    }
+  }
+
+
+  static Manifest getManifest() throws IOException {
+    URL base = BeeLine.class.getResource("/META-INF/MANIFEST.MF");
+    URLConnection c = base.openConnection();
+    if (c instanceof JarURLConnection) {
+      return ((JarURLConnection) c).getManifest();
+    }
+    return null;
+  }
+
+
+  String getManifestAttribute(String name) {
+    try {
+      Manifest m = getManifest();
+      if (m == null) {
+        return "??";
+      }
+
+      Attributes attrs = m.getAttributes("beeline");
+      if (attrs == null) {
+        return "???";
+      }
+
+      String val = attrs.getValue(name);
+      if (val == null || "".equals(val)) {
+        return "????";
+      }
+
+      return val;
+    } catch (Exception e) {
+      e.printStackTrace(errorStream);
+      return "?????";
+    }
+  }
+
+
+  String getApplicationTitle() {
+    Package pack = BeeLine.class.getPackage();
+
+    return loc("app-introduction", new Object[] {
+        "Beeline",
+        pack.getImplementationVersion() == null ? "???"
+            : pack.getImplementationVersion(),
+        "Apache Hive",
+        // getManifestAttribute ("Specification-Title"),
+        // getManifestAttribute ("Implementation-Version"),
+        // getManifestAttribute ("Implementation-ReleaseDate"),
+        // getManifestAttribute ("Implementation-Vendor"),
+        // getManifestAttribute ("Implementation-License"),
+    });
+  }
+
+  String getApplicationContactInformation() {
+    return getManifestAttribute("Implementation-Vendor");
+  }
+
+  String loc(String res) {
+    return loc(res, new Object[0]);
+  }
+
+  String loc(String res, int param) {
+    try {
+      return MessageFormat.format(
+          new ChoiceFormat(resourceBundle.getString(res)).format(param),
+          new Object[] {new Integer(param)});
+    } catch (Exception e) {
+      return res + ": " + param;
+    }
+  }
+
+  String loc(String res, Object param1) {
+    return loc(res, new Object[] {param1});
+  }
+
+  String loc(String res, Object param1, Object param2) {
+    return loc(res, new Object[] {param1, param2});
+  }
+
+  String loc(String res, Object[] params) {
+    try {
+      return MessageFormat.format(resourceBundle.getString(res), params);
+    } catch (Exception e) {
+      e.printStackTrace(getErrorStream());
+      try {
+        return res + ": " + Arrays.asList(params);
+      } catch (Exception e2) {
+        return res;
+      }
+    }
+  }
+
+  protected String locElapsedTime(long milliseconds) {
+    if (getOpts().getShowElapsedTime()) {
+      return loc("time-ms", new Object[] {new Double(milliseconds / 1000d)});
+    }
+    return "";
+  }
+
+
+  /**
+   * Starts the program.
+   */
+  public static void main(String[] args) throws IOException {
+    mainWithInputRedirection(args, null);
+  }
+
+  /**
+   * Starts the program with redirected input. For redirected output,
+   * setOutputStream() and setErrorStream can be used.
+   *
+   * @param args
+   *          same as main()
+   *
+   * @param inputStream
+   *          redirected input, or null to use standard input
+   */
+  public static void mainWithInputRedirection(String[] args, InputStream inputStream)
+      throws IOException {
+    BeeLine beeLine = new BeeLine();
+    beeLine.begin(args, inputStream);
+
+    // exit the system: useful for Hypersonic and other
+    // badly-behaving systems
+    if (!Boolean.getBoolean(BeeLineOpts.PROPERTY_NAME_EXIT)) {
+      System.exit(0);
+    }
+  }
+
+
+  public BeeLine() {
+    beeLineCommandCompletor = new BeeLineCommandCompletor(this);
+    reflector = new Reflector(this);
+
+    // attempt to dynamically load signal handler
+    /* TODO disable signal handler
+    try {
+      Class<?> handlerClass =
+          Class.forName("org.apache.hive.beeline.SunSignalHandler");
+      signalHandler = (BeeLineSignalHandler)
+          handlerClass.newInstance();
+    } catch (Throwable t) {
+      // ignore and leave cancel functionality disabled
+    }
+    */
+  }
+
+
+  DatabaseConnection getDatabaseConnection() {
+    return getDatabaseConnections().current();
+  }
+
+
+  Connection getConnection() throws SQLException {
+    if (getDatabaseConnections().current() == null) {
+      throw new IllegalArgumentException(loc("no-current-connection"));
+    }
+    if (getDatabaseConnections().current().getConnection() == null) {
+      throw new IllegalArgumentException(loc("no-current-connection"));
+    }
+    return getDatabaseConnections().current().getConnection();
+  }
+
+
+  DatabaseMetaData getDatabaseMetaData() {
+    if (getDatabaseConnections().current() == null) {
+      throw new IllegalArgumentException(loc("no-current-connection"));
+    }
+    if (getDatabaseConnections().current().getDatabaseMetaData() == null) {
+      throw new IllegalArgumentException(loc("no-current-connection"));
+    }
+    return getDatabaseConnections().current().getDatabaseMetaData();
+  }
+
+
+  public String[] getIsolationLevels() {
+    return new String[] {
+        "TRANSACTION_NONE",
+        "TRANSACTION_READ_COMMITTED",
+        "TRANSACTION_READ_UNCOMMITTED",
+        "TRANSACTION_REPEATABLE_READ",
+        "TRANSACTION_SERIALIZABLE",
+    };
+  }
+
+
+  public String[] getMetadataMethodNames() {
+    try {
+      TreeSet<String> mnames = new TreeSet<String>();
+      Method[] m = DatabaseMetaData.class.getDeclaredMethods();
+      for (int i = 0; m != null && i < m.length; i++) {
+        mnames.add(m[i].getName());
+      }
+      return mnames.toArray(new String[0]);
+    } catch (Throwable t) {
+      return new String[0];
+    }
+  }
+
+
+  public String[] getConnectionURLExamples() {
+    return new String[] {
+        "jdbc:JSQLConnect://<hostname>/database=<database>",
+        "jdbc:cloudscape:<database>;create=true",
+        "jdbc:twtds:sqlserver://<hostname>/<database>",
+        "jdbc:daffodilDB_embedded:<database>;create=true",
+        "jdbc:datadirect:db2://<hostname>:50000;databaseName=<database>",
+        "jdbc:inetdae:<hostname>:1433",
+        "jdbc:datadirect:oracle://<hostname>:1521;SID=<database>;MaxPooledStatements=0",
+        "jdbc:datadirect:sqlserver://<hostname>:1433;SelectMethod=cursor;DatabaseName=<database>",
+        "jdbc:datadirect:sybase://<hostname>:5000",
+        "jdbc:db2://<hostname>/<database>",
+        "jdbc:hive2://<hostname>",
+        "jdbc:hsqldb:<database>",
+        "jdbc:idb:<database>.properties",
+        "jdbc:informix-sqli://<hostname>:1526/<database>:INFORMIXSERVER=<database>",
+        "jdbc:interbase://<hostname>//<database>.gdb",
+        "jdbc:microsoft:sqlserver://<hostname>:1433;DatabaseName=<database>;SelectMethod=cursor",
+        "jdbc:mysql://<hostname>/<database>?autoReconnect=true",
+        "jdbc:oracle:thin:@<hostname>:1521:<database>",
+        "jdbc:pointbase:<database>,database.home=<database>,create=true",
+        "jdbc:postgresql://<hostname>:5432/<database>",
+        "jdbc:postgresql:net//<hostname>/<database>",
+        "jdbc:sybase:Tds:<hostname>:4100/<database>?ServiceName=<database>",
+        "jdbc:weblogic:mssqlserver4:<database>@<hostname>:1433",
+        "jdbc:odbc:<database>",
+        "jdbc:sequelink://<hostname>:4003/[Oracle]",
+        "jdbc:sequelink://<hostname>:4004/[Informix];Database=<database>",
+        "jdbc:sequelink://<hostname>:4005/[Sybase];Database=<database>",
+        "jdbc:sequelink://<hostname>:4006/[SQLServer];Database=<database>",
+        "jdbc:sequelink://<hostname>:4011/[ODBC MS Access];Database=<database>",
+        "jdbc:openlink://<hostname>/DSN=SQLServerDB/UID=sa/PWD=",
+        "jdbc:solid://<hostname>:<port>/<UID>/<PWD>",
+        "jdbc:dbaw://<hostname>:8889/<database>",
+    };
+  }
+
+  /**
+   * Entry point to creating a {@link ColorBuffer} with color
+   * enabled or disabled depending on the value of {@link BeeLineOpts#getColor}.
+   */
+  ColorBuffer getColorBuffer() {
+    return new ColorBuffer(getOpts().getColor());
+  }
+
+
+  /**
+   * Entry point to creating a {@link ColorBuffer} with color
+   * enabled or disabled depending on the value of {@link BeeLineOpts#getColor}.
+   */
+  ColorBuffer getColorBuffer(String msg) {
+    return new ColorBuffer(msg, getOpts().getColor());
+  }
+
+
+  boolean initArgs(String[] args) {
+    List<String> commands = new LinkedList<String>();
+    List<String> files = new LinkedList<String>();
+    String driver = null, user = null, pass = null, url = null, cmd = null;
+
+    for (int i = 0; i < args.length; i++) {
+      if (args[i].equals("--help") || args[i].equals("-h")) {
+        usage();
+        return false;
+      }
+
+      // -- arguments are treated as properties
+      if (args[i].startsWith("--")) {
+        String[] parts = split(args[i].substring(2), "=");
+        debug(loc("setting-prop", Arrays.asList(parts)));
+        if (parts.length > 0) {
+          boolean ret;
+
+          if (parts.length >= 2) {
+            ret = getOpts().set(parts[0], parts[1], true);
+          } else {
+            ret = getOpts().set(parts[0], "true", true);
+          }
+
+          if (!ret) {
+            return false;
+          }
+
+        }
+        continue;
+      }
+
+      if (args[i].equals("-d")) {
+        driver = args[i++ + 1];
+      } else if (args[i].equals("-n")) {
+        user = args[i++ + 1];
+      } else if (args[i].equals("-p")) {
+        pass = args[i++ + 1];
+      } else if (args[i].equals("-u")) {
+        url = args[i++ + 1];
+      } else if (args[i].equals("-e")) {
+        commands.add(args[i++ + 1]);
+      } else {
+        files.add(args[i]);
+      }
+    }
+
+    // TODO: temporary disable this for easier debugging
+    /*
+    if (url == null) {
+      url = BEELINE_DEFAULT_JDBC_URL;
+    }
+    if (driver == null) {
+      driver = BEELINE_DEFAULT_JDBC_DRIVER;
+    }
+    */
+
+    if (url != null) {
+      String com = "!connect "
+          + url + " "
+          + (user == null || user.length() == 0 ? "''" : user) + " "
+          + (pass == null || pass.length() == 0 ? "''" : pass) + " "
+          + (driver == null ? "" : driver);
+      debug("issuing: " + com);
+      dispatch(com);
+    }
+
+    // now load properties files
+    for (Iterator<String> i = files.iterator(); i.hasNext();) {
+      dispatch("!properties " + i.next());
+    }
+
+
+    if (commands.size() > 0) {
+      // for single command execute, disable color
+      getOpts().setColor(false);
+      getOpts().setHeaderInterval(-1);
+
+      for (Iterator<String> i = commands.iterator(); i.hasNext();) {
+        String command = i.next().toString();
+        debug(loc("executing-command", command));
+        dispatch(command);
+      }
+      exit = true; // execute and exit
+    }
+    return true;
+  }
+
+
+  /**
+   * Start accepting input from stdin, and dispatch it
+   * to the appropriate {@link CommandHandler} until the
+   * global variable <code>exit</code> is true.
+   */
+  void begin(String[] args, InputStream inputStream) throws IOException {
+    try {
+      // load the options first, so we can override on the command line
+      getOpts().load();
+    } catch (Exception e) {
+      // nothing
+    }
+
+    ConsoleReader reader = getConsoleReader(inputStream);
+    if (!(initArgs(args))) {
+      usage();
+      return;
+    }
+
+    try {
+      info(getApplicationTitle());
+    } catch (Exception e) {
+      // ignore
+    }
+
+    while (!exit) {
+      try {
+        dispatch(reader.readLine(getPrompt()));
+      } catch (EOFException eof) {
+        // CTRL-D
+        commands.quit(null);
+      } catch (Throwable t) {
+        handleException(t);
+      }
+    }
+    // ### NOTE jvs 10-Aug-2004: Clean up any outstanding
+    // connections automatically.
+    commands.closeall(null);
+  }
+
+  public void close() {
+    commands.quit(null);
+    commands.closeall(null);
+  }
+
+  public ConsoleReader getConsoleReader(InputStream inputStream) throws IOException {
+    if (inputStream != null) {
+      // ### NOTE: fix for sf.net bug 879425.
+      consoleReader = new ConsoleReader(inputStream, new PrintWriter(System.out, true));
+    } else {
+      consoleReader = new ConsoleReader();
+    }
+
+    // setup history
+    ByteArrayInputStream historyBuffer = null;
+
+    if (new File(getOpts().getHistoryFile()).isFile()) {
+      try {
+        // save the current contents of the history buffer. This gets
+        // around a bug in JLine where setting the output before the
+        // input will clobber the history input, but setting the
+        // input before the output will cause the previous commands
+        // to not be saved to the buffer.
+        FileInputStream historyIn = new FileInputStream(getOpts().getHistoryFile());
+        ByteArrayOutputStream hist = new ByteArrayOutputStream();
+        int n;
+        while ((n = historyIn.read()) != -1) {
+          hist.write(n);
+        }
+        historyIn.close();
+        historyBuffer = new ByteArrayInputStream(hist.toByteArray());
+      } catch (Exception e) {
+        handleException(e);
+      }
+    }
+
+    try {
+      // now set the output for the history
+      PrintWriter historyOut = new PrintWriter(new FileWriter(getOpts().getHistoryFile()), true);
+      consoleReader.getHistory().setOutput(historyOut);
+    } catch (Exception e) {
+      handleException(e);
+    }
+
+    try {
+      // now load in the previous history
+      if (historyBuffer != null) {
+        consoleReader.getHistory().load(historyBuffer);
+      }
+    } catch (Exception e) {
+      handleException(e);
+    }
+    consoleReader.addCompletor(new BeeLineCompletor(this));
+    return consoleReader;
+  }
+
+
+  void usage() {
+    output(loc("cmd-usage"));
+  }
+
+
+  /**
+   * Dispatch the specified line to the appropriate {@link CommandHandler}.
+   *
+   * @param line
+   *          the commmand-line to dispatch
+   * @return true if the command was "successful"
+   */
+  boolean dispatch(String line) {
+    if (line == null) {
+      // exit
+      exit = true;
+      return true;
+    }
+
+    if (line.trim().length() == 0) {
+      return true;
+    }
+
+    if (isComment(line)) {
+      return true;
+    }
+
+    line = line.trim();
+
+    // save it to the current script, if any
+    if (scriptOutputFile != null) {
+      scriptOutputFile.addLine(line);
+    }
+
+    if (isHelpRequest(line)) {
+      line = "!help";
+    }
+
+    if (line.startsWith(COMMAND_PREFIX)) {
+      Map<String, CommandHandler> cmdMap = new TreeMap<String, CommandHandler>();
+      line = line.substring(1);
+      for (int i = 0; i < commandHandlers.length; i++) {
+        String match = commandHandlers[i].matches(line);
+        if (match != null) {
+          cmdMap.put(match, commandHandlers[i]);
+        }
+      }
+
+      if (cmdMap.size() == 0) {
+        return error(loc("unknown-command", line));
+      } else if (cmdMap.size() > 1) {
+        return error(loc("multiple-matches",
+            cmdMap.keySet().toString()));
+      } else {
+        return cmdMap.values().iterator().next()
+            .execute(line);
+      }
+    } else {
+      return commands.sql(line);
+    }
+  }
+
+  /**
+   * Test whether a line requires a continuation.
+   *
+   * @param line
+   *          the line to be tested
+   *
+   * @return true if continuation required
+   */
+  boolean needsContinuation(String line) {
+    if (isHelpRequest(line)) {
+      return false;
+    }
+
+    if (line.startsWith(COMMAND_PREFIX)) {
+      return false;
+    }
+
+    if (isComment(line)) {
+      return false;
+    }
+
+    String trimmed = line.trim();
+
+    if (trimmed.length() == 0) {
+      return false;
+    }
+    return !trimmed.endsWith(";");
+  }
+
+  /**
+   * Test whether a line is a help request other than !help.
+   *
+   * @param line
+   *          the line to be tested
+   *
+   * @return true if a help request
+   */
+  boolean isHelpRequest(String line) {
+    return line.equals("?") || line.equalsIgnoreCase("help");
+  }
+
+  /**
+   * Test whether a line is a comment.
+   *
+   * @param line
+   *          the line to be tested
+   *
+   * @return true if a comment
+   */
+  boolean isComment(String line) {
+    // SQL92 comment prefix is "--"
+    // beeline also supports shell-style "#" prefix
+    return line.startsWith("#") || line.startsWith("--");
+  }
+
+  /**
+   * Print the specified message to the console
+   *
+   * @param msg
+   *          the message to print
+   */
+  void output(String msg) {
+    output(msg, true);
+  }
+
+
+  void info(String msg) {
+    if (!(getOpts().isSilent())) {
+      output(msg, true, getErrorStream());
+    }
+  }
+
+
+  void info(ColorBuffer msg) {
+    if (!(getOpts().isSilent())) {
+      output(msg, true, getErrorStream());
+    }
+  }
+
+
+  /**
+   * Issue the specified error message
+   *
+   * @param msg
+   *          the message to issue
+   * @return false always
+   */
+  boolean error(String msg) {
+    output(getColorBuffer().red(msg), true, getErrorStream());
+    return false;
+  }
+
+
+  boolean error(Throwable t) {
+    handleException(t);
+    return false;
+  }
+
+
+  void debug(String msg) {
+    if (getOpts().getVerbose()) {
+      output(getColorBuffer().blue(msg), true, getErrorStream());
+    }
+  }
+
+
+  void output(ColorBuffer msg) {
+    output(msg, true);
+  }
+
+
+  void output(String msg, boolean newline, PrintStream out) {
+    output(getColorBuffer(msg), newline, out);
+  }
+
+
+  void output(ColorBuffer msg, boolean newline) {
+    output(msg, newline, getOutputStream());
+  }
+
+
+  void output(ColorBuffer msg, boolean newline, PrintStream out) {
+    if (newline) {
+      out.println(msg.getColor());
+    } else {
+      out.print(msg.getColor());
+    }
+
+    if (recordOutputFile == null) {
+      return;
+    }
+
+    // only write to the record file if we are writing a line ...
+    // otherwise we might get garbage from backspaces and such.
+    if (newline) {
+      recordOutputFile.addLine(msg.getMono()); // always just write mono
+    } else {
+      recordOutputFile.print(msg.getMono());
+    }
+  }
+
+
+  /**
+   * Print the specified message to the console
+   *
+   * @param msg
+   *          the message to print
+   * @param newline
+   *          if false, do not append a newline
+   */
+  void output(String msg, boolean newline) {
+    output(getColorBuffer(msg), newline);
+  }
+
+
+  void autocommitStatus(Connection c) throws SQLException {
+    info(loc("autocommit-status", c.getAutoCommit() + ""));
+  }
+
+
+  /**
+   * Ensure that autocommit is on for the current connection
+   *
+   * @return true if autocommit is set
+   */
+  boolean assertAutoCommit() {
+    if (!(assertConnection())) {
+      return false;
+    }
+    try {
+      if (getDatabaseConnection().getConnection().getAutoCommit()) {
+        return error(loc("autocommit-needs-off"));
+      }
+    } catch (Exception e) {
+      return error(e);
+    }
+    return true;
+  }
+
+
+  /**
+   * Assert that we have an active, living connection. Print
+   * an error message if we do not.
+   *
+   * @return true if there is a current, active connection
+   */
+  boolean assertConnection() {
+    try {
+      if (getDatabaseConnection() == null || getDatabaseConnection().getConnection() == null) {
+        return error(loc("no-current-connection"));
+      }
+      if (getDatabaseConnection().getConnection().isClosed()) {
+        return error(loc("connection-is-closed"));
+      }
+    } catch (SQLException sqle) {
+      return error(loc("no-current-connection"));
+    }
+    return true;
+  }
+
+
+  /**
+   * Print out any warnings that exist for the current connection.
+   */
+  void showWarnings() {
+    try {
+      if (getDatabaseConnection().getConnection() == null
+          || !getOpts().getVerbose()) {
+        return;
+      }
+      showWarnings(getDatabaseConnection().getConnection().getWarnings());
+    } catch (Exception e) {
+      handleException(e);
+    }
+  }
+
+
+  /**
+   * Print the specified warning on the console, as well as
+   * any warnings that are returned from {@link SQLWarning#getNextWarning}.
+   *
+   * @param warn
+   *          the {@link SQLWarning} to print
+   */
+  void showWarnings(SQLWarning warn) {
+    if (warn == null) {
+      return;
+    }
+
+    if (seenWarnings.get(warn) == null) {
+      // don't re-display warnings we have already seen
+      seenWarnings.put(warn, new java.util.Date());
+      handleSQLException(warn);
+    }
+
+    SQLWarning next = warn.getNextWarning();
+    if (next != warn) {
+      showWarnings(next);
+    }
+  }
+
+
+  String getPrompt() {
+    if (getDatabaseConnection() == null || getDatabaseConnection().getUrl() == null) {
+      return "beeline> ";
+    } else {
+      return getPrompt(getDatabaseConnections().getIndex()
+          + ": " + getDatabaseConnection().getUrl()) + "> ";
+    }
+  }
+
+
+  static String getPrompt(String url) {
+    if (url == null || url.length() == 0) {
+      url = "beeline";
+    }
+    if (url.indexOf(";") > -1) {
+      url = url.substring(0, url.indexOf(";"));
+    }
+    if (url.indexOf("?") > -1) {
+      url = url.substring(0, url.indexOf("?"));
+    }
+    if (url.length() > 45) {
+      url = url.substring(0, 45);
+    }
+    return url;
+  }
+
+
+  /**
+   * Try to obtain the current size of the specified {@link ResultSet} by jumping to the last row
+   * and getting the row number.
+   *
+   * @param rs
+   *          the {@link ResultSet} to get the size for
+   * @return the size, or -1 if it could not be obtained
+   */
+  int getSize(ResultSet rs) {
+    try {
+      if (rs.getType() == rs.TYPE_FORWARD_ONLY) {
+        return -1;
+      }
+      rs.last();
+      int total = rs.getRow();
+      rs.beforeFirst();
+      return total;
+    } catch (SQLException sqle) {
+      return -1;
+    }
+    // JDBC 1 driver error
+    catch (AbstractMethodError ame) {
+      return -1;
+    }
+  }
+
+
+  ResultSet getColumns(String table) throws SQLException {
+    if (!(assertConnection())) {
+      return null;
+    }
+    return getDatabaseConnection().getDatabaseMetaData().getColumns(
+        getDatabaseConnection().getDatabaseMetaData().getConnection().getCatalog(), null, table, "%");
+  }
+
+
+  ResultSet getTables() throws SQLException {
+    if (!(assertConnection())) {
+      return null;
+    }
+    return getDatabaseConnection().getDatabaseMetaData().getTables(
+        getDatabaseConnection().getDatabaseMetaData().getConnection().getCatalog(), null, "%",
+        new String[] {"TABLE"});
+  }
+
+
+  String[] getColumnNames(DatabaseMetaData meta) throws SQLException {
+    Set<String> names = new HashSet<String>();
+    info(loc("building-tables"));
+    try {
+      ResultSet columns = getColumns("%");
+      try {
+        int total = getSize(columns);
+        int index = 0;
+
+        while (columns.next()) {
+          // add the following strings:
+          // 1. column name
+          // 2. table name
+          // 3. tablename.columnname
+
+          progress(index++, total);
+          String name = columns.getString("TABLE_NAME");
+          names.add(name);
+          names.add(columns.getString("COLUMN_NAME"));
+          names.add(columns.getString("TABLE_NAME") + "."
+              + columns.getString("COLUMN_NAME"));
+        }
+        progress(index, index);
+      } finally {
+        columns.close();
+      }
+      info(loc("done"));
+      return names.toArray(new String[0]);
+    } catch (Throwable t) {
+      handleException(t);
+      return new String[0];
+    }
+  }
+
+
+  // //////////////////
+  // String utilities
+  // //////////////////
+
+
+  /**
+   * Split the line into an array by tokenizing on space characters
+   *
+   * @param line
+   *          the line to break up
+   * @return an array of individual words
+   */
+  String[] split(String line) {
+    return split(line, " ");
+  }
+
+
+  String dequote(String str) {
+    if (str == null) {
+      return null;
+    }
+    while ((str.startsWith("'") && str.endsWith("'"))
+        || (str.startsWith("\"") && str.endsWith("\""))) {
+      str = str.substring(1, str.length() - 1);
+    }
+    return str;
+  }
+
+
+  String[] split(String line, String delim) {
+    StringTokenizer tok = new StringTokenizer(line, delim);
+    String[] ret = new String[tok.countTokens()];
+    int index = 0;
+    while (tok.hasMoreTokens()) {
+      String t = tok.nextToken();
+      t = dequote(t);
+      ret[index++] = t;
+    }
+    return ret;
+  }
+
+
+  static Map<Object, Object> map(Object[] obs) {
+    Map<Object, Object> m = new HashMap<Object, Object>();
+    for (int i = 0; i < obs.length - 1; i += 2) {
+      m.put(obs[i], obs[i + 1]);
+    }
+    return Collections.unmodifiableMap(m);
+  }
+
+
+  static boolean getMoreResults(Statement stmnt) {
+    try {
+      return stmnt.getMoreResults();
+    } catch (Throwable t) {
+      return false;
+    }
+  }
+
+
+  static String xmlattrencode(String str) {
+    str = replace(str, "\"", "&quot;");
+    str = replace(str, "<", "&lt;");
+    return str;
+  }
+
+
+  static String replace(String source, String from, String to) {
+    if (source == null) {
+      return null;
+    }
+
+    if (from.equals(to)) {
+      return source;
+    }
+
+    StringBuilder replaced = new StringBuilder();
+
+    int index = -1;
+    while ((index = source.indexOf(from)) != -1) {
+      replaced.append(source.substring(0, index));
+      replaced.append(to);
+      source = source.substring(index + from.length());
+    }
+    replaced.append(source);
+
+    return replaced.toString();
+  }
+
+
+  /**
+   * Split the line based on spaces, asserting that the
+   * number of words is correct.
+   *
+   * @param line
+   *          the line to split
+   * @param assertLen
+   *          the number of words to assure
+   * @param usage
+   *          the message to output if there are an incorrect
+   *          number of words.
+   * @return the split lines, or null if the assertion failed.
+   */
+  String[] split(String line, int assertLen, String usage) {
+    String[] ret = split(line);
+
+    if (ret.length != assertLen) {
+      error(usage);
+      return null;
+    }
+
+    return ret;
+  }
+
+
+  /**
+   * Wrap the specified string by breaking on space characters.
+   *
+   * @param toWrap
+   *          the string to wrap
+   * @param len
+   *          the maximum length of any line
+   * @param start
+   *          the number of spaces to pad at the
+   *          beginning of a line
+   * @return the wrapped string
+   */
+  String wrap(String toWrap, int len, int start) {
+    StringBuilder buff = new StringBuilder();
+    StringBuilder line = new StringBuilder();
+
+    char[] head = new char[start];
+    Arrays.fill(head, ' ');
+
+    for (StringTokenizer tok = new StringTokenizer(toWrap, " "); tok.hasMoreTokens();) {
+      String next = tok.nextToken();
+      if (line.length() + next.length() > len) {
+        buff.append(line).append(separator).append(head);
+        line.setLength(0);
+      }
+
+      line.append(line.length() == 0 ? "" : " ").append(next);
+    }
+
+    buff.append(line);
+    return buff.toString();
+  }
+
+
+  /**
+   * Output a progress indicator to the console.
+   *
+   * @param cur
+   *          the current progress
+   * @param max
+   *          the maximum progress, or -1 if unknown
+   */
+  void progress(int cur, int max) {
+    StringBuilder out = new StringBuilder();
+
+    if (lastProgress != null) {
+      char[] back = new char[lastProgress.length()];
+      Arrays.fill(back, '\b');
+      out.append(back);
+    }
+
+    String progress = cur + "/"
+    + (max == -1 ? "?" : "" + max) + " "
+    + (max == -1 ? "(??%)"
+        : ("(" + (cur * 100 / (max == 0 ? 1 : max)) + "%)"));
+
+    if (cur >= max && max != -1) {
+      progress += " " + loc("done") + separator;
+      lastProgress = null;
+    } else {
+      lastProgress = progress;
+    }
+
+    out.append(progress);
+
+    outputStream.print(out.toString());
+    outputStream.flush();
+  }
+
+  // /////////////////////////////
+  // Exception handling routines
+  // /////////////////////////////
+
+  void handleException(Throwable e) {
+    while (e instanceof InvocationTargetException) {
+      e = ((InvocationTargetException) e).getTargetException();
+    }
+
+    if (e instanceof SQLException) {
+      handleSQLException((SQLException) e);
+    } else if (!(getOpts().getVerbose())) {
+      if (e.getMessage() == null) {
+        error(e.getClass().getName());
+      } else {
+        error(e.getMessage());
+      }
+    } else {
+      e.printStackTrace(getErrorStream());
+    }
+  }
+
+
+  void handleSQLException(SQLException e) {
+    if (e instanceof SQLWarning && !(getOpts().getShowWarnings())) {
+      return;
+    }
+
+    error(loc(e instanceof SQLWarning ? "Warning" : "Error",
+        new Object[] {
+            e.getMessage() == null ? "" : e.getMessage().trim(),
+            e.getSQLState() == null ? "" : e.getSQLState().trim(),
+            new Integer(e.getErrorCode())}));
+
+    if (getOpts().getVerbose()) {
+      e.printStackTrace(getErrorStream());
+    }
+
+    if (!getOpts().getShowNestedErrs()) {
+      return;
+    }
+
+    for (SQLException nested = e.getNextException(); nested != null && nested != e; nested = nested
+        .getNextException()) {
+      handleSQLException(nested);
+    }
+  }
+
+
+  boolean scanForDriver(String url) {
+    try {
+      // already registered
+      if (findRegisteredDriver(url) != null) {
+        return true;
+      }
+
+      // first try known drivers...
+      scanDrivers(true);
+
+      if (findRegisteredDriver(url) != null) {
+        return true;
+      }
+
+      // now really scan...
+      scanDrivers(false);
+
+      if (findRegisteredDriver(url) != null) {
+        return true;
+      }
+
+      return false;
+    } catch (Exception e) {
+      debug(e.toString());
+      return false;
+    }
+  }
+
+
+  private Driver findRegisteredDriver(String url) {
+    for (Enumeration drivers = DriverManager.getDrivers(); drivers != null
+        && drivers.hasMoreElements();) {
+      Driver driver = (Driver) drivers.nextElement();
+      try {
+        if (driver.acceptsURL(url)) {
+          return driver;
+        }
+      } catch (Exception e) {
+      }
+    }
+    return null;
+  }
+
+
+  Driver[] scanDrivers(String line) throws IOException {
+    return scanDrivers(false);
+  }
+
+
+  Driver[] scanDrivers(boolean knownOnly) throws IOException {
+    long start = System.currentTimeMillis();
+
+    Set<String> classNames = new HashSet<String>();
+
+    if (!knownOnly) {
+      classNames.addAll(Arrays.asList(
+          ClassNameCompletor.getClassNames()));
+    }
+
+    classNames.addAll(KNOWN_DRIVERS);
+
+    Set driverClasses = new HashSet();
+
+    for (Iterator<String> i = classNames.iterator(); i.hasNext();) {
+      String className = i.next().toString();
+
+      if (className.toLowerCase().indexOf("driver") == -1) {
+        continue;
+      }
+
+      try {
+        Class c = Class.forName(className, false,
+            Thread.currentThread().getContextClassLoader());
+        if (!Driver.class.isAssignableFrom(c)) {
+          continue;
+        }
+
+        if (Modifier.isAbstract(c.getModifiers())) {
+          continue;
+        }
+
+        // now instantiate and initialize it
+        driverClasses.add(c.newInstance());
+      } catch (Throwable t) {
+      }
+    }
+    info("scan complete in "
+        + (System.currentTimeMillis() - start) + "ms");
+    return (Driver[]) driverClasses.toArray(new Driver[0]);
+  }
+
+
+  private Driver[] scanDriversOLD(String line) {
+    long start = System.currentTimeMillis();
+
+    Set<String> paths = new HashSet<String>();
+    Set driverClasses = new HashSet();
+
+    for (StringTokenizer tok = new StringTokenizer(
+        System.getProperty("java.ext.dirs"),
+        System.getProperty("path.separator")); tok.hasMoreTokens();) {
+      File[] files = new File(tok.nextToken()).listFiles();
+      for (int i = 0; files != null && i < files.length; i++) {
+        paths.add(files[i].getAbsolutePath());
+      }
+    }
+
+    for (StringTokenizer tok = new StringTokenizer(
+        System.getProperty("java.class.path"),
+        System.getProperty("path.separator")); tok.hasMoreTokens();) {
+      paths.add(new File(tok.nextToken()).getAbsolutePath());
+    }
+
+    for (Iterator<String> i = paths.iterator(); i.hasNext();) {
+      File f = new File(i.next());
+      output(getColorBuffer().pad(loc("scanning", f.getAbsolutePath()), 60),
+          false);
+
+      try {
+        ZipFile zf = new ZipFile(f);
+        int total = zf.size();
+        int index = 0;
+
+        for (Enumeration zfEnum = zf.entries(); zfEnum.hasMoreElements();) {
+          ZipEntry entry = (ZipEntry) zfEnum.nextElement();
+          String name = entry.getName();
+          progress(index++, total);
+
+          if (name.endsWith(".class")) {
+            name = name.replace('/', '.');
+            name = name.substring(0, name.length() - 6);
+
+            try {
+              // check for the string "driver" in the class
+              // to see if we should load it. Not perfect, but
+              // it is far too slow otherwise.
+              if (name.toLowerCase().indexOf("driver") != -1) {
+                Class c = Class.forName(name, false,
+                    getClass().getClassLoader());
+                if (Driver.class.isAssignableFrom(c)
+                    && !(Modifier.isAbstract(
+                        c.getModifiers()))) {
+                  try {
+                    // load and initialize
+                    Class.forName(name);
+                  } catch (Exception e) {
+                  }
+                  driverClasses.add(c.newInstance());
+                }
+              }
+            } catch (Throwable t) {
+            }
+          }
+        }
+        progress(total, total);
+      } catch (Exception e) {
+      }
+    }
+
+    info("scan complete in "
+        + (System.currentTimeMillis() - start) + "ms");
+    return (Driver[]) driverClasses.toArray(new Driver[0]);
+  }
+
+
+  // /////////////////////////////////////
+  // ResultSet output formatting classes
+  // /////////////////////////////////////
+
+
+
+  int print(ResultSet rs) throws SQLException {
+    String format = getOpts().getOutputFormat();
+    OutputFormat f = (OutputFormat) formats.get(format);
+
+    if (f == null) {
+      error(loc("unknown-format", new Object[] {
+          format, formats.keySet()}));
+      f = new TableOutputFormat(this);
+    }
+
+    Rows rows;
+
+    if (getOpts().getIncremental()) {
+      rows = new IncrementalRows(this, rs);
+    } else {
+      rows = new BufferedRows(this, rs);
+    }
+    return f.print(rows);
+  }
+
+
+  Statement createStatement() throws SQLException {
+    Statement stmnt = getDatabaseConnection().getConnection().createStatement();
+    if (getOpts().timeout > -1) {
+      stmnt.setQueryTimeout(getOpts().timeout);
+    }
+    if (signalHandler != null) {
+      signalHandler.setStatement(stmnt);
+    }
+    return stmnt;
+  }
+
+
+  void runBatch(List<String> statements) {
+    try {
+      Statement stmnt = createStatement();
+      try {
+        for (Iterator<String> i = statements.iterator(); i.hasNext();) {
+          stmnt.addBatch(i.next().toString());
+        }
+        int[] counts = stmnt.executeBatch();
+
+        output(getColorBuffer().pad(getColorBuffer().bold("COUNT"), 8)
+            .append(getColorBuffer().bold("STATEMENT")));
+
+        for (int i = 0; counts != null && i < counts.length; i++) {
+          output(getColorBuffer().pad(counts[i] + "", 8)
+              .append(statements.get(i).toString()));
+        }
+      } finally {
+        try {
+          stmnt.close();
+        } catch (Exception e) {
+        }
+      }
+    } catch (Exception e) {
+      handleException(e);
+    }
+  }
+
+  public int runCommands(String[] cmds) {
+    return runCommands(Arrays.asList(cmds));
+  }
+
+  public int runCommands(List<String> cmds) {
+    int successCount = 0;
+    try {
+      // TODO: Make script output prefixing configurable. Had to disable this since
+      // it results in lots of test diffs.
+      for (String cmd : cmds) {
+        info(getColorBuffer().pad(SCRIPT_OUTPUT_PREFIX, SCRIPT_OUTPUT_PAD_SIZE).append(cmd));
+        // if we do not force script execution, abort
+        // when a failure occurs.
+        if (dispatch(cmd) || getOpts().getForce()) {
+          ++successCount;
+        } else {
+          error(loc("abort-on-error", cmd));
+          return successCount;
+        }
+      }
+    } catch (Exception e) {
+      handleException(e);
+    }
+    return successCount;
+  }
+
+  // ////////////////////////
+  // Command methods follow
+  // ////////////////////////
+
+  void setCompletions() throws SQLException, IOException {
+    if (getDatabaseConnection() != null) {
+      getDatabaseConnection().setCompletions(getOpts().getFastConnect());
+    }
+  }
+
+  BeeLineOpts getOpts() {
+    return opts;
+  }
+
+  DatabaseConnections getDatabaseConnections() {
+    return connections;
+  }
+
+  Completor getCommandCompletor() {
+    return beeLineCommandCompletor;
+  }
+
+  public boolean isExit() {
+    return exit;
+  }
+
+  public void setExit(boolean exit) {
+    this.exit = exit;
+  }
+
+  Collection<Driver> getDrivers() {
+    return drivers;
+  }
+
+  void setDrivers(Collection<Driver> drivers) {
+    this.drivers = drivers;
+  }
+
+  public static String getSeparator() {
+    return separator;
+  }
+
+  Commands getCommands() {
+    return commands;
+  }
+
+  OutputFile getScriptOutputFile() {
+    return scriptOutputFile;
+  }
+
+  void setScriptOutputFile(OutputFile script) {
+    this.scriptOutputFile = script;
+  }
+
+  OutputFile getRecordOutputFile() {
+    return recordOutputFile;
+  }
+
+  void setRecordOutputFile(OutputFile record) {
+    this.recordOutputFile = record;
+  }
+
+  public void setOutputStream(PrintStream outputStream) {
+    this.outputStream = new PrintStream(outputStream, true);
+  }
+
+  PrintStream getOutputStream() {
+    return outputStream;
+  }
+
+  public void setErrorStream(PrintStream errorStream) {
+    this.errorStream = new PrintStream(errorStream, true);
+  }
+
+  PrintStream getErrorStream() {
+    return errorStream;
+  }
+
+  ConsoleReader getConsoleReader() {
+    return consoleReader;
+  }
+
+  void setConsoleReader(ConsoleReader reader) {
+    this.consoleReader = reader;
+  }
+
+  List<String> getBatch() {
+    return batch;
+  }
+
+  void setBatch(List<String> batch) {
+    this.batch = batch;
+  }
+
+  protected Reflector getReflector() {
+    return reflector;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.properties b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
new file mode 100644
index 0000000..fa02f92
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.properties
@@ -0,0 +1,162 @@
+app-introduction: {0} version {1} by {2}
+
+jline-version: The version of the required {0} library is too old. Version \
+				"{1}" was found, but "{2}" is required.
+
+enter-for-more: [ Hit "enter" for more ("q" to exit) ]
+no-manual: Could not find manual resource.
+executing-command:	Executing command: {0}
+unknown-command: Unknown command: {0}
+autocommit-needs-off: Operation requires that autocommit be turned off.
+no-current-connection: No current connection
+connection-is-closed: Connection is closed
+reconnecting: Reconnecting to "{0}"...
+connecting: Connecting to "{0}"...
+no-driver: No known driver to handle "{0}"
+setting-prop: Setting property: {0}
+saving-options: Saving preferences to: {0}
+loaded-options: Loaded preferences from: {0}
+
+jdbc-level: JDBC level
+compliant: Compliant
+jdbc-version: Version
+driver-class: Driver Class
+
+help-quit: Exits the program
+help-dropall: Drop all tables in the current database
+help-connect: Open a new connection to the database.
+help-manual: Display the BeeLine manual
+help-typeinfo: Display the type map for the current connection
+help-describe: Describe a table
+help-reconnect: Reconnect to the database
+help-metadata: Obtain metadata information
+help-dbinfo: Give metadata information about the database
+help-rehash: Fetch table and column names for command completion
+help-verbose: Set verbose mode on
+help-run: Run a script from the specified file
+help-list: List the current connections
+help-all: Execute the specified SQL against all the current connections
+help-go: Select the current connection
+help-script: Start saving a script to a file
+help-brief: Set verbose mode off
+help-close: Close the current connection to the database
+help-closeall: Close all current open connections
+help-isolation: Set the transaction isolation for this connection
+help-nativesql: Show the native SQL for the specified statement
+help-call: Execute a callable statement
+help-autocommit: Set autocommit mode on or off
+help-commit: Commit the current transaction (if autocommit is off)
+help-rollback: Roll back the current transaction (if autocommit is off)
+help-batch: Start or execute a batch of statements
+help-help: Print a summary of command usage
+help-set: Set a beeline variable
+help-save: Save the current variabes and aliases
+help-native: Show the database''s native SQL for a command
+help-alias: Create a new command alias
+help-unalias: Unset a command alias
+help-scan: Scan for installed JDBC drivers
+help-sql: Execute a SQL command
+help-history: Display the command history
+help-record: Record all output to the specified file
+help-indexes: List all the indexes for the specified table
+help-primarykeys: List all the primary keys for the specified table
+help-exportedkeys: List all the exported keys for the specified table
+help-importedkeys: List all the imported keys for the specified table
+help-procedures: List all the procedures
+help-tables: List all the tables in the database
+help-columns: List all the columns for the specified table
+help-properties: Connect to the database specified in the properties file(s)
+help-outputformat: Set the output format for displaying results (table,vertical,csv,tsv,xmlattrs,xmlelements)
+
+jline-missing: The JLine jar was not found. Please ensure it is installed.
+
+batch-start: Batching SQL statements. Run "batch" again to execute the batch.
+running-batch: Running batched SQL statements...
+
+arg-usage: Usage: {0} <{1}>
+
+scanning: Scanning {0}...
+no-such-method: No such method "{0}"
+possible-methods: Possible methods:
+
+closing: Closing: {0}
+already-closed: Connection is already closed.
+error-setting: Error setting configuration: {0}: {1}
+no-method: No method matching "{0}" was found in {1}.
+
+
+connected: Connected to: {0} (version {1})
+driver: Driver: {0} (version {1})
+autocommit-status: Autocommit status: {0}
+isolation-status: Transaction isolation: {0}
+unknown-format: Unknown output format "{0}". Possible values: {1}
+
+closed: closed
+open: open
+
+executing-con: Executing SQL against: {0}
+comments: Comments, bug reports, and patches go to {0}
+building-tables: Building list of tables and columns for tab-completion \
+	(set fastconnect to true to skip)...
+done: Done
+state: state
+code: code
+
+invalid-connections: Invalid connection: {0}
+
+script-closed: Script closed. Enter "run {0}" to replay it.
+script-already-running: Script ({0}) is already running. Enter "script" with no arguments to stop it.  
+script-started: Saving command script to "{0}". Enter "script" with no arguments to stop it.
+
+
+record-closed: Recording stopped.
+record-already-running: Output already being saved to ({0}). Enter "record" with no arguments to stop it.  
+record-started: Saving all output to "{0}". Enter "record" with no arguments to stop it.
+
+autoloading-known-drivers: No known driver to handle "{0}". Searching for known drivers...
+
+Warning: Warning: {0} (state={1},code={2,number,#})
+Error: Error: {0} (state={1},code={2,number,#})
+
+commit-complete: Commit complete
+rollback-complete: Rollback complete
+
+abort-on-error: Aborting command set because "force" is false and \
+				 command failed: "{0}"
+
+multiple-matches: Ambiguous command: {0}
+
+really-drop-all: Really drop every table in the database? (y/n)\ 
+abort-drop-all: Aborting drop all tables.
+
+drivers-found-count: 0#No driver classes found|1#{0} driver class found|1<{0} driver classes found
+rows-selected: 0#No rows selected|1#{0} row selected|1<{0} rows selected
+rows-affected: 0#No rows affected|1#{0} row affected|1<{0} rows affected|0>Unknown rows affected
+active-connections: 0#No active connections|1#{0} active connection:|1<{0} active connections:
+
+time-ms: ({0,number,#.###} seconds)
+
+cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
+\  -u <database url>               the JDBC URL to connect to\n \
+\  -n <username>                   the username to connect as\n \
+\  -p <password>                   the password to connect as\n \
+\  -d <driver class>               the driver class to use\n \
+\  --color=[true/false]            control whether color is used for display\n \
+\  --showHeader=[true/false]       show column names in query results\n \
+\  --headerInterval=ROWS;          the interval between which heades are displayed\n \
+\  --fastConnect=[true/false]      skip building table/column list for tab-completion\n \
+\  --autoCommit=[true/false]       enable/disable automatic transaction commit\n \
+\  --verbose=[true/false]          show verbose error messages and debug info\n \
+\  --showWarnings=[true/false]     display connection warnings\n \
+\  --showNestedErrs=[true/false]   display nested errors\n \
+\  --numberFormat=[pattern]        format numbers using DecimalFormat pattern\n \
+\  --force=[true/false]            continue running script even after errors\n \
+\  --maxWidth=MAXWIDTH             the maximum width of the terminal\n \
+\  --maxColumnWidth=MAXCOLWIDTH    the maximum width to use when displaying columns\n \
+\  --silent=[true/false]           be more silent\n \
+\  --autosave=[true/false]         automatically save preferences\n \
+\  --outputformat=[table/vertical/csv/tsv]   format mode for result display\n \
+\  --isolation=LEVEL               set the transaction isolation level\n \
+\  --help                          display this message
+
+
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java b/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java
new file mode 100644
index 0000000..a0bfb17
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineCommandCompletor.java
@@ -0,0 +1,78 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+
+import jline.ArgumentCompletor;
+import jline.Completor;
+import jline.MultiCompletor;
+import jline.NullCompletor;
+import jline.SimpleCompletor;
+
+class BeeLineCommandCompletor extends MultiCompletor {
+  private final BeeLine beeLine;
+
+  public BeeLineCommandCompletor(BeeLine beeLine) {
+    this.beeLine = beeLine;
+    List<ArgumentCompletor> completors = new LinkedList<ArgumentCompletor>();
+
+    for (int i = 0; i < beeLine.commandHandlers.length; i++) {
+      String[] cmds = beeLine.commandHandlers[i].getNames();
+      for (int j = 0; cmds != null && j < cmds.length; j++) {
+        Completor[] comps = beeLine.commandHandlers[i].getParameterCompletors();
+        List<Completor> compl = new LinkedList<Completor>();
+        compl.add(new SimpleCompletor(BeeLine.COMMAND_PREFIX + cmds[j]));
+        compl.addAll(Arrays.asList(comps));
+        compl.add(new NullCompletor()); // last param no complete
+        completors.add(new ArgumentCompletor(
+            compl.toArray(new Completor[0])));
+      }
+    }
+    setCompletors(completors.toArray(new Completor[0]));
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java b/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java
new file mode 100644
index 0000000..746466e
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineCompletor.java
@@ -0,0 +1,79 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.util.List;
+
+import jline.Completor;
+
+/**
+ * Completor for BeeLine. It dispatches to sub-completors based on the
+ * current arguments.
+ *
+ */
+class BeeLineCompletor implements Completor {
+  private final BeeLine beeLine;
+
+  /**
+   * @param beeLine
+   */
+  BeeLineCompletor(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  public int complete(String buf, int pos, List cand) {
+    if (buf != null && buf.startsWith(BeeLine.COMMAND_PREFIX)
+        && !buf.startsWith(BeeLine.COMMAND_PREFIX + "all")
+        && !buf.startsWith(BeeLine.COMMAND_PREFIX + "sql")) {
+      return beeLine.getCommandCompletor().complete(buf, pos, cand);
+    } else {
+      if (beeLine.getDatabaseConnection() != null && beeLine.getDatabaseConnection().getSQLCompletor() != null) {
+        return beeLine.getDatabaseConnection().getSQLCompletor().complete(buf, pos, cand);
+      } else {
+        return -1;
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
new file mode 100644
index 0000000..0a06876
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -0,0 +1,437 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Properties;
+import java.util.TreeSet;
+
+import jline.Completor;
+import jline.SimpleCompletor;
+import jline.Terminal;
+
+
+class BeeLineOpts implements Completor {
+  public static final int DEFAULT_MAX_WIDTH = 80;
+  public static final int DEFAULT_MAX_HEIGHT = 80;
+  public static final int DEFAULT_HEADER_INTERVAL = 100;
+  public static final String DEFAULT_ISOLATION_LEVEL =
+      "TRANSACTION_REPEATABLE_READ";
+  public static final String PROPERTY_PREFIX = "beeline.";
+  public static final String PROPERTY_NAME_EXIT =
+      PROPERTY_PREFIX + "system.exit";
+
+  private final BeeLine beeLine;
+  private boolean autosave = false;
+  private boolean silent = false;
+  private boolean color = false;
+  private boolean showHeader = true;
+  private int headerInterval = 100;
+  private boolean fastConnect = true;
+  private boolean autoCommit = false;
+  private boolean verbose = false;
+  private boolean force = false;
+  private boolean incremental = false;
+  private boolean showWarnings = false;
+  private boolean showNestedErrs = false;
+  private boolean showElapsedTime = true;
+  private String numberFormat = "default";
+  private final Terminal terminal = Terminal.setupTerminal();
+  private int maxWidth = DEFAULT_MAX_WIDTH;
+  private int maxHeight = DEFAULT_MAX_HEIGHT;
+  private int maxColumnWidth = 15;
+  int timeout = -1;
+  private String isolation = DEFAULT_ISOLATION_LEVEL;
+  private String outputFormat = "table";
+  private boolean trimScripts = true;
+
+  private final File rcFile = new File(saveDir(), "beeline.properties");
+  private String historyFile = new File(saveDir(), "history").getAbsolutePath();
+
+
+  public BeeLineOpts(BeeLine beeLine, Properties props) {
+    this.beeLine = beeLine;
+    if (terminal.getTerminalWidth() > 0) {
+      maxWidth = terminal.getTerminalWidth();
+    }
+    if (terminal.getTerminalHeight() > 0) {
+      maxHeight = terminal.getTerminalHeight();
+    }
+    loadProperties(props);
+  }
+
+
+  public Completor[] optionCompletors() {
+    return new Completor[] {this};
+  }
+
+  public String[] possibleSettingValues() {
+    List<String> vals = new LinkedList<String>();
+    vals.addAll(Arrays.asList(new String[] {"yes", "no"}));
+    return vals.toArray(new String[vals.size()]);
+  }
+
+
+  /**
+   * The save directory if HOME/.beeline/ on UNIX, and
+   * HOME/beeline/ on Windows.
+   */
+  public File saveDir() {
+    String dir = System.getProperty("beeline.rcfile");
+    if (dir != null && dir.length() > 0) {
+      return new File(dir);
+    }
+
+    File f = new File(System.getProperty("user.home"),
+        (System.getProperty("os.name").toLowerCase()
+            .indexOf("windows") != -1 ? "" : ".") + "beeline")
+        .getAbsoluteFile();
+    try {
+      f.mkdirs();
+    } catch (Exception e) {
+    }
+    return f;
+  }
+
+
+  @Override
+  public int complete(String buf, int pos, List cand) {
+    try {
+      return new SimpleCompletor(propertyNames()).complete(buf, pos, cand);
+    } catch (Throwable t) {
+      return -1;
+    }
+  }
+
+
+  public void save() throws IOException {
+    OutputStream out = new FileOutputStream(rcFile);
+    save(out);
+    out.close();
+  }
+
+  public void save(OutputStream out) throws IOException {
+    try {
+      Properties props = toProperties();
+      // don't save maxwidth: it is automatically set based on
+      // the terminal configuration
+      props.remove(PROPERTY_PREFIX + "maxwidth");
+      props.store(out, beeLine.getApplicationTitle());
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+  }
+
+  String[] propertyNames()
+      throws IllegalAccessException, InvocationTargetException {
+    TreeSet<String> names = new TreeSet<String>();
+
+    // get all the values from getXXX methods
+    Method[] m = getClass().getDeclaredMethods();
+    for (int i = 0; m != null && i < m.length; i++) {
+      if (!(m[i].getName().startsWith("get"))) {
+        continue;
+      }
+      if (m[i].getParameterTypes().length != 0) {
+        continue;
+      }
+      String propName = m[i].getName().substring(3).toLowerCase();
+      names.add(propName);
+    }
+    return names.toArray(new String[names.size()]);
+  }
+
+
+  public Properties toProperties()
+      throws IllegalAccessException, InvocationTargetException,
+      ClassNotFoundException {
+    Properties props = new Properties();
+
+    String[] names = propertyNames();
+    for (int i = 0; names != null && i < names.length; i++) {
+      props.setProperty(PROPERTY_PREFIX + names[i],
+          beeLine.getReflector().invoke(this, "get" + names[i], new Object[0])
+              .toString());
+    }
+    beeLine.debug("properties: " + props.toString());
+    return props;
+  }
+
+
+  public void load() throws IOException {
+    InputStream in = new FileInputStream(rcFile);
+    load(in);
+    in.close();
+  }
+
+
+  public void load(InputStream fin) throws IOException {
+    Properties p = new Properties();
+    p.load(fin);
+    loadProperties(p);
+  }
+
+
+  public void loadProperties(Properties props) {
+    for (Object element : props.keySet()) {
+      String key = element.toString();
+      if (key.equals(PROPERTY_NAME_EXIT)) {
+        // fix for sf.net bug 879422
+        continue;
+      }
+      if (key.startsWith(PROPERTY_PREFIX)) {
+        set(key.substring(PROPERTY_PREFIX.length()),
+            props.getProperty(key));
+      }
+    }
+  }
+
+  public void set(String key, String value) {
+    set(key, value, false);
+  }
+
+  public boolean set(String key, String value, boolean quiet) {
+    try {
+      beeLine.getReflector().invoke(this, "set" + key, new Object[] {value});
+      return true;
+    } catch (Exception e) {
+      if (!quiet) {
+        beeLine.error(beeLine.loc("error-setting", new Object[] {key, e}));
+      }
+      return false;
+    }
+  }
+
+  public void setFastConnect(boolean fastConnect) {
+    this.fastConnect = fastConnect;
+  }
+
+
+  public boolean getFastConnect() {
+    return fastConnect;
+  }
+
+  public void setAutoCommit(boolean autoCommit) {
+    this.autoCommit = autoCommit;
+  }
+
+  public boolean getAutoCommit() {
+    return autoCommit;
+  }
+
+  public void setVerbose(boolean verbose) {
+    this.verbose = verbose;
+  }
+
+  public boolean getVerbose() {
+    return verbose;
+  }
+
+  public void setShowWarnings(boolean showWarnings) {
+    this.showWarnings = showWarnings;
+  }
+
+  public boolean getShowWarnings() {
+    return showWarnings;
+  }
+
+  public void setShowNestedErrs(boolean showNestedErrs) {
+    this.showNestedErrs = showNestedErrs;
+  }
+
+  public boolean getShowNestedErrs() {
+    return showNestedErrs;
+  }
+
+  public void setShowElapsedTime(boolean showElapsedTime) {
+    this.showElapsedTime = showElapsedTime;
+  }
+
+  public boolean getShowElapsedTime() {
+    return showElapsedTime;
+  }
+
+  public void setNumberFormat(String numberFormat) {
+    this.numberFormat = numberFormat;
+  }
+
+  public String getNumberFormat() {
+    return numberFormat;
+  }
+
+  public void setMaxWidth(int maxWidth) {
+    this.maxWidth = maxWidth;
+  }
+
+  public int getMaxWidth() {
+    return maxWidth;
+  }
+
+  public void setMaxColumnWidth(int maxColumnWidth) {
+    this.maxColumnWidth = maxColumnWidth;
+  }
+
+  public int getMaxColumnWidth() {
+    return maxColumnWidth;
+  }
+
+  public void setTimeout(int timeout) {
+    this.timeout = timeout;
+  }
+
+  public int getTimeout() {
+    return timeout;
+  }
+
+  public void setIsolation(String isolation) {
+    this.isolation = isolation;
+  }
+
+  public String getIsolation() {
+    return isolation;
+  }
+
+  public void setHistoryFile(String historyFile) {
+    this.historyFile = historyFile;
+  }
+
+  public String getHistoryFile() {
+    return historyFile;
+  }
+
+  public void setColor(boolean color) {
+    this.color = color;
+  }
+
+  public boolean getColor() {
+    return color;
+  }
+
+  public void setShowHeader(boolean showHeader) {
+    this.showHeader = showHeader;
+  }
+
+  public boolean getShowHeader() {
+    return showHeader;
+  }
+
+  public void setHeaderInterval(int headerInterval) {
+    this.headerInterval = headerInterval;
+  }
+
+  public int getHeaderInterval() {
+    return headerInterval;
+  }
+
+  public void setForce(boolean force) {
+    this.force = force;
+  }
+
+  public boolean getForce() {
+    return force;
+  }
+
+  public void setIncremental(boolean incremental) {
+    this.incremental = incremental;
+  }
+
+  public boolean getIncremental() {
+    return incremental;
+  }
+
+  public void setSilent(boolean silent) {
+    this.silent = silent;
+  }
+
+  public boolean isSilent() {
+    return silent;
+  }
+
+  public void setAutosave(boolean autosave) {
+    this.autosave = autosave;
+  }
+
+  public boolean getAutosave() {
+    return autosave;
+  }
+
+  public void setOutputFormat(String outputFormat) {
+    this.outputFormat = outputFormat;
+  }
+
+  public String getOutputFormat() {
+    return outputFormat;
+  }
+
+  public void setTrimScripts(boolean trimScripts) {
+    this.trimScripts = trimScripts;
+  }
+
+  public boolean getTrimScripts() {
+    return trimScripts;
+  }
+
+  public void setMaxHeight(int maxHeight) {
+    this.maxHeight = maxHeight;
+  }
+
+  public int getMaxHeight() {
+    return maxHeight;
+  }
+
+  public File getPropertiesFile() {
+    return rcFile;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java b/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java
new file mode 100644
index 0000000..cab521f
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineSignalHandler.java
@@ -0,0 +1,57 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+
+package org.apache.hive.beeline;
+
+import java.sql.Statement;
+
+
+/**
+ * BeeLineSignalHandler.
+ *
+ */
+public interface BeeLineSignalHandler {
+  public void setStatement(Statement stmt);
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/BufferedRows.java b/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
new file mode 100644
index 0000000..4384a52
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/BufferedRows.java
@@ -0,0 +1,94 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Iterator;
+import java.util.LinkedList;
+
+/**
+ * Rows implementation which buffers all rows in a linked list.
+ */
+class BufferedRows extends Rows {
+  private final LinkedList<Row> list;
+  private final Iterator<Row> iterator;
+
+  BufferedRows(BeeLine beeLine, ResultSet rs) throws SQLException {
+    super(beeLine, rs);
+    list = new LinkedList<Row>();
+    int count = rsMeta.getColumnCount();
+    list.add(new Row(count));
+    while (rs.next()) {
+      list.add(new Row(count, rs));
+    }
+    iterator = list.iterator();
+  }
+
+  public boolean hasNext() {
+    return iterator.hasNext();
+  }
+
+  public Object next() {
+    return iterator.next();
+  }
+
+  @Override
+  void normalizeWidths() {
+    int[] max = null;
+    for (Row row : list) {
+      if (max == null) {
+        max = new int[row.values.length];
+      }
+      for (int j = 0; j < max.length; j++) {
+        max[j] = Math.max(max[j], row.sizes[j] + 1);
+      }
+    }
+    for (Row row : list) {
+      row.sizes = max;
+    }
+  }
+
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java b/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java
new file mode 100644
index 0000000..3b2f8d4
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java
@@ -0,0 +1,261 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+
+/**
+ * A buffer that can output segments using ANSI color.
+ *
+ */
+final class ColorBuffer implements Comparable<Object> {
+  private static final ColorBuffer.ColorAttr BOLD = new ColorAttr("\033[1m");
+  private static final ColorBuffer.ColorAttr NORMAL = new ColorAttr("\033[m");
+  private static final ColorBuffer.ColorAttr REVERS = new ColorAttr("\033[7m");
+  private static final ColorBuffer.ColorAttr LINED = new ColorAttr("\033[4m");
+  private static final ColorBuffer.ColorAttr GREY = new ColorAttr("\033[1;30m");
+  private static final ColorBuffer.ColorAttr RED = new ColorAttr("\033[1;31m");
+  private static final ColorBuffer.ColorAttr GREEN = new ColorAttr("\033[1;32m");
+  private static final ColorBuffer.ColorAttr BLUE = new ColorAttr("\033[1;34m");
+  private static final ColorBuffer.ColorAttr CYAN = new ColorAttr("\033[1;36m");
+  private static final ColorBuffer.ColorAttr YELLOW = new ColorAttr("\033[1;33m");
+  private static final ColorBuffer.ColorAttr MAGENTA = new ColorAttr("\033[1;35m");
+  private static final ColorBuffer.ColorAttr INVISIBLE = new ColorAttr("\033[8m");
+
+  private final List<Object> parts = new LinkedList<Object>();
+  private int visibleLength = 0;
+
+  private final boolean useColor;
+
+
+  public ColorBuffer(boolean useColor) {
+    this.useColor = useColor;
+    append("");
+  }
+
+  public ColorBuffer(String str, boolean useColor) {
+    this.useColor = useColor;
+    append(str);
+  }
+
+  /**
+   * Pad the specified String with spaces to the indicated length
+   *
+   * @param str
+   *          the String to pad
+   * @param len
+   *          the length we want the return String to be
+   * @return the passed in String with spaces appended until the
+   *         length matches the specified length.
+   */
+  ColorBuffer pad(ColorBuffer str, int len) {
+    while (str.getVisibleLength() < len) {
+      str.append(" ");
+    }
+    return append(str);
+  }
+
+  ColorBuffer center(String str, int len) {
+    StringBuilder buf = new StringBuilder(str);
+    while (buf.length() < len) {
+      buf.append(" ");
+      if (buf.length() < len) {
+        buf.insert(0, " ");
+      }
+    }
+    return append(buf.toString());
+  }
+
+  ColorBuffer pad(String str, int len) {
+    if (str == null) {
+      str = "";
+    }
+    return pad(new ColorBuffer(str, false), len);
+  }
+
+  public String getColor() {
+    return getBuffer(useColor);
+  }
+
+  public String getMono() {
+    return getBuffer(false);
+  }
+
+  String getBuffer(boolean color) {
+    StringBuilder buf = new StringBuilder();
+    for (Object part : parts) {
+      if (!color && part instanceof ColorBuffer.ColorAttr) {
+        continue;
+      }
+      buf.append(part.toString());
+    }
+    return buf.toString();
+  }
+
+
+  /**
+   * Truncate the ColorBuffer to the specified length and return
+   * the new ColorBuffer. Any open color tags will be closed.
+   * Do nothing if the specified length is <= 0.
+   */
+  public ColorBuffer truncate(int len) {
+    if (len <= 0) {
+      return this;
+    }
+    ColorBuffer cbuff = new ColorBuffer(useColor);
+    ColorBuffer.ColorAttr lastAttr = null;
+    for (Iterator<Object> i = parts.iterator(); cbuff.getVisibleLength() < len && i.hasNext();) {
+      Object next = i.next();
+      if (next instanceof ColorBuffer.ColorAttr) {
+        lastAttr = (ColorBuffer.ColorAttr) next;
+        cbuff.append((ColorBuffer.ColorAttr) next);
+        continue;
+      }
+      String val = next.toString();
+      if (cbuff.getVisibleLength() + val.length() > len) {
+        int partLen = len - cbuff.getVisibleLength();
+        val = val.substring(0, partLen);
+      }
+      cbuff.append(val);
+    }
+
+    // close off the buffer with a normal tag
+    if (lastAttr != null && lastAttr != NORMAL) {
+      cbuff.append(NORMAL);
+    }
+
+    return cbuff;
+  }
+
+
+  @Override
+  public String toString() {
+    return getColor();
+  }
+
+  public ColorBuffer append(String str) {
+    parts.add(str);
+    visibleLength += str.length();
+    return this;
+  }
+
+  public ColorBuffer append(ColorBuffer buf) {
+    parts.addAll(buf.parts);
+    visibleLength += buf.getVisibleLength();
+    return this;
+  }
+
+  private ColorBuffer append(ColorBuffer.ColorAttr attr) {
+    parts.add(attr);
+    return this;
+  }
+
+  public int getVisibleLength() {
+    return visibleLength;
+  }
+
+  private ColorBuffer append(ColorBuffer.ColorAttr attr, String val) {
+    parts.add(attr);
+    parts.add(val);
+    parts.add(NORMAL);
+    visibleLength += val.length();
+    return this;
+  }
+
+  public ColorBuffer bold(String str) {
+    return append(BOLD, str);
+  }
+
+  public ColorBuffer lined(String str) {
+    return append(LINED, str);
+  }
+
+  public ColorBuffer grey(String str) {
+    return append(GREY, str);
+  }
+
+  public ColorBuffer red(String str) {
+    return append(RED, str);
+  }
+
+  public ColorBuffer blue(String str) {
+    return append(BLUE, str);
+  }
+
+  public ColorBuffer green(String str) {
+    return append(GREEN, str);
+  }
+
+  public ColorBuffer cyan(String str) {
+    return append(CYAN, str);
+  }
+
+  public ColorBuffer yellow(String str) {
+    return append(YELLOW, str);
+  }
+
+  public ColorBuffer magenta(String str) {
+    return append(MAGENTA, str);
+  }
+
+  private static class ColorAttr {
+    private final String attr;
+
+    public ColorAttr(String attr) {
+      this.attr = attr;
+    }
+
+    @Override
+    public String toString() {
+      return attr;
+    }
+  }
+
+  public int compareTo(Object other) {
+    return getMono().compareTo(((ColorBuffer) other).getMono());
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/CommandHandler.java b/beeline/src/java/org/apache/hive/beeline/CommandHandler.java
new file mode 100644
index 0000000..4d09da9
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/CommandHandler.java
@@ -0,0 +1,99 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import jline.Completor;
+
+/**
+ * A generic command to be executed. Execution of the command
+ * should be dispatched to the {@link #execute(java.lang.String)} method after determining that
+ * the command is appropriate with
+ * the {@link #matches(java.lang.String)} method.
+ *
+ */
+interface CommandHandler {
+  /**
+   * @return the name of the command
+   */
+  public String getName();
+
+
+  /**
+   * @return all the possible names of this command.
+   */
+  public String[] getNames();
+
+
+  /**
+   * @return the short help description for this command.
+   */
+  public String getHelpText();
+
+
+  /**
+   * Check to see if the specified string can be dispatched to this
+   * command.
+   *
+   * @param line
+   *          the command line to check.
+   * @return the command string that matches, or null if it no match
+   */
+  public String matches(String line);
+
+
+  /**
+   * Execute the specified command.
+   *
+   * @param line
+   *          the full command line to execute.
+   */
+  public boolean execute(String line);
+
+
+  /**
+   * Returns the completors that can handle parameters.
+   */
+  public Completor[] getParameterCompletors();
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
new file mode 100644
index 0000000..8e2a52f
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -0,0 +1,1298 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.BufferedReader;
+import java.io.FileInputStream;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.lang.reflect.Method;
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.Driver;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+import java.util.TreeSet;
+
+
+public class Commands {
+  private final BeeLine beeLine;
+
+  /**
+   * @param beeLine
+   */
+  Commands(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+
+  public boolean metadata(String line) {
+    beeLine.debug(line);
+
+    String[] parts = beeLine.split(line);
+    List<String> params = new LinkedList<String>(Arrays.asList(parts));
+    if (parts == null || parts.length == 0) {
+      return dbinfo("");
+    }
+
+    params.remove(0);
+    params.remove(0);
+    beeLine.debug(params.toString());
+    return metadata(parts[1],
+        params.toArray(new String[0]));
+  }
+
+
+  public boolean metadata(String cmd, String[] args) {
+    try {
+      Method[] m = beeLine.getDatabaseConnection().getDatabaseMetaData().getClass().getMethods();
+      Set<String> methodNames = new TreeSet<String>();
+      Set<String> methodNamesUpper = new TreeSet<String>();
+      for (int i = 0; i < m.length; i++) {
+        methodNames.add(m[i].getName());
+        methodNamesUpper.add(m[i].getName().toUpperCase());
+      }
+
+      if (!methodNamesUpper.contains(cmd.toUpperCase())) {
+        beeLine.error(beeLine.loc("no-such-method", cmd));
+        beeLine.error(beeLine.loc("possible-methods"));
+        for (Iterator<String> i = methodNames.iterator(); i.hasNext();) {
+          beeLine.error("   " + i.next());
+        }
+        return false;
+      }
+
+      Object res = beeLine.getReflector().invoke(beeLine.getDatabaseConnection().getDatabaseMetaData(),
+          DatabaseMetaData.class, cmd, Arrays.asList(args));
+
+      if (res instanceof ResultSet) {
+        ResultSet rs = (ResultSet) res;
+        if (rs != null) {
+          try {
+            beeLine.print(rs);
+          } finally {
+            rs.close();
+          }
+        }
+      } else if (res != null) {
+        beeLine.output(res.toString());
+      }
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+
+    return true;
+  }
+
+
+  public boolean history(String line) {
+    List hist = beeLine.getConsoleReader().getHistory().getHistoryList();
+    int index = 1;
+    for (Iterator i = hist.iterator(); i.hasNext(); index++) {
+      beeLine.output(beeLine.getColorBuffer().pad(index + ".", 6)
+          .append(i.next().toString()));
+    }
+    return true;
+  }
+
+
+  String arg1(String line, String paramname) {
+    return arg1(line, paramname, null);
+  }
+
+
+  String arg1(String line, String paramname, String def) {
+    String[] ret = beeLine.split(line);
+
+    if (ret == null || ret.length != 2) {
+      if (def != null) {
+        return def;
+      }
+      throw new IllegalArgumentException(beeLine.loc("arg-usage",
+          new Object[] {ret.length == 0 ? "" : ret[0],
+              paramname}));
+    }
+    return ret[1];
+  }
+
+
+  public boolean indexes(String line) throws Exception {
+    return metadata("getIndexInfo", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "table name"),
+        false + "",
+        true + ""});
+  }
+
+
+  public boolean primarykeys(String line) throws Exception {
+    return metadata("getPrimaryKeys", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "table name"),});
+  }
+
+
+  public boolean exportedkeys(String line) throws Exception {
+    return metadata("getExportedKeys", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "table name"),});
+  }
+
+
+  public boolean importedkeys(String line) throws Exception {
+    return metadata("getImportedKeys", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "table name"),});
+  }
+
+
+  public boolean procedures(String line) throws Exception {
+    return metadata("getProcedures", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "procedure name pattern", "%"),});
+  }
+
+
+  public boolean tables(String line) throws Exception {
+    return metadata("getTables", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "table name", "%"), null});
+  }
+
+
+  public boolean typeinfo(String line) throws Exception {
+    return metadata("getTypeInfo", new String[0]);
+  }
+
+
+  public boolean nativesql(String sql) throws Exception {
+    if (sql.startsWith(BeeLine.COMMAND_PREFIX)) {
+      sql = sql.substring(1);
+    }
+    if (sql.startsWith("native")) {
+      sql = sql.substring("native".length() + 1);
+    }
+    String nat = beeLine.getDatabaseConnection().getConnection().nativeSQL(sql);
+    beeLine.output(nat);
+    return true;
+  }
+
+
+  public boolean columns(String line) throws Exception {
+    return metadata("getColumns", new String[] {
+        beeLine.getConnection().getCatalog(), null,
+        arg1(line, "table name"), "%"});
+  }
+
+
+  public boolean dropall(String line) {
+    if (beeLine.getDatabaseConnection() == null || beeLine.getDatabaseConnection().getUrl() == null) {
+      return beeLine.error(beeLine.loc("no-current-connection"));
+    }
+    try {
+      if (!(beeLine.getConsoleReader().readLine(beeLine.loc("really-drop-all")).equals("y"))) {
+        return beeLine.error("abort-drop-all");
+      }
+
+      List<String> cmds = new LinkedList<String>();
+      ResultSet rs = beeLine.getTables();
+      try {
+        while (rs.next()) {
+          cmds.add("DROP TABLE "
+              + rs.getString("TABLE_NAME") + ";");
+        }
+      } finally {
+        try {
+          rs.close();
+        } catch (Exception e) {
+        }
+      }
+      // run as a batch
+      return beeLine.runCommands(cmds) == cmds.size();
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+  public boolean reconnect(String line) {
+    if (beeLine.getDatabaseConnection() == null || beeLine.getDatabaseConnection().getUrl() == null) {
+      return beeLine.error(beeLine.loc("no-current-connection"));
+    }
+    beeLine.info(beeLine.loc("reconnecting", beeLine.getDatabaseConnection().getUrl()));
+    try {
+      beeLine.getDatabaseConnection().reconnect();
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+    return true;
+  }
+
+
+  public boolean scan(String line) throws IOException {
+    TreeSet<String> names = new TreeSet<String>();
+
+    if (beeLine.getDrivers() == null) {
+      beeLine.setDrivers(Arrays.asList(beeLine.scanDrivers(line)));
+    }
+
+    beeLine.info(beeLine.loc("drivers-found-count", beeLine.getDrivers().size()));
+
+    // unique the list
+    for (Iterator<Driver> i = beeLine.getDrivers().iterator(); i.hasNext();) {
+      names.add(i.next().getClass().getName());
+    }
+
+    beeLine.output(beeLine.getColorBuffer()
+        .bold(beeLine.getColorBuffer().pad(beeLine.loc("compliant"), 10).getMono())
+        .bold(beeLine.getColorBuffer().pad(beeLine.loc("jdbc-version"), 8).getMono())
+        .bold(beeLine.getColorBuffer(beeLine.loc("driver-class")).getMono()));
+
+    for (Iterator<String> i = names.iterator(); i.hasNext();) {
+      String name = i.next().toString();
+      try {
+        Driver driver = (Driver) Class.forName(name).newInstance();
+        ColorBuffer msg = beeLine.getColorBuffer()
+            .pad(driver.jdbcCompliant() ? "yes" : "no", 10)
+            .pad(driver.getMajorVersion() + "."
+                + driver.getMinorVersion(), 8)
+            .append(name);
+        if (driver.jdbcCompliant()) {
+          beeLine.output(msg);
+        } else {
+          beeLine.output(beeLine.getColorBuffer().red(msg.getMono()));
+        }
+      } catch (Throwable t) {
+        beeLine.output(beeLine.getColorBuffer().red(name)); // error with driver
+      }
+    }
+    return true;
+  }
+
+
+  public boolean save(String line) throws IOException {
+    beeLine.info(beeLine.loc("saving-options", beeLine.getOpts().getPropertiesFile()));
+    beeLine.getOpts().save();
+    return true;
+  }
+
+
+  public boolean load(String line) throws IOException {
+    beeLine.getOpts().load();
+    beeLine.info(beeLine.loc("loaded-options", beeLine.getOpts().getPropertiesFile()));
+    return true;
+  }
+
+
+  public boolean config(String line) {
+    try {
+      Properties props = beeLine.getOpts().toProperties();
+      Set keys = new TreeSet(props.keySet());
+      for (Iterator i = keys.iterator(); i.hasNext();) {
+        String key = (String) i.next();
+        beeLine.output(beeLine.getColorBuffer()
+            .green(beeLine.getColorBuffer().pad(key.substring(
+                beeLine.getOpts().PROPERTY_PREFIX.length()), 20)
+                .getMono())
+            .append(props.getProperty(key)));
+      }
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+    return true;
+  }
+
+
+  public boolean set(String line) {
+    if (line == null || line.trim().equals("set")
+        || line.length() == 0) {
+      return config(null);
+    }
+
+    String[] parts = beeLine.split(line, 3, "Usage: set <key> <value>");
+    if (parts == null) {
+      return false;
+    }
+
+    String key = parts[1];
+    String value = parts[2];
+    boolean success = beeLine.getOpts().set(key, value, false);
+    // if we autosave, then save
+    if (success && beeLine.getOpts().getAutosave()) {
+      try {
+        beeLine.getOpts().save();
+      } catch (Exception saveException) {
+      }
+    }
+    return success;
+  }
+
+
+  public boolean commit(String line) throws SQLException {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+    if (!(beeLine.assertAutoCommit())) {
+      return false;
+    }
+    try {
+      long start = System.currentTimeMillis();
+      beeLine.getDatabaseConnection().getConnection().commit();
+      long end = System.currentTimeMillis();
+      beeLine.showWarnings();
+      beeLine.info(beeLine.loc("commit-complete")
+          + " " + beeLine.locElapsedTime(end - start));
+      return true;
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+  public boolean rollback(String line) throws SQLException {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+    if (!(beeLine.assertAutoCommit())) {
+      return false;
+    }
+    try {
+      long start = System.currentTimeMillis();
+      beeLine.getDatabaseConnection().getConnection().rollback();
+      long end = System.currentTimeMillis();
+      beeLine.showWarnings();
+      beeLine.info(beeLine.loc("rollback-complete")
+          + " " + beeLine.locElapsedTime(end - start));
+      return true;
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+  public boolean autocommit(String line) throws SQLException {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+    if (line.endsWith("on")) {
+      beeLine.getDatabaseConnection().getConnection().setAutoCommit(true);
+    } else if (line.endsWith("off")) {
+      beeLine.getDatabaseConnection().getConnection().setAutoCommit(false);
+    }
+    beeLine.showWarnings();
+    beeLine.autocommitStatus(beeLine.getDatabaseConnection().getConnection());
+    return true;
+  }
+
+
+  public boolean dbinfo(String line) {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+
+    beeLine.showWarnings();
+    int padlen = 50;
+
+    String[] m = new String[] {
+        "allProceduresAreCallable",
+        "allTablesAreSelectable",
+        "dataDefinitionCausesTransactionCommit",
+        "dataDefinitionIgnoredInTransactions",
+        "doesMaxRowSizeIncludeBlobs",
+        "getCatalogSeparator",
+        "getCatalogTerm",
+        "getDatabaseProductName",
+        "getDatabaseProductVersion",
+        "getDefaultTransactionIsolation",
+        "getDriverMajorVersion",
+        "getDriverMinorVersion",
+        "getDriverName",
+        "getDriverVersion",
+        "getExtraNameCharacters",
+        "getIdentifierQuoteString",
+        "getMaxBinaryLiteralLength",
+        "getMaxCatalogNameLength",
+        "getMaxCharLiteralLength",
+        "getMaxColumnNameLength",
+        "getMaxColumnsInGroupBy",
+        "getMaxColumnsInIndex",
+        "getMaxColumnsInOrderBy",
+        "getMaxColumnsInSelect",
+        "getMaxColumnsInTable",
+        "getMaxConnections",
+        "getMaxCursorNameLength",
+        "getMaxIndexLength",
+        "getMaxProcedureNameLength",
+        "getMaxRowSize",
+        "getMaxSchemaNameLength",
+        "getMaxStatementLength",
+        "getMaxStatements",
+        "getMaxTableNameLength",
+        "getMaxTablesInSelect",
+        "getMaxUserNameLength",
+        "getNumericFunctions",
+        "getProcedureTerm",
+        "getSchemaTerm",
+        "getSearchStringEscape",
+        "getSQLKeywords",
+        "getStringFunctions",
+        "getSystemFunctions",
+        "getTimeDateFunctions",
+        "getURL",
+        "getUserName",
+        "isCatalogAtStart",
+        "isReadOnly",
+        "nullPlusNonNullIsNull",
+        "nullsAreSortedAtEnd",
+        "nullsAreSortedAtStart",
+        "nullsAreSortedHigh",
+        "nullsAreSortedLow",
+        "storesLowerCaseIdentifiers",
+        "storesLowerCaseQuotedIdentifiers",
+        "storesMixedCaseIdentifiers",
+        "storesMixedCaseQuotedIdentifiers",
+        "storesUpperCaseIdentifiers",
+        "storesUpperCaseQuotedIdentifiers",
+        "supportsAlterTableWithAddColumn",
+        "supportsAlterTableWithDropColumn",
+        "supportsANSI92EntryLevelSQL",
+        "supportsANSI92FullSQL",
+        "supportsANSI92IntermediateSQL",
+        "supportsBatchUpdates",
+        "supportsCatalogsInDataManipulation",
+        "supportsCatalogsInIndexDefinitions",
+        "supportsCatalogsInPrivilegeDefinitions",
+        "supportsCatalogsInProcedureCalls",
+        "supportsCatalogsInTableDefinitions",
+        "supportsColumnAliasing",
+        "supportsConvert",
+        "supportsCoreSQLGrammar",
+        "supportsCorrelatedSubqueries",
+        "supportsDataDefinitionAndDataManipulationTransactions",
+        "supportsDataManipulationTransactionsOnly",
+        "supportsDifferentTableCorrelationNames",
+        "supportsExpressionsInOrderBy",
+        "supportsExtendedSQLGrammar",
+        "supportsFullOuterJoins",
+        "supportsGroupBy",
+        "supportsGroupByBeyondSelect",
+        "supportsGroupByUnrelated",
+        "supportsIntegrityEnhancementFacility",
+        "supportsLikeEscapeClause",
+        "supportsLimitedOuterJoins",
+        "supportsMinimumSQLGrammar",
+        "supportsMixedCaseIdentifiers",
+        "supportsMixedCaseQuotedIdentifiers",
+        "supportsMultipleResultSets",
+        "supportsMultipleTransactions",
+        "supportsNonNullableColumns",
+        "supportsOpenCursorsAcrossCommit",
+        "supportsOpenCursorsAcrossRollback",
+        "supportsOpenStatementsAcrossCommit",
+        "supportsOpenStatementsAcrossRollback",
+        "supportsOrderByUnrelated",
+        "supportsOuterJoins",
+        "supportsPositionedDelete",
+        "supportsPositionedUpdate",
+        "supportsSchemasInDataManipulation",
+        "supportsSchemasInIndexDefinitions",
+        "supportsSchemasInPrivilegeDefinitions",
+        "supportsSchemasInProcedureCalls",
+        "supportsSchemasInTableDefinitions",
+        "supportsSelectForUpdate",
+        "supportsStoredProcedures",
+        "supportsSubqueriesInComparisons",
+        "supportsSubqueriesInExists",
+        "supportsSubqueriesInIns",
+        "supportsSubqueriesInQuantifieds",
+        "supportsTableCorrelationNames",
+        "supportsTransactions",
+        "supportsUnion",
+        "supportsUnionAll",
+        "usesLocalFilePerTable",
+        "usesLocalFiles",
+    };
+
+    for (int i = 0; i < m.length; i++) {
+      try {
+        beeLine.output(beeLine.getColorBuffer().pad(m[i], padlen).append(
+            "" + beeLine.getReflector().invoke(beeLine.getDatabaseConnection().getDatabaseMetaData(),
+                m[i], new Object[0])));
+      } catch (Exception e) {
+        beeLine.handleException(e);
+      }
+    }
+    return true;
+  }
+
+
+  public boolean verbose(String line) {
+    beeLine.info("verbose: on");
+    return set("set verbose true");
+  }
+
+
+  public boolean outputformat(String line) {
+    return set("set " + line);
+  }
+
+
+  public boolean brief(String line) {
+    beeLine.info("verbose: off");
+    return set("set verbose false");
+  }
+
+
+  public boolean isolation(String line) throws SQLException {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+
+    int i;
+
+    if (line.endsWith("TRANSACTION_NONE")) {
+      i = Connection.TRANSACTION_NONE;
+    } else if (line.endsWith("TRANSACTION_READ_COMMITTED")) {
+      i = Connection.TRANSACTION_READ_COMMITTED;
+    } else if (line.endsWith("TRANSACTION_READ_UNCOMMITTED")) {
+      i = Connection.TRANSACTION_READ_UNCOMMITTED;
+    } else if (line.endsWith("TRANSACTION_REPEATABLE_READ")) {
+      i = Connection.TRANSACTION_REPEATABLE_READ;
+    } else if (line.endsWith("TRANSACTION_SERIALIZABLE")) {
+      i = Connection.TRANSACTION_SERIALIZABLE;
+    } else {
+      return beeLine.error("Usage: isolation <TRANSACTION_NONE "
+          + "| TRANSACTION_READ_COMMITTED "
+          + "| TRANSACTION_READ_UNCOMMITTED "
+          + "| TRANSACTION_REPEATABLE_READ "
+          + "| TRANSACTION_SERIALIZABLE>");
+    }
+
+    beeLine.getDatabaseConnection().getConnection().setTransactionIsolation(i);
+
+    int isol = beeLine.getDatabaseConnection().getConnection().getTransactionIsolation();
+    final String isoldesc;
+    switch (i)
+    {
+    case Connection.TRANSACTION_NONE:
+      isoldesc = "TRANSACTION_NONE";
+      break;
+    case Connection.TRANSACTION_READ_COMMITTED:
+      isoldesc = "TRANSACTION_READ_COMMITTED";
+      break;
+    case Connection.TRANSACTION_READ_UNCOMMITTED:
+      isoldesc = "TRANSACTION_READ_UNCOMMITTED";
+      break;
+    case Connection.TRANSACTION_REPEATABLE_READ:
+      isoldesc = "TRANSACTION_REPEATABLE_READ";
+      break;
+    case Connection.TRANSACTION_SERIALIZABLE:
+      isoldesc = "TRANSACTION_SERIALIZABLE";
+      break;
+    default:
+      isoldesc = "UNKNOWN";
+    }
+
+    beeLine.info(beeLine.loc("isolation-status", isoldesc));
+    return true;
+  }
+
+
+  public boolean batch(String line) {
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+    if (beeLine.getBatch() == null) {
+      beeLine.setBatch(new LinkedList<String>());
+      beeLine.info(beeLine.loc("batch-start"));
+      return true;
+    } else {
+      beeLine.info(beeLine.loc("running-batch"));
+      try {
+        beeLine.runBatch(beeLine.getBatch());
+        return true;
+      } catch (Exception e) {
+        return beeLine.error(e);
+      } finally {
+        beeLine.setBatch(null);
+      }
+    }
+  }
+
+  public boolean sql(String line) {
+    return execute(line, false);
+  }
+
+  public boolean call(String line) {
+    return execute(line, true);
+  }
+
+  private boolean execute(String line, boolean call) {
+    if (line == null || line.length() == 0) {
+      return false; // ???
+    }
+
+    // ### FIXME: doing the multi-line handling down here means
+    // higher-level logic never sees the extra lines. So,
+    // for example, if a script is being saved, it won't include
+    // the continuation lines! This is logged as sf.net
+    // bug 879518.
+
+    // use multiple lines for statements not terminated by ";"
+    try {
+      while (!(line.trim().endsWith(";"))) {
+        StringBuilder prompt = new StringBuilder(beeLine.getPrompt());
+        for (int i = 0; i < prompt.length() - 1; i++) {
+          if (prompt.charAt(i) != '>') {
+            prompt.setCharAt(i, i % 2 == 0 ? '.' : ' ');
+          }
+        }
+
+        String extra = beeLine.getConsoleReader().readLine(prompt.toString());
+        if (!beeLine.isComment(extra)) {
+          line += " " + extra;
+        }
+      }
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+
+    if (line.endsWith(";")) {
+      line = line.substring(0, line.length() - 1);
+    }
+
+    if (!(beeLine.assertConnection())) {
+      return false;
+    }
+
+    String sql = line;
+
+    if (sql.startsWith(BeeLine.COMMAND_PREFIX)) {
+      sql = sql.substring(1);
+    }
+
+    String prefix = call ? "call" : "sql";
+
+    if (sql.startsWith(prefix)) {
+      sql = sql.substring(prefix.length());
+    }
+
+    // batch statements?
+    if (beeLine.getBatch() != null) {
+      beeLine.getBatch().add(sql);
+      return true;
+    }
+
+    try {
+      Statement stmnt = null;
+      boolean hasResults;
+
+      try {
+        long start = System.currentTimeMillis();
+
+        if (call) {
+          stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall(sql);
+          hasResults = ((CallableStatement) stmnt).execute();
+        } else {
+          stmnt = beeLine.createStatement();
+          hasResults = stmnt.execute(sql);
+        }
+
+        beeLine.showWarnings();
+
+        if (hasResults) {
+          do {
+            ResultSet rs = stmnt.getResultSet();
+            try {
+              int count = beeLine.print(rs);
+              long end = System.currentTimeMillis();
+
+              beeLine.info(beeLine.loc("rows-selected", count) + " "
+                  + beeLine.locElapsedTime(end - start));
+            } finally {
+              rs.close();
+            }
+          } while (BeeLine.getMoreResults(stmnt));
+        } else {
+          int count = stmnt.getUpdateCount();
+          long end = System.currentTimeMillis();
+          beeLine.info(beeLine.loc("rows-affected", count)
+              + " " + beeLine.locElapsedTime(end - start));
+        }
+      } catch (Exception e) {
+        beeLine.error(e);
+        throw e;
+      } finally {
+        if (stmnt != null) {
+          stmnt.close();
+        }
+      }
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+    beeLine.showWarnings();
+    return true;
+  }
+
+
+  public boolean quit(String line) {
+    beeLine.setExit(true);
+    close(null);
+    return true;
+  }
+
+
+  /**
+   * Close all connections.
+   */
+  public boolean closeall(String line) {
+    if (close(null)) {
+      while (close(null)) {
+        ;
+      }
+      return true;
+    }
+    return false;
+  }
+
+
+  /**
+   * Close the current connection.
+   */
+  public boolean close(String line) {
+    if (beeLine.getDatabaseConnection() == null) {
+      return false;
+    }
+    try {
+      if (beeLine.getDatabaseConnection().getConnection() != null
+          && !(beeLine.getDatabaseConnection().getConnection().isClosed())) {
+        beeLine.info(beeLine.loc("closing",
+            beeLine.getDatabaseConnection().getConnection().getClass().getName()));
+        beeLine.getDatabaseConnection().getConnection().close();
+      } else {
+        beeLine.info(beeLine.loc("already-closed"));
+      }
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+    beeLine.getDatabaseConnections().remove();
+    return true;
+  }
+
+
+  /**
+   * Connect to the database defined in the specified properties file.
+   */
+  public boolean properties(String line) throws Exception {
+    String example = "";
+    example += "Usage: properties <properties file>" + BeeLine.getSeparator();
+
+    String[] parts = beeLine.split(line);
+    if (parts.length < 2) {
+      return beeLine.error(example);
+    }
+
+    int successes = 0;
+
+    for (int i = 1; i < parts.length; i++) {
+      Properties props = new Properties();
+      props.load(new FileInputStream(parts[i]));
+      if (connect(props)) {
+        successes++;
+      }
+    }
+
+    if (successes != (parts.length - 1)) {
+      return false;
+    } else {
+      return true;
+    }
+  }
+
+
+  public boolean connect(String line) throws Exception {
+    String example = "Usage: connect <url> <username> <password> [driver]"
+        + BeeLine.getSeparator();
+
+    String[] parts = beeLine.split(line);
+    if (parts == null) {
+      return false;
+    }
+
+    if (parts.length < 2) {
+      return beeLine.error(example);
+    }
+
+    String url = parts.length < 2 ? null : parts[1];
+    String user = parts.length < 3 ? null : parts[2];
+    String pass = parts.length < 4 ? null : parts[3];
+    String driver = parts.length < 5 ? null : parts[4];
+
+    Properties props = new Properties();
+    if (url != null) {
+      props.setProperty("url", url);
+    }
+    if (driver != null) {
+      props.setProperty("driver", driver);
+    }
+    if (user != null) {
+      props.setProperty("user", user);
+    }
+    if (pass != null) {
+      props.setProperty("password", pass);
+    }
+    return connect(props);
+  }
+
+
+  private String getProperty(Properties props, String[] keys) {
+    for (int i = 0; i < keys.length; i++) {
+      String val = props.getProperty(keys[i]);
+      if (val != null) {
+        return val;
+      }
+    }
+
+    for (Iterator i = props.keySet().iterator(); i.hasNext();) {
+      String key = (String) i.next();
+      for (int j = 0; j < keys.length; j++) {
+        if (key.endsWith(keys[j])) {
+          return props.getProperty(key);
+        }
+      }
+    }
+
+    return null;
+  }
+
+
+  public boolean connect(Properties props) throws IOException {
+    String url = getProperty(props, new String[] {
+        "url",
+        "javax.jdo.option.ConnectionURL",
+        "ConnectionURL",
+    });
+    String driver = getProperty(props, new String[] {
+        "driver",
+        "javax.jdo.option.ConnectionDriverName",
+        "ConnectionDriverName",
+    });
+    String username = getProperty(props, new String[] {
+        "user",
+        "javax.jdo.option.ConnectionUserName",
+        "ConnectionUserName",
+    });
+    String password = getProperty(props, new String[] {
+        "password",
+        "javax.jdo.option.ConnectionPassword",
+        "ConnectionPassword",
+    });
+
+    if (url == null || url.length() == 0) {
+      return beeLine.error("Property \"url\" is required");
+    }
+    if (driver == null || driver.length() == 0) {
+      if (!beeLine.scanForDriver(url)) {
+        return beeLine.error(beeLine.loc("no-driver", url));
+      }
+    }
+
+    beeLine.info("Connecting to " + url);
+
+    if (username == null) {
+      username = beeLine.getConsoleReader().readLine("Enter username for " + url + ": ");
+    }
+    if (password == null) {
+      password = beeLine.getConsoleReader().readLine("Enter password for " + url + ": ",
+          new Character('*'));
+    }
+
+    try {
+      beeLine.getDatabaseConnections().setConnection(
+          new DatabaseConnection(beeLine, driver, url, username, password));
+      beeLine.getDatabaseConnection().getConnection();
+
+      beeLine.setCompletions();
+      return true;
+    } catch (SQLException sqle) {
+      return beeLine.error(sqle);
+    } catch (IOException ioe) {
+      return beeLine.error(ioe);
+    }
+  }
+
+
+  public boolean rehash(String line) {
+    try {
+      if (!(beeLine.assertConnection())) {
+        return false;
+      }
+      if (beeLine.getDatabaseConnection() != null) {
+        beeLine.getDatabaseConnection().setCompletions(false);
+      }
+      return true;
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+  /**
+   * List the current connections
+   */
+  public boolean list(String line) {
+    int index = 0;
+    beeLine.info(beeLine.loc("active-connections", beeLine.getDatabaseConnections().size()));
+
+    for (Iterator<DatabaseConnection> i = beeLine.getDatabaseConnections().iterator(); i.hasNext(); index++) {
+      DatabaseConnection c = i.next();
+      boolean closed = false;
+      try {
+        closed = c.getConnection().isClosed();
+      } catch (Exception e) {
+        closed = true;
+      }
+
+      beeLine.output(beeLine.getColorBuffer().pad(" #" + index + "", 5)
+          .pad(closed ? beeLine.loc("closed") : beeLine.loc("open"), 9)
+          .append(c.getUrl()));
+    }
+
+    return true;
+  }
+
+
+  public boolean all(String line) {
+    int index = beeLine.getDatabaseConnections().getIndex();
+    boolean success = true;
+
+    for (int i = 0; i < beeLine.getDatabaseConnections().size(); i++) {
+      beeLine.getDatabaseConnections().setIndex(i);
+      beeLine.output(beeLine.loc("executing-con", beeLine.getDatabaseConnection()));
+      // ### FIXME: this is broken for multi-line SQL
+      success = sql(line.substring("all ".length())) && success;
+    }
+
+    // restore index
+    beeLine.getDatabaseConnections().setIndex(index);
+    return success;
+  }
+
+
+  public boolean go(String line) {
+    String[] parts = beeLine.split(line, 2, "Usage: go <connection index>");
+    if (parts == null) {
+      return false;
+    }
+    int index = Integer.parseInt(parts[1]);
+    if (!(beeLine.getDatabaseConnections().setIndex(index))) {
+      beeLine.error(beeLine.loc("invalid-connection", "" + index));
+      list(""); // list the current connections
+      return false;
+    }
+    return true;
+  }
+
+
+  /**
+   * Save or stop saving a script to a file
+   */
+  public boolean script(String line) {
+    if (beeLine.getScriptOutputFile() == null) {
+      return startScript(line);
+    } else {
+      return stopScript(line);
+    }
+  }
+
+
+  /**
+   * Stop writing to the script file and close the script.
+   */
+  private boolean stopScript(String line) {
+    try {
+      beeLine.getScriptOutputFile().close();
+    } catch (Exception e)
+    {
+      beeLine.handleException(e);
+    }
+
+    beeLine.output(beeLine.loc("script-closed", beeLine.getScriptOutputFile()));
+    beeLine.setScriptOutputFile(null);
+    return true;
+  }
+
+
+  /**
+   * Start writing to the specified script file.
+   */
+  private boolean startScript(String line) {
+    if (beeLine.getScriptOutputFile() != null) {
+      return beeLine.error(beeLine.loc("script-already-running", beeLine.getScriptOutputFile()));
+    }
+
+    String[] parts = beeLine.split(line, 2, "Usage: script <filename>");
+    if (parts == null) {
+      return false;
+    }
+
+    try {
+      beeLine.setScriptOutputFile(new OutputFile(parts[1]));
+      beeLine.output(beeLine.loc("script-started", beeLine.getScriptOutputFile()));
+      return true;
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+  /**
+   * Run a script from the specified file.
+   */
+  public boolean run(String line) {
+    String[] parts = beeLine.split(line, 2, "Usage: run <scriptfile>");
+    if (parts == null) {
+      return false;
+    }
+
+    List<String> cmds = new LinkedList<String>();
+
+    try {
+      BufferedReader reader = new BufferedReader(new FileReader(
+          parts[1]));
+      try {
+        // ### NOTE: fix for sf.net bug 879427
+        StringBuilder cmd = null;
+        for (;;) {
+          String scriptLine = reader.readLine();
+
+          if (scriptLine == null) {
+            break;
+          }
+
+          String trimmedLine = scriptLine.trim();
+          if (beeLine.getOpts().getTrimScripts()) {
+            scriptLine = trimmedLine;
+          }
+
+          if (cmd != null) {
+            // we're continuing an existing command
+            cmd.append(" \n");
+            cmd.append(scriptLine);
+            if (trimmedLine.endsWith(";")) {
+              // this command has terminated
+              cmds.add(cmd.toString());
+              cmd = null;
+            }
+          } else {
+            // we're starting a new command
+            if (beeLine.needsContinuation(scriptLine)) {
+              // multi-line
+              cmd = new StringBuilder(scriptLine);
+            } else {
+              // single-line
+              cmds.add(scriptLine);
+            }
+          }
+        }
+
+        if (cmd != null) {
+          // ### REVIEW: oops, somebody left the last command
+          // unterminated; should we fix it for them or complain?
+          // For now be nice and fix it.
+          cmd.append(";");
+          cmds.add(cmd.toString());
+        }
+      } finally {
+        reader.close();
+      }
+
+      // success only if all the commands were successful
+      return beeLine.runCommands(cmds) == cmds.size();
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+  /**
+   * Save or stop saving all output to a file.
+   */
+  public boolean record(String line) {
+    if (beeLine.getRecordOutputFile() == null) {
+      return startRecording(line);
+    } else {
+      return stopRecording(line);
+    }
+  }
+
+
+  /**
+   * Stop writing output to the record file.
+   */
+  private boolean stopRecording(String line) {
+    try {
+      beeLine.getRecordOutputFile().close();
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+    beeLine.output(beeLine.loc("record-closed", beeLine.getRecordOutputFile()));
+    beeLine.setRecordOutputFile(null);
+    return true;
+  }
+
+
+  /**
+   * Start writing to the specified record file.
+   */
+  private boolean startRecording(String line) {
+    if (beeLine.getRecordOutputFile() != null) {
+      return beeLine.error(beeLine.loc("record-already-running", beeLine.getRecordOutputFile()));
+    }
+
+    String[] parts = beeLine.split(line, 2, "Usage: record <filename>");
+    if (parts == null) {
+      return false;
+    }
+
+    try {
+      beeLine.setRecordOutputFile(new OutputFile(parts[1]));
+      beeLine.output(beeLine.loc("record-started", beeLine.getRecordOutputFile()));
+      return true;
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+  }
+
+
+
+
+  public boolean describe(String line) throws SQLException {
+    String[] table = beeLine.split(line, 2, "Usage: describe <table name>");
+    if (table == null) {
+      return false;
+    }
+
+    ResultSet rs;
+
+    if (table[1].equals("tables")) {
+      rs = beeLine.getTables();
+    } else {
+      rs = beeLine.getColumns(table[1]);
+    }
+
+    if (rs == null) {
+      return false;
+    }
+
+    beeLine.print(rs);
+    rs.close();
+    return true;
+  }
+
+
+  public boolean help(String line) {
+    String[] parts = beeLine.split(line);
+    String cmd = parts.length > 1 ? parts[1] : "";
+    int count = 0;
+    TreeSet<ColorBuffer> clist = new TreeSet<ColorBuffer>();
+
+    for (int i = 0; i < beeLine.commandHandlers.length; i++) {
+      if (cmd.length() == 0 ||
+          Arrays.asList(beeLine.commandHandlers[i].getNames()).contains(cmd)) {
+        clist.add(beeLine.getColorBuffer().pad("!" + beeLine.commandHandlers[i].getName(), 20)
+            .append(beeLine.wrap(beeLine.commandHandlers[i].getHelpText(), 60, 20)));
+      }
+    }
+
+    for (Iterator<ColorBuffer> i = clist.iterator(); i.hasNext();) {
+      beeLine.output(i.next());
+    }
+
+    if (cmd.length() == 0) {
+      beeLine.output("");
+      beeLine.output(beeLine.loc("comments", beeLine.getApplicationContactInformation()));
+    }
+
+    return true;
+  }
+
+
+  public boolean manual(String line) throws IOException {
+    InputStream in = BeeLine.class.getResourceAsStream("manual.txt");
+    if (in == null) {
+      return beeLine.error(beeLine.loc("no-manual"));
+    }
+
+    BufferedReader breader = new BufferedReader(
+        new InputStreamReader(in));
+    String man;
+    int index = 0;
+    while ((man = breader.readLine()) != null) {
+      index++;
+      beeLine.output(man);
+
+      // silly little pager
+      if (index % (beeLine.getOpts().getMaxHeight() - 1) == 0) {
+        String ret = beeLine.getConsoleReader().readLine(beeLine.loc("enter-for-more"));
+        if (ret != null && ret.startsWith("q")) {
+          break;
+        }
+      }
+    }
+    breader.close();
+    return true;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
new file mode 100644
index 0000000..68d82ca
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -0,0 +1,318 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+
+import jline.ArgumentCompletor;
+import jline.Completor;
+
+class DatabaseConnection {
+  private final BeeLine beeLine;
+  private Connection connection;
+  private DatabaseMetaData meta;
+  private final String driver;
+  private final String url;
+  private final String username;
+  private final String password;
+  private Schema schema = null;
+  private Completor sqlCompletor = null;
+
+
+  public DatabaseConnection(BeeLine beeLine, String driver, String url,
+      String username, String password) throws SQLException {
+    this.beeLine = beeLine;
+    this.driver = driver;
+    this.url = url;
+    this.username = username;
+    this.password = password;
+  }
+
+
+  @Override
+  public String toString() {
+    return getUrl() + "";
+  }
+
+
+  void setCompletions(boolean skipmeta) throws SQLException, IOException {
+    final String extraNameCharacters =
+        getDatabaseMetaData() == null || getDatabaseMetaData().getExtraNameCharacters() == null ? ""
+            : getDatabaseMetaData().getExtraNameCharacters();
+
+    // setup the completor for the database
+    sqlCompletor = new ArgumentCompletor(
+        new SQLCompletor(beeLine, skipmeta),
+        new ArgumentCompletor.AbstractArgumentDelimiter() {
+          // delimiters for SQL statements are any
+          // non-letter-or-number characters, except
+          // underscore and characters that are specified
+          // by the database to be valid name identifiers.
+          @Override
+          public boolean isDelimiterChar(String buf, int pos) {
+            char c = buf.charAt(pos);
+            if (Character.isWhitespace(c)) {
+              return true;
+            }
+            return !(Character.isLetterOrDigit(c))
+                && c != '_'
+                && extraNameCharacters.indexOf(c) == -1;
+          }
+        });
+
+    // not all argument elements need to hold true
+    ((ArgumentCompletor) sqlCompletor).setStrict(false);
+  }
+
+
+  /**
+   * Connection to the specified data source.
+   *
+   * @param driver
+   *          the driver class
+   * @param url
+   *          the connection URL
+   * @param username
+   *          the username
+   * @param password
+   *          the password
+   */
+  boolean connect() throws SQLException {
+    try {
+      if (driver != null && driver.length() != 0) {
+        Class.forName(driver);
+      }
+    } catch (ClassNotFoundException cnfe) {
+      return beeLine.error(cnfe);
+    }
+
+    boolean foundDriver = false;
+    try {
+      foundDriver = DriverManager.getDriver(getUrl()) != null;
+    } catch (Exception e) {
+    }
+
+    try {
+      close();
+    } catch (Exception e) {
+      return beeLine.error(e);
+    }
+
+    setConnection(DriverManager.getConnection(getUrl(), username, password));
+    setDatabaseMetaData(getConnection().getMetaData());
+
+    try {
+      beeLine.info(beeLine.loc("connected", new Object[] {
+          getDatabaseMetaData().getDatabaseProductName(),
+          getDatabaseMetaData().getDatabaseProductVersion()}));
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+
+    try {
+      beeLine.info(beeLine.loc("driver", new Object[] {
+          getDatabaseMetaData().getDriverName(),
+          getDatabaseMetaData().getDriverVersion()}));
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+
+    try {
+      getConnection().setAutoCommit(beeLine.getOpts().getAutoCommit());
+      // TODO: Setting autocommit should not generate an exception as long as it is set to false
+      // beeLine.autocommitStatus(getConnection());
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+
+    try {
+      beeLine.getCommands().isolation("isolation: " + beeLine.getOpts().getIsolation());
+    } catch (Exception e) {
+      beeLine.handleException(e);
+    }
+
+    return true;
+  }
+
+
+  public Connection getConnection() throws SQLException {
+    if (connection != null) {
+      return connection;
+    }
+    connect();
+    return connection;
+  }
+
+
+  public void reconnect() throws Exception {
+    close();
+    getConnection();
+  }
+
+
+  public void close() {
+    try {
+      try {
+        if (connection != null && !connection.isClosed()) {
+          beeLine.output(beeLine.loc("closing", connection));
+          connection.close();
+        }
+      } catch (Exception e) {
+        beeLine.handleException(e);
+      }
+    } finally {
+      setConnection(null);
+      setDatabaseMetaData(null);
+    }
+  }
+
+
+  public String[] getTableNames(boolean force) {
+    Schema.Table[] t = getSchema().getTables();
+    Set<String> names = new TreeSet<String>();
+    for (int i = 0; t != null && i < t.length; i++) {
+      names.add(t[i].getName());
+    }
+    return names.toArray(new String[names.size()]);
+  }
+
+  Schema getSchema() {
+    if (schema == null) {
+      schema = new Schema();
+    }
+    return schema;
+  }
+
+  void setConnection(Connection connection) {
+    this.connection = connection;
+  }
+
+  DatabaseMetaData getDatabaseMetaData() {
+    return meta;
+  }
+
+  void setDatabaseMetaData(DatabaseMetaData meta) {
+    this.meta = meta;
+  }
+
+  String getUrl() {
+    return url;
+  }
+
+  Completor getSQLCompletor() {
+    return sqlCompletor;
+  }
+
+  class Schema {
+    private Table[] tables = null;
+
+    Table[] getTables() {
+      if (tables != null) {
+        return tables;
+      }
+
+      List<Table> tnames = new LinkedList<Table>();
+
+      try {
+        ResultSet rs = getDatabaseMetaData().getTables(getConnection().getCatalog(),
+            null, "%", new String[] {"TABLE"});
+        try {
+          while (rs.next()) {
+            tnames.add(new Table(rs.getString("TABLE_NAME")));
+          }
+        } finally {
+          try {
+            rs.close();
+          } catch (Exception e) {
+          }
+        }
+      } catch (Throwable t) {
+      }
+      return tables = tnames.toArray(new Table[0]);
+    }
+
+    Table getTable(String name) {
+      Table[] t = getTables();
+      for (int i = 0; t != null && i < t.length; i++) {
+        if (name.equalsIgnoreCase(t[i].getName())) {
+          return t[i];
+        }
+      }
+      return null;
+    }
+
+    class Table {
+      final String name;
+      Column[] columns;
+
+      public Table(String name) {
+        this.name = name;
+      }
+
+
+      public String getName() {
+        return name;
+      }
+
+      class Column {
+        final String name;
+        boolean isPrimaryKey;
+
+        public Column(String name) {
+          this.name = name;
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java b/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java
new file mode 100644
index 0000000..6eb499a
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/DatabaseConnections.java
@@ -0,0 +1,98 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+class DatabaseConnections {
+  private final List<DatabaseConnection> connections = new ArrayList<DatabaseConnection>();
+  private int index = -1;
+
+  public DatabaseConnection current() {
+    if (index != -1) {
+      return connections.get(index);
+    }
+    return null;
+  }
+
+  public int size() {
+    return connections.size();
+  }
+
+  public Iterator<DatabaseConnection> iterator() {
+    return connections.iterator();
+  }
+
+  public void remove() {
+    if (index != -1) {
+      connections.remove(index);
+    }
+    while (index >= connections.size()) {
+      index--;
+    }
+  }
+
+  public void setConnection(DatabaseConnection connection) {
+    if (connections.indexOf(connection) == -1) {
+      connections.add(connection);
+    }
+    index = connections.indexOf(connection);
+  }
+
+  public int getIndex() {
+    return index;
+  }
+
+
+  public boolean setIndex(int index) {
+    if (index < 0 || index >= connections.size()) {
+      return false;
+    }
+    this.index = index;
+    return true;
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/DriverInfo.java b/beeline/src/java/org/apache/hive/beeline/DriverInfo.java
new file mode 100644
index 0000000..5a115a5
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/DriverInfo.java
@@ -0,0 +1,65 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.IOException;
+import java.util.Properties;
+
+public class DriverInfo {
+  public String sampleURL;
+
+  public DriverInfo(String name) throws IOException {
+    Properties props = new Properties();
+    props.load(DriverInfo.class.getResourceAsStream(name));
+    fromProperties(props);
+  }
+
+  public DriverInfo(Properties props) {
+    fromProperties(props);
+  }
+
+  public void fromProperties(Properties props) {
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java b/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java
new file mode 100644
index 0000000..2c0fa35
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/IncrementalRows.java
@@ -0,0 +1,129 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.NoSuchElementException;
+
+/**
+ * Rows implementation which returns rows incrementally from result set
+ * without any buffering.
+ */
+public class IncrementalRows extends Rows {
+  private final ResultSet rs;
+  private final Row labelRow;
+  private final Row maxRow;
+  private Row nextRow;
+  private boolean endOfResult;
+  private boolean normalizingWidths;
+
+
+  IncrementalRows(BeeLine beeLine, ResultSet rs) throws SQLException {
+    super(beeLine, rs);
+    this.rs = rs;
+
+    labelRow = new Row(rsMeta.getColumnCount());
+    maxRow = new Row(rsMeta.getColumnCount());
+    int maxWidth = beeLine.getOpts().getMaxColumnWidth();
+
+    // pre-compute normalization so we don't have to deal
+    // with SQLExceptions later
+    for (int i = 0; i < maxRow.sizes.length; ++i) {
+      // normalized display width is based on maximum of display size
+      // and label size
+      maxRow.sizes[i] = Math.max(
+          maxRow.sizes[i],
+          rsMeta.getColumnDisplaySize(i + 1));
+      maxRow.sizes[i] = Math.min(maxWidth, maxRow.sizes[i]);
+    }
+
+    nextRow = labelRow;
+    endOfResult = false;
+  }
+
+
+  public boolean hasNext() {
+    if (endOfResult) {
+      return false;
+    }
+
+    if (nextRow == null) {
+      try {
+        if (rs.next()) {
+          nextRow = new Row(labelRow.sizes.length, rs);
+
+          if (normalizingWidths) {
+            // perform incremental normalization
+            nextRow.sizes = labelRow.sizes;
+          }
+        } else {
+          endOfResult = true;
+        }
+      } catch (SQLException ex) {
+        throw new RuntimeException(ex.toString());
+      }
+    }
+    return (nextRow != null);
+  }
+
+  public Object next() {
+    if (!hasNext()) {
+      throw new NoSuchElementException();
+    }
+    Object ret = nextRow;
+    nextRow = null;
+    return ret;
+  }
+
+  @Override
+  void normalizeWidths() {
+    // normalize label row
+    labelRow.sizes = maxRow.sizes;
+    // and remind ourselves to perform incremental normalization
+    // for each row as it is produced
+    normalizingWidths = true;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/OutputFile.java b/beeline/src/java/org/apache/hive/beeline/OutputFile.java
new file mode 100644
index 0000000..8171200
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/OutputFile.java
@@ -0,0 +1,81 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+
+public class OutputFile {
+  final File file;
+  final PrintWriter out;
+
+  public OutputFile(String filename) throws IOException {
+    file = new File(filename);
+    out = new PrintWriter(new FileWriter(file));
+  }
+
+  @Override
+  public String toString() {
+    return file.getAbsolutePath();
+  }
+
+  public void addLine(String command) {
+    out.println(command);
+  }
+
+  public void println(String command) {
+    out.println(command);
+  }
+
+  public void print(String command) {
+    out.print(command);
+  }
+
+  public void close() throws IOException {
+    out.close();
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/OutputFormat.java b/beeline/src/java/org/apache/hive/beeline/OutputFormat.java
new file mode 100644
index 0000000..287b1c7
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/OutputFormat.java
@@ -0,0 +1,49 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+interface OutputFormat {
+  int print(Rows rows);
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java b/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java
new file mode 100644
index 0000000..a00fb53
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/ReflectiveCommandHandler.java
@@ -0,0 +1,75 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import jline.Completor;
+
+import org.apache.hadoop.fs.shell.Command;
+
+/**
+ * A {@link Command} implementation that uses reflection to
+ * determine the method to dispatch the command.
+ *
+ */
+public class ReflectiveCommandHandler extends AbstractCommandHandler {
+  private final BeeLine beeLine;
+
+  public ReflectiveCommandHandler(BeeLine beeLine, String[] cmds, Completor[] completor) {
+    super(beeLine, cmds, beeLine.loc("help-" + cmds[0]), completor);
+    this.beeLine = beeLine;
+  }
+
+  public boolean execute(String line) {
+    try {
+      Object ob = beeLine.getCommands().getClass().getMethod(getName(),
+          new Class[] {String.class})
+          .invoke(beeLine.getCommands(), new Object[] {line});
+      return ob != null && ob instanceof Boolean
+          && ((Boolean) ob).booleanValue();
+    } catch (Throwable e) {
+      return beeLine.error(e);
+    }
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/Reflector.java b/beeline/src/java/org/apache/hive/beeline/Reflector.java
new file mode 100644
index 0000000..2501046
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/Reflector.java
@@ -0,0 +1,157 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+
+class Reflector {
+  private final BeeLine beeLine;
+
+  public Reflector(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  public Object invoke(Object on, String method, Object[] args)
+      throws InvocationTargetException, IllegalAccessException,
+      ClassNotFoundException {
+    return invoke(on, method, Arrays.asList(args));
+  }
+
+  public Object invoke(Object on, String method, List args)
+      throws InvocationTargetException, IllegalAccessException,
+      ClassNotFoundException {
+    return invoke(on, on == null ? null : on.getClass(), method, args);
+  }
+
+
+  public Object invoke(Object on, Class defClass,
+      String method, List args)
+      throws InvocationTargetException, IllegalAccessException,
+      ClassNotFoundException {
+    Class c = defClass != null ? defClass : on.getClass();
+    List<Method> candidateMethods = new LinkedList<Method>();
+
+    Method[] m = c.getMethods();
+    for (int i = 0; i < m.length; i++) {
+      if (m[i].getName().equalsIgnoreCase(method)) {
+        candidateMethods.add(m[i]);
+      }
+    }
+
+    if (candidateMethods.size() == 0) {
+      throw new IllegalArgumentException(beeLine.loc("no-method",
+          new Object[] {method, c.getName()}));
+    }
+
+    for (Iterator<Method> i = candidateMethods.iterator(); i.hasNext();) {
+      Method meth = i.next();
+      Class[] ptypes = meth.getParameterTypes();
+      if (!(ptypes.length == args.size())) {
+        continue;
+      }
+
+      Object[] converted = convert(args, ptypes);
+      if (converted == null) {
+        continue;
+      }
+
+      if (!Modifier.isPublic(meth.getModifiers())) {
+        continue;
+      }
+      return meth.invoke(on, converted);
+    }
+    return null;
+  }
+
+
+  public static Object[] convert(List objects, Class[] toTypes)
+      throws ClassNotFoundException {
+    Object[] converted = new Object[objects.size()];
+    for (int i = 0; i < converted.length; i++) {
+      converted[i] = convert(objects.get(i), toTypes[i]);
+    }
+    return converted;
+  }
+
+
+  public static Object convert(Object ob, Class toType)
+      throws ClassNotFoundException {
+    if (ob == null || ob.toString().equals("null")) {
+      return null;
+    }
+    if (toType == String.class) {
+      return new String(ob.toString());
+    } else if (toType == Byte.class || toType == byte.class) {
+      return new Byte(ob.toString());
+    } else if (toType == Character.class || toType == char.class) {
+      return new Character(ob.toString().charAt(0));
+    } else if (toType == Short.class || toType == short.class) {
+      return new Short(ob.toString());
+    } else if (toType == Integer.class || toType == int.class) {
+      return new Integer(ob.toString());
+    } else if (toType == Long.class || toType == long.class) {
+      return new Long(ob.toString());
+    } else if (toType == Double.class || toType == double.class) {
+      return new Double(ob.toString());
+    } else if (toType == Float.class || toType == float.class) {
+      return new Float(ob.toString());
+    } else if (toType == Boolean.class || toType == boolean.class) {
+      return new Boolean(ob.toString().equals("true")
+          || ob.toString().equals(true + "")
+          || ob.toString().equals("1")
+          || ob.toString().equals("on")
+          || ob.toString().equals("yes"));
+    } else if (toType == Class.class) {
+      return Class.forName(ob.toString());
+    }
+    return null;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/Rows.java b/beeline/src/java/org/apache/hive/beeline/Rows.java
new file mode 100644
index 0000000..aacbf05
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/Rows.java
@@ -0,0 +1,186 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
+import java.util.Iterator;
+
+/**
+ * Abstract base class representing a set of rows to be displayed.
+ */
+abstract class Rows implements Iterator {
+  private final BeeLine beeLine;
+  final ResultSetMetaData rsMeta;
+  final Boolean[] primaryKeys;
+  final NumberFormat numberFormat;
+
+  Rows(BeeLine beeLine, ResultSet rs) throws SQLException {
+    this.beeLine = beeLine;
+    rsMeta = rs.getMetaData();
+    int count = rsMeta.getColumnCount();
+    primaryKeys = new Boolean[count];
+    if (beeLine.getOpts().getNumberFormat().equals("default")) {
+      numberFormat = null;
+    } else {
+      numberFormat = new DecimalFormat(beeLine.getOpts().getNumberFormat());
+    }
+  }
+
+  public void remove() {
+    throw new UnsupportedOperationException();
+  }
+
+  /**
+   * Update all of the rows to have the same size, set to the
+   * maximum length of each column in the Rows.
+   */
+  abstract void normalizeWidths();
+
+  /**
+   * Return whether the specified column (0-based index) is
+   * a primary key. Since this method depends on whether the
+   * JDBC driver property implements {@link ResultSetMetaData#getTableName} (many do not), it
+   * is not reliable for all databases.
+   */
+  boolean isPrimaryKey(int col) {
+    if (primaryKeys[col] != null) {
+      return primaryKeys[col].booleanValue();
+    }
+
+    try {
+      // this doesn't always work, since some JDBC drivers (e.g.,
+      // Oracle's) return a blank string from getTableName.
+      String table = rsMeta.getTableName(col + 1);
+      String column = rsMeta.getColumnName(col + 1);
+
+      if (table == null || table.length() == 0 ||
+          column == null || column.length() == 0) {
+        return (primaryKeys[col] = new Boolean(false)).booleanValue();
+      }
+
+      ResultSet pks = beeLine.getDatabaseConnection().getDatabaseMetaData().getPrimaryKeys(
+          beeLine.getDatabaseConnection().getDatabaseMetaData().getConnection().getCatalog(), null, table);
+
+      try {
+        while (pks.next()) {
+          if (column.equalsIgnoreCase(
+              pks.getString("COLUMN_NAME"))) {
+            return (primaryKeys[col] = new Boolean(true)).booleanValue();
+          }
+        }
+      } finally {
+        pks.close();
+      }
+
+      return (primaryKeys[col] = new Boolean(false)).booleanValue();
+    } catch (SQLException sqle) {
+      return (primaryKeys[col] = new Boolean(false)).booleanValue();
+    }
+  }
+
+
+  class Row {
+    final String[] values;
+    final boolean isMeta;
+    boolean deleted;
+    boolean inserted;
+    boolean updated;
+    int[] sizes;
+
+    Row(int size) throws SQLException {
+      isMeta = true;
+      values = new String[size];
+      sizes = new int[size];
+      for (int i = 0; i < size; i++) {
+        values[i] = rsMeta.getColumnLabel(i + 1);
+        sizes[i] = values[i] == null ? 1 : values[i].length();
+      }
+
+      deleted = false;
+      updated = false;
+      inserted = false;
+    }
+
+
+    Row(int size, ResultSet rs) throws SQLException {
+      isMeta = false;
+      values = new String[size];
+      sizes = new int[size];
+
+      try {
+        deleted = rs.rowDeleted();
+      } catch (Throwable t) {
+      }
+      try {
+        updated = rs.rowUpdated();
+      } catch (Throwable t) {
+      }
+      try {
+        inserted = rs.rowInserted();
+      } catch (Throwable t) {
+      }
+
+      for (int i = 0; i < size; i++) {
+        if (numberFormat != null) {
+          Object o = rs.getObject(i + 1);
+          if (o == null) {
+            values[i] = null;
+          }  else if (o instanceof Number) {
+            values[i] = numberFormat.format(o);
+          } else {
+            values[i] = o.toString();
+          }
+        } else {
+          values[i] = rs.getString(i + 1);
+        }
+        sizes[i] = values[i] == null ? 1 : values[i].length();
+      }
+    }
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java b/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
new file mode 100644
index 0000000..6b2c975
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/SQLCompletor.java
@@ -0,0 +1,113 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.sql.SQLException;
+import java.util.Set;
+import java.util.StringTokenizer;
+import java.util.TreeSet;
+
+import jline.SimpleCompletor;
+
+class SQLCompletor extends SimpleCompletor {
+  private final BeeLine beeLine;
+
+  public SQLCompletor(BeeLine beeLine, boolean skipmeta)
+      throws IOException, SQLException {
+    super(new String[0]);
+    this.beeLine = beeLine;
+
+    Set<String> completions = new TreeSet<String>();
+
+    // add the default SQL completions
+    String keywords = new BufferedReader(new InputStreamReader(
+        SQLCompletor.class.getResourceAsStream(
+            "sql-keywords.properties"))).readLine();
+
+    // now add the keywords from the current connection
+    try {
+      keywords += "," + beeLine.getDatabaseConnection().getDatabaseMetaData().getSQLKeywords();
+    } catch (Throwable t) {
+    }
+    try {
+      keywords += "," + beeLine.getDatabaseConnection().getDatabaseMetaData().getStringFunctions();
+    } catch (Throwable t) {
+    }
+    try {
+      keywords += "," + beeLine.getDatabaseConnection().getDatabaseMetaData().getNumericFunctions();
+    } catch (Throwable t) {
+    }
+    try {
+      keywords += "," + beeLine.getDatabaseConnection().getDatabaseMetaData().getSystemFunctions();
+    } catch (Throwable t) {
+    }
+    try {
+      keywords += "," + beeLine.getDatabaseConnection().getDatabaseMetaData().getTimeDateFunctions();
+    } catch (Throwable t) {
+    }
+
+    // also allow lower-case versions of all the keywords
+    keywords += "," + keywords.toLowerCase();
+
+    for (StringTokenizer tok = new StringTokenizer(keywords, ", "); tok.hasMoreTokens(); completions
+        .add(tok.nextToken())) {
+      ;
+    }
+
+    // now add the tables and columns from the current connection
+    if (!(skipmeta)) {
+      String[] columns = beeLine.getColumnNames(beeLine.getDatabaseConnection().getDatabaseMetaData());
+      for (int i = 0; columns != null && i < columns.length; i++) {
+        completions.add(columns[i++]);
+      }
+    }
+
+    // set the Strings that will be completed
+    setCandidateStrings(completions.toArray(new String[0]));
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java
new file mode 100644
index 0000000..c06f7e0
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/SeparatedValuesOutputFormat.java
@@ -0,0 +1,93 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+/**
+ * OutputFormat for values separated by a delimiter.
+ *
+ * <strong>TODO</strong>: Handle character escaping
+ *
+ */
+class SeparatedValuesOutputFormat implements OutputFormat {
+  /**
+   *
+   */
+  private final BeeLine beeLine;
+  private char separator;
+
+  public SeparatedValuesOutputFormat(BeeLine beeLine, char separator) {
+    this.beeLine = beeLine;
+    setSeparator(separator);
+  }
+
+  public int print(Rows rows) {
+    int count = 0;
+    while (rows.hasNext()) {
+      printRow(rows, (Rows.Row) rows.next());
+      count++;
+    }
+    return count - 1; // sans header row
+  }
+
+  public void printRow(Rows rows, Rows.Row row) {
+    String[] vals = row.values;
+    StringBuilder buf = new StringBuilder();
+    for (int i = 0; i < vals.length; i++) {
+      buf.append(buf.length() == 0 ? "" : "" + getSeparator())
+          .append('\'')
+          .append(vals[i] == null ? "" : vals[i])
+          .append('\'');
+    }
+    beeLine.output(buf.toString());
+  }
+
+  public void setSeparator(char separator) {
+    this.separator = separator;
+  }
+
+  public char getSeparator() {
+    return this.separator;
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java b/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java
new file mode 100644
index 0000000..befff94
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/SunSignalHandler.java
@@ -0,0 +1,75 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import sun.misc.Signal;
+import sun.misc.SignalHandler;
+
+public class SunSignalHandler implements BeeLineSignalHandler, SignalHandler {
+  private Statement stmt = null;
+
+  SunSignalHandler () {
+    // Interpret Ctrl+C as a request to cancel the currently
+    // executing query.
+    Signal.handle (new Signal ("INT"), this);
+  }
+
+  public void setStatement(Statement stmt) {
+    this.stmt = stmt;
+  }
+
+  public void handle (Signal signal) {
+    try {
+      if (stmt != null) {
+        stmt.cancel();
+      }
+    } catch (SQLException ex) {
+      // ignore
+    }
+  }
+}
diff --git a/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java b/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java
new file mode 100644
index 0000000..8f9cc42
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/TableNameCompletor.java
@@ -0,0 +1,69 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+import java.util.List;
+
+import jline.Completor;
+import jline.SimpleCompletor;
+
+class TableNameCompletor implements Completor {
+  private final BeeLine beeLine;
+
+  /**
+   * @param beeLine
+   */
+  TableNameCompletor(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  public int complete(String buf, int pos, List cand) {
+    if (beeLine.getDatabaseConnection() == null) {
+      return -1;
+    }
+    return new SimpleCompletor(beeLine.getDatabaseConnection().getTableNames(true))
+        .complete(buf, pos, cand);
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
new file mode 100644
index 0000000..2439bf9
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/TableOutputFormat.java
@@ -0,0 +1,162 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+/**
+ * OutputFormat for a pretty, table-like format.
+ *
+ */
+class TableOutputFormat implements OutputFormat {
+  private final BeeLine beeLine;
+  private final StringBuilder sb = new StringBuilder();
+
+  /**
+   * @param beeLine
+   */
+  TableOutputFormat(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  public int print(Rows rows) {
+    int index = 0;
+    ColorBuffer header = null;
+    ColorBuffer headerCols = null;
+    final int width = beeLine.getOpts().getMaxWidth() - 4;
+
+    // normalize the columns sizes
+    rows.normalizeWidths();
+
+    for (; rows.hasNext();) {
+      Rows.Row row = (Rows.Row) rows.next();
+      ColorBuffer cbuf = getOutputString(rows, row);
+      cbuf = cbuf.truncate(width);
+
+      if (index == 0)  {
+        sb.setLength(0);
+        for (int j = 0; j < row.sizes.length; j++) {
+          for (int k = 0; k < row.sizes[j]; k++) {
+            sb.append('-');
+          }
+          sb.append("-+-");
+        }
+
+        headerCols = cbuf;
+        header = beeLine.getColorBuffer()
+            .green(sb.toString())
+            .truncate(headerCols.getVisibleLength());
+      }
+
+      if (index == 0 ||
+          (beeLine.getOpts().getHeaderInterval() > 0
+              && index % beeLine.getOpts().getHeaderInterval() == 0
+              && beeLine.getOpts().getShowHeader())) {
+        printRow(header, true);
+        printRow(headerCols, false);
+        printRow(header, true);
+      }
+
+      if (index != 0) {
+        printRow(cbuf, false);
+      }
+      index++;
+    }
+
+    if (header != null && beeLine.getOpts().getShowHeader()) {
+      printRow(header, true);
+    }
+
+    return index - 1;
+  }
+
+  void printRow(ColorBuffer cbuff, boolean header) {
+    if (header) {
+      beeLine.output(beeLine.getColorBuffer().green("+-").append(cbuff).green("-+"));
+    } else {
+      beeLine.output(beeLine.getColorBuffer().green("| ").append(cbuff).green(" |"));
+    }
+  }
+
+  public ColorBuffer getOutputString(Rows rows, Rows.Row row) {
+    return getOutputString(rows, row, " | ");
+  }
+
+
+  ColorBuffer getOutputString(Rows rows, Rows.Row row, String delim) {
+    ColorBuffer buf = beeLine.getColorBuffer();
+
+    for (int i = 0; i < row.values.length; i++) {
+      if (buf.getVisibleLength() > 0) {
+        buf.green(delim);
+      }
+
+      ColorBuffer v;
+
+      if (row.isMeta) {
+        v = beeLine.getColorBuffer().center(row.values[i], row.sizes[i]);
+        if (rows.isPrimaryKey(i)) {
+          buf.cyan(v.getMono());
+        } else {
+          buf.bold(v.getMono());
+        }
+      } else {
+        v = beeLine.getColorBuffer().pad(row.values[i], row.sizes[i]);
+        if (rows.isPrimaryKey(i)) {
+          buf.cyan(v.getMono());
+        } else {
+          buf.append(v.getMono());
+        }
+      }
+    }
+
+    if (row.deleted) {
+      buf = beeLine.getColorBuffer().red(buf.getMono());
+    } else if (row.updated) {
+      buf = beeLine.getColorBuffer().blue(buf.getMono());
+    } else if (row.inserted) {
+      buf = beeLine.getColorBuffer().green(buf.getMono());
+    }
+    return buf;
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java
new file mode 100644
index 0000000..7b19504
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/VerticalOutputFormat.java
@@ -0,0 +1,88 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+/**
+ * OutputFormat for vertical column name: value format.
+ *
+ */
+class VerticalOutputFormat implements OutputFormat {
+  private final BeeLine beeLine;
+
+  /**
+   * @param beeLine
+   */
+  VerticalOutputFormat(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  public int print(Rows rows) {
+    int count = 0;
+    Rows.Row header = (Rows.Row) rows.next();
+    while (rows.hasNext()) {
+      printRow(rows, header, (Rows.Row) rows.next());
+      count++;
+    }
+    return count;
+  }
+
+  public void printRow(Rows rows, Rows.Row header, Rows.Row row) {
+    String[] head = header.values;
+    String[] vals = row.values;
+    int headwidth = 0;
+    for (int i = 0; i < head.length && i < vals.length; i++) {
+      headwidth = Math.max(headwidth, head[i].length());
+    }
+
+    headwidth += 2;
+
+    for (int i = 0; i < head.length && i < vals.length; i++) {
+      beeLine.output(beeLine.getColorBuffer().bold(
+          beeLine.getColorBuffer().pad(head[i], headwidth).getMono())
+          .append(vals[i] == null ? "" : vals[i]));
+    }
+    beeLine.output(""); // spacing
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java
new file mode 100644
index 0000000..296a328
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/XMLAttributeOutputFormat.java
@@ -0,0 +1,88 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+class XMLAttributeOutputFormat extends AbstractOutputFormat {
+  private final BeeLine beeLine;
+  private final StringBuilder buf = new StringBuilder();
+
+  /**
+   * @param beeLine
+   */
+  XMLAttributeOutputFormat(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  @Override
+  public void printHeader(Rows.Row header) {
+    beeLine.output("<resultset>");
+  }
+
+
+  @Override
+  public void printFooter(Rows.Row header) {
+    beeLine.output("</resultset>");
+  }
+
+  @Override
+  public void printRow(Rows rows, Rows.Row header, Rows.Row row) {
+    String[] head = header.values;
+    String[] vals = row.values;
+
+    buf.setLength(0);
+    buf.append("  <result");
+
+    for (int i = 0; i < head.length && i < vals.length; i++) {
+      buf.append(' ')
+        .append(head[i])
+        .append("=\"")
+        .append(BeeLine.xmlattrencode(vals[i]))
+        .append('"');
+    }
+
+    buf.append("/>");
+    beeLine.output(buf.toString());
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java b/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java
new file mode 100644
index 0000000..e187a6d
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/XMLElementOutputFormat.java
@@ -0,0 +1,80 @@
+/*
+ *  Copyright (c) 2002,2003,2004,2005 Marc Prud'hommeaux
+ *  All rights reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms,
+ *  with or without modification, are permitted provided
+ *  that the following conditions are met:
+ *
+ *  Redistributions of source code must retain the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer.
+ *  Redistributions in binary form must reproduce the above
+ *  copyright notice, this list of conditions and the following
+ *  disclaimer in the documentation and/or other materials
+ *  provided with the distribution.
+ *  Neither the name of the <ORGANIZATION> nor the names
+ *  of its contributors may be used to endorse or promote
+ *  products derived from this software without specific
+ *  prior written permission.
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
+ *  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  This software is hosted by SourceForge.
+ *  SourceForge is a trademark of VA Linux Systems, Inc.
+ */
+
+/*
+ * This source file is based on code taken from SQLLine 1.0.2
+ * The license above originally appeared in src/sqlline/SqlLine.java
+ * http://sqlline.sourceforge.net/
+ */
+package org.apache.hive.beeline;
+
+class XMLElementOutputFormat extends AbstractOutputFormat {
+  private final BeeLine beeLine;
+
+  /**
+   * @param beeLine
+   */
+  XMLElementOutputFormat(BeeLine beeLine) {
+    this.beeLine = beeLine;
+  }
+
+  @Override
+  public void printHeader(Rows.Row header) {
+    beeLine.output("<resultset>");
+  }
+
+  @Override
+  public void printFooter(Rows.Row header) {
+    beeLine.output("</resultset>");
+  }
+
+  @Override
+  public void printRow(Rows rows, Rows.Row header, Rows.Row row) {
+    String[] head = header.values;
+    String[] vals = row.values;
+
+    beeLine.output("  <result>");
+    for (int i = 0; i < head.length && i < vals.length; i++) {
+      beeLine.output("    <" + head[i] + ">"
+          + (BeeLine.xmlattrencode(vals[i]))
+          + "</" + head[i] + ">");
+    }
+    beeLine.output("  </result>");
+  }
+}
\ No newline at end of file
diff --git a/beeline/src/java/org/apache/hive/beeline/sql-keywords.properties b/beeline/src/java/org/apache/hive/beeline/sql-keywords.properties
new file mode 100644
index 0000000..0f1eb65
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/sql-keywords.properties
@@ -0,0 +1 @@
+ABSOLUTE,ACTION,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,ASC,ASSERTION,AT,AUTHORIZATION,AVG,BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHARACTER,CHAR_LENGTH,CHARACTER_LENGTH,CHECK,CLOSE,CLUSTER,COALESCE,COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,DISTINCT,DOMAIN,DOUBLE,DROP,ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXTERNAL,EXTRACT,FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FOUND,FROM,FULL,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,IDENTITY,IMMEDIATE,IN,INDICATOR,INITIALLY,INNER,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,MATCH,MAX,MIN,MINUTE,MODULE,MONTH,NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NOT,NULL,NULLIF,NUMERIC,OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,OVERWRITE,PAD,PARTIAL,PARTITION,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWS,SCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,SMALLINT,SOME,SPACE,SQL,SQLCODE,SQLERROR,SQLSTATE,SUBSTRING,SUM,SYSTEM_USER,TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,YEAR,ZONE,ADA,C,CATALOG_NAME,CHARACTER_SET_CATALOG,CHARACTER_SET_NAME,CHARACTER_SET_SCHEMA,CLASS_ORIGIN,COBOL,COLLATION_CATALOG,COLLATION_NAME,COLLATION_SCHEMA,COLUMN_NAME,COMMAND_FUNCTION,COMMITTED,CONDITION_NUMBER,CONNECTION_NAME,CONSTRAINT_CATALOG,CONSTRAINT_NAME,CONSTRAINT_SCHEMA,CURSOR_NAME,DATA,DATETIME_INTERVAL_CODE,DATETIME_INTERVAL_PRECISION,DYNAMIC_FUNCTION,FORTRAN,LENGTH,MESSAGE_LENGTH,MESSAGE_OCTET_LENGTH,MESSAGE_TEXT,MORE,MUMPS,NAME,NULLABLE,NUMBER,PASCAL,PLI,REPEATABLE,RETURNED_LENGTH,RETURNED_OCTET_LENGTH,RETURNED_SQLSTATE,ROW_COUNT,SCALE,SCHEMA_NAME,SERIALIZABLE,SERVER_NAME,SUBCLASS_ORIGIN,TABLE_NAME,TYPE,UNCOMMITTED,UNNAMED
diff --git a/beeline/src/java/org/apache/hive/beeline/util/QFileClient.java b/beeline/src/java/org/apache/hive/beeline/util/QFileClient.java
new file mode 100644
index 0000000..b62a883
--- /dev/null
+++ b/beeline/src/java/org/apache/hive/beeline/util/QFileClient.java
@@ -0,0 +1,316 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.beeline.util;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hive.beeline.BeeLine;
+
+/**
+ * QTestClient.
+ *
+ */
+public class QFileClient {
+  private String username;
+  private String password;
+  private String jdbcUrl;
+  private String jdbcDriver;
+
+  private final File hiveRootDirectory;
+  private File qFileDirectory;
+  private File outputDirectory;
+  private File expectedDirectory;
+  private final File scratchDirectory;
+  private final File warehouseDirectory;
+
+  private File testDataDirectory;
+  private File testScriptDirectory;
+
+  private String qFileName;
+  private String testname;
+
+  private File qFile;
+  private File outputFile;
+  private File expectedFile;
+
+  private PrintStream beelineOutputStream;
+
+  private BeeLine beeLine;
+
+  private RegexFilterSet filterSet;
+
+  private boolean hasErrors = false;
+
+  private static Log LOG = LogFactory
+      .getLog(QFileClient.class.getName());
+
+
+  public QFileClient(HiveConf hiveConf, String hiveRootDirectory, String qFileDirectory, String outputDirectory,
+      String expectedDirectory) {
+    this.hiveRootDirectory = new File(hiveRootDirectory);
+    this.qFileDirectory = new File(qFileDirectory);
+    this.outputDirectory = new File(outputDirectory);
+    this.expectedDirectory = new File(expectedDirectory);
+    this.scratchDirectory = new File(hiveConf.getVar(ConfVars.SCRATCHDIR));
+    this.warehouseDirectory = new File(hiveConf.getVar(ConfVars.METASTOREWAREHOUSE));
+  }
+
+
+  private class RegexFilterSet {
+    private final Map<Pattern, String> regexFilters = new LinkedHashMap<Pattern, String>();
+
+    public RegexFilterSet addFilter(String regex, String replacement) {
+      regexFilters.put(Pattern.compile(regex), replacement);
+      return this;
+    }
+
+    public String filter(String input) {
+      for (Pattern pattern : regexFilters.keySet()) {
+        input = pattern.matcher(input).replaceAll(regexFilters.get(pattern));
+      }
+      return input;
+    }
+  }
+
+  void initFilterSet() {
+    // Extract the leading four digits from the unix time value.
+    // Use this as a prefix in order to increase the selectivity
+    // of the unix time stamp replacement regex.
+    String currentTimePrefix = Long.toString(System.currentTimeMillis()).substring(0, 4);
+
+    String userName = System.getProperty("user.name");
+
+    String timePattern = "(Mon|Tue|Wed|Thu|Fri|Sat|Sun) "
+        + "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) "
+        + "\\d{2} \\d{2}:\\d{2}:\\d{2} \\w+ 20\\d{2}";
+    String unixTimePattern = "\\D" + currentTimePrefix + "\\d{6}\\D";
+    String unixTimeMillisPattern = "\\D" + currentTimePrefix + "\\d{9}\\D";
+
+    String operatorPattern = "\"(CONDITION|COPY|DEPENDENCY_COLLECTION|DDL"
+      + "|EXPLAIN|FETCH|FIL|FS|FUNCTION|GBY|HASHTABLEDUMMY|HASTTABLESINK|JOIN"
+      + "|LATERALVIEWFORWARD|LIM|LVJ|MAP|MAPJOIN|MAPRED|MAPREDLOCAL|MOVE|OP|RS"
+      + "|SCR|SEL|STATS|TS|UDTF|UNION)_\\d+\"";
+
+    filterSet = new RegexFilterSet()
+    .addFilter(scratchDirectory.toString() + "[\\w\\-/]+", "!!{hive.exec.scratchdir}!!")
+    .addFilter(warehouseDirectory.toString(), "!!{hive.metastore.warehouse.dir}!!")
+    .addFilter(expectedDirectory.toString(), "!!{expectedDirectory}!!")
+    .addFilter(outputDirectory.toString(), "!!{outputDirectory}!!")
+    .addFilter(qFileDirectory.toString(), "!!{qFileDirectory}!!")
+    .addFilter(hiveRootDirectory.toString(), "!!{hive.root}!!")
+    .addFilter("file:/\\w\\S+", "file:/!!ELIDED!!")
+    .addFilter("pfile:/\\w\\S+", "pfile:/!!ELIDED!!")
+    .addFilter("hdfs:/\\w\\S+", "hdfs:/!!ELIDED!!")
+    .addFilter("last_modified_by=\\w+", "last_modified_by=!!ELIDED!!")
+    .addFilter(timePattern, "!!TIMESTAMP!!")
+    .addFilter("(\\D)" + currentTimePrefix + "\\d{6}(\\D)", "$1!!UNIXTIME!!$2")
+    .addFilter("(\\D)" + currentTimePrefix + "\\d{9}(\\D)", "$1!!UNIXTIMEMILLIS!!$2")
+    .addFilter(userName, "!!{user.name}!!")
+    .addFilter(operatorPattern, "\"$1_!!ELIDED!!\"")
+    ;
+  };
+
+  public QFileClient setUsername(String username) {
+    this.username = username;
+    return this;
+  }
+
+  public QFileClient setPassword(String password) {
+    this.password = password;
+    return this;
+  }
+
+  public QFileClient setJdbcUrl(String jdbcUrl) {
+    this.jdbcUrl = jdbcUrl;
+    return this;
+  }
+
+  public QFileClient setJdbcDriver(String jdbcDriver) {
+    this.jdbcDriver = jdbcDriver;
+    return this;
+  }
+
+  public QFileClient setQFileName(String qFileName) {
+    this.qFileName = qFileName;
+    this.qFile = new File(qFileDirectory, qFileName);
+    this.testname = StringUtils.substringBefore(qFileName, ".");
+    expectedFile = new File(expectedDirectory, qFileName + ".out");
+    outputFile = new File(outputDirectory, qFileName + ".out");
+    return this;
+  }
+
+  public QFileClient setQFileDirectory(String qFileDirectory) {
+    this.qFileDirectory = new File(qFileDirectory);
+    return this;
+  }
+
+  public QFileClient setOutputDirectory(String outputDirectory) {
+    this.outputDirectory = new File(outputDirectory);
+    return this;
+  }
+
+  public QFileClient setExpectedDirectory(String expectedDirectory) {
+    this.expectedDirectory = new File(expectedDirectory);
+    return this;
+  }
+
+  public QFileClient setTestDataDirectory(String testDataDirectory) {
+    this.testDataDirectory = new File(testDataDirectory);
+    return this;
+  }
+
+  public QFileClient setTestScriptDirectory(String testScriptDirectory) {
+    this.testScriptDirectory = new File(testScriptDirectory);
+    return this;
+  }
+
+  public boolean hasErrors() {
+    return hasErrors;
+  }
+
+  private void initBeeLine() throws Exception {
+    beeLine = new BeeLine();
+    beelineOutputStream = new PrintStream(new File(outputDirectory, qFileName + ".beeline"));
+    beeLine.setOutputStream(beelineOutputStream);
+    beeLine.setErrorStream(beelineOutputStream);
+    beeLine.runCommands(new String[] {
+        "!set verbose true",
+        "!set shownestederrs true",
+        "!set showwarnings true",
+        "!set showelapsedtime false",
+        "!set maxwidth -1",
+        "!connect " + jdbcUrl + " " + username + " " + password + " " + jdbcDriver,
+    });
+  }
+
+  private void setUp() {
+    beeLine.runCommands(new String[] {
+        "USE default;",
+        "SHOW TABLES;",
+        "DROP DATABASE IF EXISTS `" + testname + "` CASCADE;",
+        "CREATE DATABASE `" + testname + "`;",
+        "USE `" + testname + "`;",
+        "set test.data.dir=" + testDataDirectory + ";",
+        "set test.script.dir=" + testScriptDirectory + ";",
+        "!run " + testScriptDirectory + "/q_test_init.sql",
+    });
+  }
+
+  private void tearDown() {
+    beeLine.runCommands(new String[] {
+        "!set outputformat table",
+        "USE default;",
+        "DROP DATABASE IF EXISTS `" + testname + "` CASCADE;",
+    });
+  }
+
+  private void runQFileTest() throws Exception {
+    hasErrors = false;
+    beeLine.runCommands(new String[] {
+        "!set outputformat csv",
+        "!record " + outputDirectory + "/" + qFileName + ".raw",
+      });
+
+    if (1 != beeLine.runCommands(new String[] { "!run " + qFileDirectory + "/" + qFileName })) {
+      hasErrors = true;
+    }
+    
+    beeLine.runCommands(new String[] { "!record" });
+  }
+
+
+  private void filterResults() throws IOException {
+    initFilterSet();
+    String rawOutput = FileUtils.readFileToString(new File(outputDirectory, qFileName + ".raw"));
+    FileUtils.writeStringToFile(outputFile, filterSet.filter(rawOutput));
+  }
+
+  public void cleanup() {
+    if (beeLine != null) {
+      beeLine.runCommands(new String[] {
+          "!quit"
+      });
+    }
+    if (beelineOutputStream != null) {
+      beelineOutputStream.close();
+    }
+    if (hasErrors) {
+      String oldFileName = outputDirectory + "/" + qFileName + ".raw";
+      String newFileName = oldFileName + ".error";
+      try {
+        FileUtils.moveFile(new File(oldFileName), new File(newFileName));
+      } catch (IOException e) {
+        System.out.println("Failed to move '" + oldFileName + "' to '" + newFileName);
+      }
+    }
+  }
+
+
+  public void run() throws Exception {
+    try {
+      initBeeLine();
+      setUp();
+      runQFileTest();
+      tearDown();
+      filterResults();
+    } finally {
+      cleanup();
+    }
+  }
+
+  /**
+   * Does the test have a file with expected results to compare the log against.
+   * False probably indicates that this is a new test and the caller should
+   * copy the log to the expected results directory.
+   * @return
+   */
+  public boolean hasExpectedResults() {
+    return expectedFile.exists();
+  }
+
+  public boolean compareResults() throws IOException {
+    if (!expectedFile.exists()) {
+      LOG.error("Expected results file does not exist: " + expectedFile);
+      return false;
+    }
+    return FileUtils.contentEquals(expectedFile, outputFile);
+  }
+
+  public void overwriteResults() {
+    try {
+      if (expectedFile.exists()) {
+        FileUtils.forceDelete(expectedFile);
+      }
+      FileUtils.copyFileToDirectory(outputFile, expectedDirectory, true);
+    } catch (IOException e) {
+      LOG.error("Failed to overwrite results!", e);
+    }
+  }
+}
diff --git a/beeline/src/test/.gitignore b/beeline/src/test/.gitignore
new file mode 100644
index 0000000..5e7613f
--- /dev/null
+++ b/beeline/src/test/.gitignore
@@ -0,0 +1,2 @@
+# Dummy file to ensure Git creates this directory
+~
